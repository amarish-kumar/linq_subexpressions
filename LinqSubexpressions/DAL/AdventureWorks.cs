

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
// 
// Do not make changes directly to this file - edit the template instead.
// 
// The following connection settings were used to generate this file:
//     Configuration file:     "LinqSubexpressions\App.config"
//     Connection String Name: "AdventureWorks"
//     Connection String:      "Data Source=NICKCDESKTOP\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=True;"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable RedundantUsingDirective
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable RedundantNameQualifier
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Data.Entity.Infrastructure;
using System.Linq.Expressions;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data;
using System.Data.Entity.Core.Objects;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Data.Entity.ModelConfiguration;
using System.Threading;
using DatabaseGeneratedOption = System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption;

namespace LinqSubexpressions.DAL
{
    // ************************************************************************
    // Unit of work
    public interface IMyDbContext : IDisposable
    {
        DbSet<Address> Addresses { get; set; } // Address
        DbSet<AddressType> AddressTypes { get; set; } // AddressType
        DbSet<AwBuildVersion> AwBuildVersions { get; set; } // AWBuildVersion
        DbSet<BillOfMaterial> BillOfMaterials { get; set; } // BillOfMaterials
        DbSet<Contact> Contacts { get; set; } // Contact
        DbSet<ContactCreditCard> ContactCreditCards { get; set; } // ContactCreditCard
        DbSet<ContactType> ContactTypes { get; set; } // ContactType
        DbSet<CountryRegion> CountryRegions { get; set; } // CountryRegion
        DbSet<CountryRegionCurrency> CountryRegionCurrencies { get; set; } // CountryRegionCurrency
        DbSet<CreditCard> CreditCards { get; set; } // CreditCard
        DbSet<Culture> Cultures { get; set; } // Culture
        DbSet<Currency> Currencies { get; set; } // Currency
        DbSet<CurrencyRate> CurrencyRates { get; set; } // CurrencyRate
        DbSet<Customer> Customers { get; set; } // Customer
        DbSet<CustomerAddress> CustomerAddresses { get; set; } // CustomerAddress
        DbSet<DatabaseLog> DatabaseLogs { get; set; } // DatabaseLog
        DbSet<Department> Departments { get; set; } // Department
        DbSet<Document> Documents { get; set; } // Document
        DbSet<Employee> Employees { get; set; } // Employee
        DbSet<EmployeeAddress> EmployeeAddresses { get; set; } // EmployeeAddress
        DbSet<EmployeeDepartmentHistory> EmployeeDepartmentHistories { get; set; } // EmployeeDepartmentHistory
        DbSet<EmployeePayHistory> EmployeePayHistories { get; set; } // EmployeePayHistory
        DbSet<ErrorLog> ErrorLogs { get; set; } // ErrorLog
        DbSet<Illustration> Illustrations { get; set; } // Illustration
        DbSet<Individual> Individuals { get; set; } // Individual
        DbSet<JobCandidate> JobCandidates { get; set; } // JobCandidate
        DbSet<Location> Locations { get; set; } // Location
        DbSet<Product> Products { get; set; } // Product
        DbSet<ProductCategory> ProductCategories { get; set; } // ProductCategory
        DbSet<ProductCostHistory> ProductCostHistories { get; set; } // ProductCostHistory
        DbSet<ProductDescription> ProductDescriptions { get; set; } // ProductDescription
        DbSet<ProductDocument> ProductDocuments { get; set; } // ProductDocument
        DbSet<ProductInventory> ProductInventories { get; set; } // ProductInventory
        DbSet<ProductListPriceHistory> ProductListPriceHistories { get; set; } // ProductListPriceHistory
        DbSet<ProductModel> ProductModels { get; set; } // ProductModel
        DbSet<ProductModelIllustration> ProductModelIllustrations { get; set; } // ProductModelIllustration
        DbSet<ProductModelProductDescriptionCulture> ProductModelProductDescriptionCultures { get; set; } // ProductModelProductDescriptionCulture
        DbSet<ProductPhoto> ProductPhotoes { get; set; } // ProductPhoto
        DbSet<ProductProductPhoto> ProductProductPhotoes { get; set; } // ProductProductPhoto
        DbSet<ProductReview> ProductReviews { get; set; } // ProductReview
        DbSet<ProductSubcategory> ProductSubcategories { get; set; } // ProductSubcategory
        DbSet<ProductVendor> ProductVendors { get; set; } // ProductVendor
        DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; } // PurchaseOrderDetail
        DbSet<PurchaseOrderHeader> PurchaseOrderHeaders { get; set; } // PurchaseOrderHeader
        DbSet<SalesOrderDetail> SalesOrderDetails { get; set; } // SalesOrderDetail
        DbSet<SalesOrderHeader> SalesOrderHeaders { get; set; } // SalesOrderHeader
        DbSet<SalesOrderHeaderSalesReason> SalesOrderHeaderSalesReasons { get; set; } // SalesOrderHeaderSalesReason
        DbSet<SalesPerson> SalesPersons { get; set; } // SalesPerson
        DbSet<SalesPersonQuotaHistory> SalesPersonQuotaHistories { get; set; } // SalesPersonQuotaHistory
        DbSet<SalesReason> SalesReasons { get; set; } // SalesReason
        DbSet<SalesTaxRate> SalesTaxRates { get; set; } // SalesTaxRate
        DbSet<SalesTerritory> SalesTerritories { get; set; } // SalesTerritory
        DbSet<SalesTerritoryHistory> SalesTerritoryHistories { get; set; } // SalesTerritoryHistory
        DbSet<ScrapReason> ScrapReasons { get; set; } // ScrapReason
        DbSet<Shift> Shifts { get; set; } // Shift
        DbSet<ShipMethod> ShipMethods { get; set; } // ShipMethod
        DbSet<ShoppingCartItem> ShoppingCartItems { get; set; } // ShoppingCartItem
        DbSet<SpecialOffer> SpecialOffers { get; set; } // SpecialOffer
        DbSet<SpecialOfferProduct> SpecialOfferProducts { get; set; } // SpecialOfferProduct
        DbSet<StateProvince> StateProvinces { get; set; } // StateProvince
        DbSet<Store> Stores { get; set; } // Store
        DbSet<StoreContact> StoreContacts { get; set; } // StoreContact
        DbSet<TransactionHistory> TransactionHistories { get; set; } // TransactionHistory
        DbSet<TransactionHistoryArchive> TransactionHistoryArchives { get; set; } // TransactionHistoryArchive
        DbSet<UnitMeasure> UnitMeasures { get; set; } // UnitMeasure
        DbSet<VAdditionalContactInfo> VAdditionalContactInfoes { get; set; } // vAdditionalContactInfo
        DbSet<VEmployee> VEmployees { get; set; } // vEmployee
        DbSet<VEmployeeDepartment> VEmployeeDepartments { get; set; } // vEmployeeDepartment
        DbSet<VEmployeeDepartmentHistory> VEmployeeDepartmentHistories { get; set; } // vEmployeeDepartmentHistory
        DbSet<Vendor> Vendors { get; set; } // Vendor
        DbSet<VendorAddress> VendorAddresses { get; set; } // VendorAddress
        DbSet<VendorContact> VendorContacts { get; set; } // VendorContact
        DbSet<VIndividualCustomer> VIndividualCustomers { get; set; } // vIndividualCustomer
        DbSet<VIndividualDemographic> VIndividualDemographics { get; set; } // vIndividualDemographics
        DbSet<VJobCandidate> VJobCandidates { get; set; } // vJobCandidate
        DbSet<VJobCandidateEducation> VJobCandidateEducations { get; set; } // vJobCandidateEducation
        DbSet<VJobCandidateEmployment> VJobCandidateEmployments { get; set; } // vJobCandidateEmployment
        DbSet<VProductAndDescription> VProductAndDescriptions { get; set; } // vProductAndDescription
        DbSet<VProductModelCatalogDescription> VProductModelCatalogDescriptions { get; set; } // vProductModelCatalogDescription
        DbSet<VProductModelInstruction> VProductModelInstructions { get; set; } // vProductModelInstructions
        DbSet<VSalesPerson> VSalesPersons { get; set; } // vSalesPerson
        DbSet<VSalesPersonSalesByFiscalYear> VSalesPersonSalesByFiscalYears { get; set; } // vSalesPersonSalesByFiscalYears
        DbSet<VStateProvinceCountryRegion> VStateProvinceCountryRegions { get; set; } // vStateProvinceCountryRegion
        DbSet<VStoreWithDemographic> VStoreWithDemographics { get; set; } // vStoreWithDemographics
        DbSet<VVendor> VVendors { get; set; } // vVendor
        DbSet<WorkOrder> WorkOrders { get; set; } // WorkOrder
        DbSet<WorkOrderRouting> WorkOrderRoutings { get; set; } // WorkOrderRouting

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(CancellationToken cancellationToken);
        
        // Stored Procedures
        List<UspGetBillOfMaterialsReturnModel> UspGetBillOfMaterials(int? startProductId, DateTime? checkDate);
        List<UspGetBillOfMaterialsReturnModel> UspGetBillOfMaterials(int? startProductId, DateTime? checkDate, out int procResult);
        List<UspGetEmployeeManagersReturnModel> UspGetEmployeeManagers(int? employeeId);
        List<UspGetEmployeeManagersReturnModel> UspGetEmployeeManagers(int? employeeId, out int procResult);
        List<UspGetManagerEmployeesReturnModel> UspGetManagerEmployees(int? managerId);
        List<UspGetManagerEmployeesReturnModel> UspGetManagerEmployees(int? managerId, out int procResult);
        List<UspGetWhereUsedProductIdReturnModel> UspGetWhereUsedProductId(int? startProductId, DateTime? checkDate);
        List<UspGetWhereUsedProductIdReturnModel> UspGetWhereUsedProductId(int? startProductId, DateTime? checkDate, out int procResult);
        int UspLogError(out int? errorLogId);
        int UspPrintError();
        int UspUpdateEmployeeHireInfo(int? employeeId, string title, DateTime? hireDate, DateTime? rateChangeDate, decimal? rate, byte? payFrequency, bool? currentFlag);
        int UspUpdateEmployeeLogin(int? employeeId, int? managerId, string loginId, string title, DateTime? hireDate, bool? currentFlag);
        int UspUpdateEmployeePersonalInfo(int? employeeId, string nationalIdNumber, DateTime? birthDate, string maritalStatus, string gender);
    }

    // ************************************************************************
    // Database context
    public class MyDbContext : DbContext, IMyDbContext
    {
        public DbSet<Address> Addresses { get; set; } // Address
        public DbSet<AddressType> AddressTypes { get; set; } // AddressType
        public DbSet<AwBuildVersion> AwBuildVersions { get; set; } // AWBuildVersion
        public DbSet<BillOfMaterial> BillOfMaterials { get; set; } // BillOfMaterials
        public DbSet<Contact> Contacts { get; set; } // Contact
        public DbSet<ContactCreditCard> ContactCreditCards { get; set; } // ContactCreditCard
        public DbSet<ContactType> ContactTypes { get; set; } // ContactType
        public DbSet<CountryRegion> CountryRegions { get; set; } // CountryRegion
        public DbSet<CountryRegionCurrency> CountryRegionCurrencies { get; set; } // CountryRegionCurrency
        public DbSet<CreditCard> CreditCards { get; set; } // CreditCard
        public DbSet<Culture> Cultures { get; set; } // Culture
        public DbSet<Currency> Currencies { get; set; } // Currency
        public DbSet<CurrencyRate> CurrencyRates { get; set; } // CurrencyRate
        public DbSet<Customer> Customers { get; set; } // Customer
        public DbSet<CustomerAddress> CustomerAddresses { get; set; } // CustomerAddress
        public DbSet<DatabaseLog> DatabaseLogs { get; set; } // DatabaseLog
        public DbSet<Department> Departments { get; set; } // Department
        public DbSet<Document> Documents { get; set; } // Document
        public DbSet<Employee> Employees { get; set; } // Employee
        public DbSet<EmployeeAddress> EmployeeAddresses { get; set; } // EmployeeAddress
        public DbSet<EmployeeDepartmentHistory> EmployeeDepartmentHistories { get; set; } // EmployeeDepartmentHistory
        public DbSet<EmployeePayHistory> EmployeePayHistories { get; set; } // EmployeePayHistory
        public DbSet<ErrorLog> ErrorLogs { get; set; } // ErrorLog
        public DbSet<Illustration> Illustrations { get; set; } // Illustration
        public DbSet<Individual> Individuals { get; set; } // Individual
        public DbSet<JobCandidate> JobCandidates { get; set; } // JobCandidate
        public DbSet<Location> Locations { get; set; } // Location
        public DbSet<Product> Products { get; set; } // Product
        public DbSet<ProductCategory> ProductCategories { get; set; } // ProductCategory
        public DbSet<ProductCostHistory> ProductCostHistories { get; set; } // ProductCostHistory
        public DbSet<ProductDescription> ProductDescriptions { get; set; } // ProductDescription
        public DbSet<ProductDocument> ProductDocuments { get; set; } // ProductDocument
        public DbSet<ProductInventory> ProductInventories { get; set; } // ProductInventory
        public DbSet<ProductListPriceHistory> ProductListPriceHistories { get; set; } // ProductListPriceHistory
        public DbSet<ProductModel> ProductModels { get; set; } // ProductModel
        public DbSet<ProductModelIllustration> ProductModelIllustrations { get; set; } // ProductModelIllustration
        public DbSet<ProductModelProductDescriptionCulture> ProductModelProductDescriptionCultures { get; set; } // ProductModelProductDescriptionCulture
        public DbSet<ProductPhoto> ProductPhotoes { get; set; } // ProductPhoto
        public DbSet<ProductProductPhoto> ProductProductPhotoes { get; set; } // ProductProductPhoto
        public DbSet<ProductReview> ProductReviews { get; set; } // ProductReview
        public DbSet<ProductSubcategory> ProductSubcategories { get; set; } // ProductSubcategory
        public DbSet<ProductVendor> ProductVendors { get; set; } // ProductVendor
        public DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; } // PurchaseOrderDetail
        public DbSet<PurchaseOrderHeader> PurchaseOrderHeaders { get; set; } // PurchaseOrderHeader
        public DbSet<SalesOrderDetail> SalesOrderDetails { get; set; } // SalesOrderDetail
        public DbSet<SalesOrderHeader> SalesOrderHeaders { get; set; } // SalesOrderHeader
        public DbSet<SalesOrderHeaderSalesReason> SalesOrderHeaderSalesReasons { get; set; } // SalesOrderHeaderSalesReason
        public DbSet<SalesPerson> SalesPersons { get; set; } // SalesPerson
        public DbSet<SalesPersonQuotaHistory> SalesPersonQuotaHistories { get; set; } // SalesPersonQuotaHistory
        public DbSet<SalesReason> SalesReasons { get; set; } // SalesReason
        public DbSet<SalesTaxRate> SalesTaxRates { get; set; } // SalesTaxRate
        public DbSet<SalesTerritory> SalesTerritories { get; set; } // SalesTerritory
        public DbSet<SalesTerritoryHistory> SalesTerritoryHistories { get; set; } // SalesTerritoryHistory
        public DbSet<ScrapReason> ScrapReasons { get; set; } // ScrapReason
        public DbSet<Shift> Shifts { get; set; } // Shift
        public DbSet<ShipMethod> ShipMethods { get; set; } // ShipMethod
        public DbSet<ShoppingCartItem> ShoppingCartItems { get; set; } // ShoppingCartItem
        public DbSet<SpecialOffer> SpecialOffers { get; set; } // SpecialOffer
        public DbSet<SpecialOfferProduct> SpecialOfferProducts { get; set; } // SpecialOfferProduct
        public DbSet<StateProvince> StateProvinces { get; set; } // StateProvince
        public DbSet<Store> Stores { get; set; } // Store
        public DbSet<StoreContact> StoreContacts { get; set; } // StoreContact
        public DbSet<TransactionHistory> TransactionHistories { get; set; } // TransactionHistory
        public DbSet<TransactionHistoryArchive> TransactionHistoryArchives { get; set; } // TransactionHistoryArchive
        public DbSet<UnitMeasure> UnitMeasures { get; set; } // UnitMeasure
        public DbSet<VAdditionalContactInfo> VAdditionalContactInfoes { get; set; } // vAdditionalContactInfo
        public DbSet<VEmployee> VEmployees { get; set; } // vEmployee
        public DbSet<VEmployeeDepartment> VEmployeeDepartments { get; set; } // vEmployeeDepartment
        public DbSet<VEmployeeDepartmentHistory> VEmployeeDepartmentHistories { get; set; } // vEmployeeDepartmentHistory
        public DbSet<Vendor> Vendors { get; set; } // Vendor
        public DbSet<VendorAddress> VendorAddresses { get; set; } // VendorAddress
        public DbSet<VendorContact> VendorContacts { get; set; } // VendorContact
        public DbSet<VIndividualCustomer> VIndividualCustomers { get; set; } // vIndividualCustomer
        public DbSet<VIndividualDemographic> VIndividualDemographics { get; set; } // vIndividualDemographics
        public DbSet<VJobCandidate> VJobCandidates { get; set; } // vJobCandidate
        public DbSet<VJobCandidateEducation> VJobCandidateEducations { get; set; } // vJobCandidateEducation
        public DbSet<VJobCandidateEmployment> VJobCandidateEmployments { get; set; } // vJobCandidateEmployment
        public DbSet<VProductAndDescription> VProductAndDescriptions { get; set; } // vProductAndDescription
        public DbSet<VProductModelCatalogDescription> VProductModelCatalogDescriptions { get; set; } // vProductModelCatalogDescription
        public DbSet<VProductModelInstruction> VProductModelInstructions { get; set; } // vProductModelInstructions
        public DbSet<VSalesPerson> VSalesPersons { get; set; } // vSalesPerson
        public DbSet<VSalesPersonSalesByFiscalYear> VSalesPersonSalesByFiscalYears { get; set; } // vSalesPersonSalesByFiscalYears
        public DbSet<VStateProvinceCountryRegion> VStateProvinceCountryRegions { get; set; } // vStateProvinceCountryRegion
        public DbSet<VStoreWithDemographic> VStoreWithDemographics { get; set; } // vStoreWithDemographics
        public DbSet<VVendor> VVendors { get; set; } // vVendor
        public DbSet<WorkOrder> WorkOrders { get; set; } // WorkOrder
        public DbSet<WorkOrderRouting> WorkOrderRoutings { get; set; } // WorkOrderRouting
        
        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        public MyDbContext()
            : base("Name=AdventureWorks")
        {
        }

        public MyDbContext(string connectionString) : base(connectionString)
        {
        }

        public MyDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model) : base(connectionString, model)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AddressConfiguration());
            modelBuilder.Configurations.Add(new AddressTypeConfiguration());
            modelBuilder.Configurations.Add(new AwBuildVersionConfiguration());
            modelBuilder.Configurations.Add(new BillOfMaterialConfiguration());
            modelBuilder.Configurations.Add(new ContactConfiguration());
            modelBuilder.Configurations.Add(new ContactCreditCardConfiguration());
            modelBuilder.Configurations.Add(new ContactTypeConfiguration());
            modelBuilder.Configurations.Add(new CountryRegionConfiguration());
            modelBuilder.Configurations.Add(new CountryRegionCurrencyConfiguration());
            modelBuilder.Configurations.Add(new CreditCardConfiguration());
            modelBuilder.Configurations.Add(new CultureConfiguration());
            modelBuilder.Configurations.Add(new CurrencyConfiguration());
            modelBuilder.Configurations.Add(new CurrencyRateConfiguration());
            modelBuilder.Configurations.Add(new CustomerConfiguration());
            modelBuilder.Configurations.Add(new CustomerAddressConfiguration());
            modelBuilder.Configurations.Add(new DatabaseLogConfiguration());
            modelBuilder.Configurations.Add(new DepartmentConfiguration());
            modelBuilder.Configurations.Add(new DocumentConfiguration());
            modelBuilder.Configurations.Add(new EmployeeConfiguration());
            modelBuilder.Configurations.Add(new EmployeeAddressConfiguration());
            modelBuilder.Configurations.Add(new EmployeeDepartmentHistoryConfiguration());
            modelBuilder.Configurations.Add(new EmployeePayHistoryConfiguration());
            modelBuilder.Configurations.Add(new ErrorLogConfiguration());
            modelBuilder.Configurations.Add(new IllustrationConfiguration());
            modelBuilder.Configurations.Add(new IndividualConfiguration());
            modelBuilder.Configurations.Add(new JobCandidateConfiguration());
            modelBuilder.Configurations.Add(new LocationConfiguration());
            modelBuilder.Configurations.Add(new ProductConfiguration());
            modelBuilder.Configurations.Add(new ProductCategoryConfiguration());
            modelBuilder.Configurations.Add(new ProductCostHistoryConfiguration());
            modelBuilder.Configurations.Add(new ProductDescriptionConfiguration());
            modelBuilder.Configurations.Add(new ProductDocumentConfiguration());
            modelBuilder.Configurations.Add(new ProductInventoryConfiguration());
            modelBuilder.Configurations.Add(new ProductListPriceHistoryConfiguration());
            modelBuilder.Configurations.Add(new ProductModelConfiguration());
            modelBuilder.Configurations.Add(new ProductModelIllustrationConfiguration());
            modelBuilder.Configurations.Add(new ProductModelProductDescriptionCultureConfiguration());
            modelBuilder.Configurations.Add(new ProductPhotoConfiguration());
            modelBuilder.Configurations.Add(new ProductProductPhotoConfiguration());
            modelBuilder.Configurations.Add(new ProductReviewConfiguration());
            modelBuilder.Configurations.Add(new ProductSubcategoryConfiguration());
            modelBuilder.Configurations.Add(new ProductVendorConfiguration());
            modelBuilder.Configurations.Add(new PurchaseOrderDetailConfiguration());
            modelBuilder.Configurations.Add(new PurchaseOrderHeaderConfiguration());
            modelBuilder.Configurations.Add(new SalesOrderDetailConfiguration());
            modelBuilder.Configurations.Add(new SalesOrderHeaderConfiguration());
            modelBuilder.Configurations.Add(new SalesOrderHeaderSalesReasonConfiguration());
            modelBuilder.Configurations.Add(new SalesPersonConfiguration());
            modelBuilder.Configurations.Add(new SalesPersonQuotaHistoryConfiguration());
            modelBuilder.Configurations.Add(new SalesReasonConfiguration());
            modelBuilder.Configurations.Add(new SalesTaxRateConfiguration());
            modelBuilder.Configurations.Add(new SalesTerritoryConfiguration());
            modelBuilder.Configurations.Add(new SalesTerritoryHistoryConfiguration());
            modelBuilder.Configurations.Add(new ScrapReasonConfiguration());
            modelBuilder.Configurations.Add(new ShiftConfiguration());
            modelBuilder.Configurations.Add(new ShipMethodConfiguration());
            modelBuilder.Configurations.Add(new ShoppingCartItemConfiguration());
            modelBuilder.Configurations.Add(new SpecialOfferConfiguration());
            modelBuilder.Configurations.Add(new SpecialOfferProductConfiguration());
            modelBuilder.Configurations.Add(new StateProvinceConfiguration());
            modelBuilder.Configurations.Add(new StoreConfiguration());
            modelBuilder.Configurations.Add(new StoreContactConfiguration());
            modelBuilder.Configurations.Add(new TransactionHistoryConfiguration());
            modelBuilder.Configurations.Add(new TransactionHistoryArchiveConfiguration());
            modelBuilder.Configurations.Add(new UnitMeasureConfiguration());
            modelBuilder.Configurations.Add(new VAdditionalContactInfoConfiguration());
            modelBuilder.Configurations.Add(new VEmployeeConfiguration());
            modelBuilder.Configurations.Add(new VEmployeeDepartmentConfiguration());
            modelBuilder.Configurations.Add(new VEmployeeDepartmentHistoryConfiguration());
            modelBuilder.Configurations.Add(new VendorConfiguration());
            modelBuilder.Configurations.Add(new VendorAddressConfiguration());
            modelBuilder.Configurations.Add(new VendorContactConfiguration());
            modelBuilder.Configurations.Add(new VIndividualCustomerConfiguration());
            modelBuilder.Configurations.Add(new VIndividualDemographicConfiguration());
            modelBuilder.Configurations.Add(new VJobCandidateConfiguration());
            modelBuilder.Configurations.Add(new VJobCandidateEducationConfiguration());
            modelBuilder.Configurations.Add(new VJobCandidateEmploymentConfiguration());
            modelBuilder.Configurations.Add(new VProductAndDescriptionConfiguration());
            modelBuilder.Configurations.Add(new VProductModelCatalogDescriptionConfiguration());
            modelBuilder.Configurations.Add(new VProductModelInstructionConfiguration());
            modelBuilder.Configurations.Add(new VSalesPersonConfiguration());
            modelBuilder.Configurations.Add(new VSalesPersonSalesByFiscalYearConfiguration());
            modelBuilder.Configurations.Add(new VStateProvinceCountryRegionConfiguration());
            modelBuilder.Configurations.Add(new VStoreWithDemographicConfiguration());
            modelBuilder.Configurations.Add(new VVendorConfiguration());
            modelBuilder.Configurations.Add(new WorkOrderConfiguration());
            modelBuilder.Configurations.Add(new WorkOrderRoutingConfiguration());
        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AddressConfiguration(schema));
            modelBuilder.Configurations.Add(new AddressTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new AwBuildVersionConfiguration(schema));
            modelBuilder.Configurations.Add(new BillOfMaterialConfiguration(schema));
            modelBuilder.Configurations.Add(new ContactConfiguration(schema));
            modelBuilder.Configurations.Add(new ContactCreditCardConfiguration(schema));
            modelBuilder.Configurations.Add(new ContactTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CountryRegionConfiguration(schema));
            modelBuilder.Configurations.Add(new CountryRegionCurrencyConfiguration(schema));
            modelBuilder.Configurations.Add(new CreditCardConfiguration(schema));
            modelBuilder.Configurations.Add(new CultureConfiguration(schema));
            modelBuilder.Configurations.Add(new CurrencyConfiguration(schema));
            modelBuilder.Configurations.Add(new CurrencyRateConfiguration(schema));
            modelBuilder.Configurations.Add(new CustomerConfiguration(schema));
            modelBuilder.Configurations.Add(new CustomerAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new DatabaseLogConfiguration(schema));
            modelBuilder.Configurations.Add(new DepartmentConfiguration(schema));
            modelBuilder.Configurations.Add(new DocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new EmployeeConfiguration(schema));
            modelBuilder.Configurations.Add(new EmployeeAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new EmployeeDepartmentHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new EmployeePayHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ErrorLogConfiguration(schema));
            modelBuilder.Configurations.Add(new IllustrationConfiguration(schema));
            modelBuilder.Configurations.Add(new IndividualConfiguration(schema));
            modelBuilder.Configurations.Add(new JobCandidateConfiguration(schema));
            modelBuilder.Configurations.Add(new LocationConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductCostHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductDescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductDocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductInventoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductListPriceHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductModelConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductModelIllustrationConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductModelProductDescriptionCultureConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductPhotoConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductProductPhotoConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductReviewConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductSubcategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductVendorConfiguration(schema));
            modelBuilder.Configurations.Add(new PurchaseOrderDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new PurchaseOrderHeaderConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesOrderDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesOrderHeaderConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesOrderHeaderSalesReasonConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesPersonConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesPersonQuotaHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesReasonConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesTaxRateConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesTerritoryConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesTerritoryHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ScrapReasonConfiguration(schema));
            modelBuilder.Configurations.Add(new ShiftConfiguration(schema));
            modelBuilder.Configurations.Add(new ShipMethodConfiguration(schema));
            modelBuilder.Configurations.Add(new ShoppingCartItemConfiguration(schema));
            modelBuilder.Configurations.Add(new SpecialOfferConfiguration(schema));
            modelBuilder.Configurations.Add(new SpecialOfferProductConfiguration(schema));
            modelBuilder.Configurations.Add(new StateProvinceConfiguration(schema));
            modelBuilder.Configurations.Add(new StoreConfiguration(schema));
            modelBuilder.Configurations.Add(new StoreContactConfiguration(schema));
            modelBuilder.Configurations.Add(new TransactionHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new TransactionHistoryArchiveConfiguration(schema));
            modelBuilder.Configurations.Add(new UnitMeasureConfiguration(schema));
            modelBuilder.Configurations.Add(new VAdditionalContactInfoConfiguration(schema));
            modelBuilder.Configurations.Add(new VEmployeeConfiguration(schema));
            modelBuilder.Configurations.Add(new VEmployeeDepartmentConfiguration(schema));
            modelBuilder.Configurations.Add(new VEmployeeDepartmentHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new VendorConfiguration(schema));
            modelBuilder.Configurations.Add(new VendorAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new VendorContactConfiguration(schema));
            modelBuilder.Configurations.Add(new VIndividualCustomerConfiguration(schema));
            modelBuilder.Configurations.Add(new VIndividualDemographicConfiguration(schema));
            modelBuilder.Configurations.Add(new VJobCandidateConfiguration(schema));
            modelBuilder.Configurations.Add(new VJobCandidateEducationConfiguration(schema));
            modelBuilder.Configurations.Add(new VJobCandidateEmploymentConfiguration(schema));
            modelBuilder.Configurations.Add(new VProductAndDescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new VProductModelCatalogDescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new VProductModelInstructionConfiguration(schema));
            modelBuilder.Configurations.Add(new VSalesPersonConfiguration(schema));
            modelBuilder.Configurations.Add(new VSalesPersonSalesByFiscalYearConfiguration(schema));
            modelBuilder.Configurations.Add(new VStateProvinceCountryRegionConfiguration(schema));
            modelBuilder.Configurations.Add(new VStoreWithDemographicConfiguration(schema));
            modelBuilder.Configurations.Add(new VVendorConfiguration(schema));
            modelBuilder.Configurations.Add(new WorkOrderConfiguration(schema));
            modelBuilder.Configurations.Add(new WorkOrderRoutingConfiguration(schema));
            return modelBuilder;
        }
        
        // Stored Procedures
        public List<UspGetBillOfMaterialsReturnModel> UspGetBillOfMaterials(int? startProductId, DateTime? checkDate)
        {
            int procResult;
            return UspGetBillOfMaterials(startProductId, checkDate, out procResult);
        }

        public List<UspGetBillOfMaterialsReturnModel> UspGetBillOfMaterials(int? startProductId, DateTime? checkDate, out int procResult)
        {
            var startProductIdParam = new SqlParameter { ParameterName = "@StartProductID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = startProductId.GetValueOrDefault() };
            if (!startProductId.HasValue)
                startProductIdParam.Value = DBNull.Value;

            var checkDateParam = new SqlParameter { ParameterName = "@CheckDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = checkDate.GetValueOrDefault() };
            if (!checkDate.HasValue)
                checkDateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetBillOfMaterialsReturnModel>("EXEC @procResult = [dbo].[uspGetBillOfMaterials] @StartProductID, @CheckDate", startProductIdParam, checkDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public List<UspGetEmployeeManagersReturnModel> UspGetEmployeeManagers(int? employeeId)
        {
            int procResult;
            return UspGetEmployeeManagers(employeeId, out procResult);
        }

        public List<UspGetEmployeeManagersReturnModel> UspGetEmployeeManagers(int? employeeId, out int procResult)
        {
            var employeeIdParam = new SqlParameter { ParameterName = "@EmployeeID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = employeeId.GetValueOrDefault() };
            if (!employeeId.HasValue)
                employeeIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetEmployeeManagersReturnModel>("EXEC @procResult = [dbo].[uspGetEmployeeManagers] @EmployeeID", employeeIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public List<UspGetManagerEmployeesReturnModel> UspGetManagerEmployees(int? managerId)
        {
            int procResult;
            return UspGetManagerEmployees(managerId, out procResult);
        }

        public List<UspGetManagerEmployeesReturnModel> UspGetManagerEmployees(int? managerId, out int procResult)
        {
            var managerIdParam = new SqlParameter { ParameterName = "@ManagerID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = managerId.GetValueOrDefault() };
            if (!managerId.HasValue)
                managerIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetManagerEmployeesReturnModel>("EXEC @procResult = [dbo].[uspGetManagerEmployees] @ManagerID", managerIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public List<UspGetWhereUsedProductIdReturnModel> UspGetWhereUsedProductId(int? startProductId, DateTime? checkDate)
        {
            int procResult;
            return UspGetWhereUsedProductId(startProductId, checkDate, out procResult);
        }

        public List<UspGetWhereUsedProductIdReturnModel> UspGetWhereUsedProductId(int? startProductId, DateTime? checkDate, out int procResult)
        {
            var startProductIdParam = new SqlParameter { ParameterName = "@StartProductID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = startProductId.GetValueOrDefault() };
            if (!startProductId.HasValue)
                startProductIdParam.Value = DBNull.Value;

            var checkDateParam = new SqlParameter { ParameterName = "@CheckDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = checkDate.GetValueOrDefault() };
            if (!checkDate.HasValue)
                checkDateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetWhereUsedProductIdReturnModel>("EXEC @procResult = [dbo].[uspGetWhereUsedProductID] @StartProductID, @CheckDate", startProductIdParam, checkDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public int UspLogError(out int? errorLogId)
        {
            var errorLogIdParam = new SqlParameter { ParameterName = "@ErrorLogID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspLogError] @ErrorLogID OUTPUT", errorLogIdParam, procResultParam);
            if (IsSqlParameterNull(errorLogIdParam))
                errorLogId = null;
            else
                errorLogId = (int) errorLogIdParam.Value;
 
            return (int) procResultParam.Value;
        }

        public int UspPrintError()
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspPrintError] ", procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int UspUpdateEmployeeHireInfo(int? employeeId, string title, DateTime? hireDate, DateTime? rateChangeDate, decimal? rate, byte? payFrequency, bool? currentFlag)
        {
            var employeeIdParam = new SqlParameter { ParameterName = "@EmployeeID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = employeeId.GetValueOrDefault() };
            if (!employeeId.HasValue)
                employeeIdParam.Value = DBNull.Value;

            var titleParam = new SqlParameter { ParameterName = "@Title", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = title, Size = 50 };
            if (titleParam.Value == null)
                titleParam.Value = DBNull.Value;

            var hireDateParam = new SqlParameter { ParameterName = "@HireDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = hireDate.GetValueOrDefault() };
            if (!hireDate.HasValue)
                hireDateParam.Value = DBNull.Value;

            var rateChangeDateParam = new SqlParameter { ParameterName = "@RateChangeDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = rateChangeDate.GetValueOrDefault() };
            if (!rateChangeDate.HasValue)
                rateChangeDateParam.Value = DBNull.Value;

            var rateParam = new SqlParameter { ParameterName = "@Rate", SqlDbType = SqlDbType.Money, Direction = ParameterDirection.Input, Value = rate.GetValueOrDefault() };
            if (!rate.HasValue)
                rateParam.Value = DBNull.Value;

            var payFrequencyParam = new SqlParameter { ParameterName = "@PayFrequency", SqlDbType = SqlDbType.TinyInt, Direction = ParameterDirection.Input, Value = payFrequency.GetValueOrDefault() };
            if (!payFrequency.HasValue)
                payFrequencyParam.Value = DBNull.Value;

            var currentFlagParam = new SqlParameter { ParameterName = "@CurrentFlag", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = currentFlag.GetValueOrDefault() };
            if (!currentFlag.HasValue)
                currentFlagParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [HumanResources].[uspUpdateEmployeeHireInfo] @EmployeeID, @Title, @HireDate, @RateChangeDate, @Rate, @PayFrequency, @CurrentFlag", employeeIdParam, titleParam, hireDateParam, rateChangeDateParam, rateParam, payFrequencyParam, currentFlagParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int UspUpdateEmployeeLogin(int? employeeId, int? managerId, string loginId, string title, DateTime? hireDate, bool? currentFlag)
        {
            var employeeIdParam = new SqlParameter { ParameterName = "@EmployeeID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = employeeId.GetValueOrDefault() };
            if (!employeeId.HasValue)
                employeeIdParam.Value = DBNull.Value;

            var managerIdParam = new SqlParameter { ParameterName = "@ManagerID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = managerId.GetValueOrDefault() };
            if (!managerId.HasValue)
                managerIdParam.Value = DBNull.Value;

            var loginIdParam = new SqlParameter { ParameterName = "@LoginID", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = loginId, Size = 256 };
            if (loginIdParam.Value == null)
                loginIdParam.Value = DBNull.Value;

            var titleParam = new SqlParameter { ParameterName = "@Title", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = title, Size = 50 };
            if (titleParam.Value == null)
                titleParam.Value = DBNull.Value;

            var hireDateParam = new SqlParameter { ParameterName = "@HireDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = hireDate.GetValueOrDefault() };
            if (!hireDate.HasValue)
                hireDateParam.Value = DBNull.Value;

            var currentFlagParam = new SqlParameter { ParameterName = "@CurrentFlag", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = currentFlag.GetValueOrDefault() };
            if (!currentFlag.HasValue)
                currentFlagParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [HumanResources].[uspUpdateEmployeeLogin] @EmployeeID, @ManagerID, @LoginID, @Title, @HireDate, @CurrentFlag", employeeIdParam, managerIdParam, loginIdParam, titleParam, hireDateParam, currentFlagParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int UspUpdateEmployeePersonalInfo(int? employeeId, string nationalIdNumber, DateTime? birthDate, string maritalStatus, string gender)
        {
            var employeeIdParam = new SqlParameter { ParameterName = "@EmployeeID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = employeeId.GetValueOrDefault() };
            if (!employeeId.HasValue)
                employeeIdParam.Value = DBNull.Value;

            var nationalIdNumberParam = new SqlParameter { ParameterName = "@NationalIDNumber", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = nationalIdNumber, Size = 15 };
            if (nationalIdNumberParam.Value == null)
                nationalIdNumberParam.Value = DBNull.Value;

            var birthDateParam = new SqlParameter { ParameterName = "@BirthDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = birthDate.GetValueOrDefault() };
            if (!birthDate.HasValue)
                birthDateParam.Value = DBNull.Value;

            var maritalStatusParam = new SqlParameter { ParameterName = "@MaritalStatus", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = maritalStatus, Size = 1 };
            if (maritalStatusParam.Value == null)
                maritalStatusParam.Value = DBNull.Value;

            var genderParam = new SqlParameter { ParameterName = "@Gender", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = gender, Size = 1 };
            if (genderParam.Value == null)
                genderParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [HumanResources].[uspUpdateEmployeePersonalInfo] @EmployeeID, @NationalIDNumber, @BirthDate, @MaritalStatus, @Gender", employeeIdParam, nationalIdNumberParam, birthDateParam, maritalStatusParam, genderParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

    }

    // ************************************************************************
    // Fake Database context
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class FakeMyDbContext : IMyDbContext
    {
        public DbSet<Address> Addresses { get; set; }
        public DbSet<AddressType> AddressTypes { get; set; }
        public DbSet<AwBuildVersion> AwBuildVersions { get; set; }
        public DbSet<BillOfMaterial> BillOfMaterials { get; set; }
        public DbSet<Contact> Contacts { get; set; }
        public DbSet<ContactCreditCard> ContactCreditCards { get; set; }
        public DbSet<ContactType> ContactTypes { get; set; }
        public DbSet<CountryRegion> CountryRegions { get; set; }
        public DbSet<CountryRegionCurrency> CountryRegionCurrencies { get; set; }
        public DbSet<CreditCard> CreditCards { get; set; }
        public DbSet<Culture> Cultures { get; set; }
        public DbSet<Currency> Currencies { get; set; }
        public DbSet<CurrencyRate> CurrencyRates { get; set; }
        public DbSet<Customer> Customers { get; set; }
        public DbSet<CustomerAddress> CustomerAddresses { get; set; }
        public DbSet<DatabaseLog> DatabaseLogs { get; set; }
        public DbSet<Department> Departments { get; set; }
        public DbSet<Document> Documents { get; set; }
        public DbSet<Employee> Employees { get; set; }
        public DbSet<EmployeeAddress> EmployeeAddresses { get; set; }
        public DbSet<EmployeeDepartmentHistory> EmployeeDepartmentHistories { get; set; }
        public DbSet<EmployeePayHistory> EmployeePayHistories { get; set; }
        public DbSet<ErrorLog> ErrorLogs { get; set; }
        public DbSet<Illustration> Illustrations { get; set; }
        public DbSet<Individual> Individuals { get; set; }
        public DbSet<JobCandidate> JobCandidates { get; set; }
        public DbSet<Location> Locations { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<ProductCategory> ProductCategories { get; set; }
        public DbSet<ProductCostHistory> ProductCostHistories { get; set; }
        public DbSet<ProductDescription> ProductDescriptions { get; set; }
        public DbSet<ProductDocument> ProductDocuments { get; set; }
        public DbSet<ProductInventory> ProductInventories { get; set; }
        public DbSet<ProductListPriceHistory> ProductListPriceHistories { get; set; }
        public DbSet<ProductModel> ProductModels { get; set; }
        public DbSet<ProductModelIllustration> ProductModelIllustrations { get; set; }
        public DbSet<ProductModelProductDescriptionCulture> ProductModelProductDescriptionCultures { get; set; }
        public DbSet<ProductPhoto> ProductPhotoes { get; set; }
        public DbSet<ProductProductPhoto> ProductProductPhotoes { get; set; }
        public DbSet<ProductReview> ProductReviews { get; set; }
        public DbSet<ProductSubcategory> ProductSubcategories { get; set; }
        public DbSet<ProductVendor> ProductVendors { get; set; }
        public DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; }
        public DbSet<PurchaseOrderHeader> PurchaseOrderHeaders { get; set; }
        public DbSet<SalesOrderDetail> SalesOrderDetails { get; set; }
        public DbSet<SalesOrderHeader> SalesOrderHeaders { get; set; }
        public DbSet<SalesOrderHeaderSalesReason> SalesOrderHeaderSalesReasons { get; set; }
        public DbSet<SalesPerson> SalesPersons { get; set; }
        public DbSet<SalesPersonQuotaHistory> SalesPersonQuotaHistories { get; set; }
        public DbSet<SalesReason> SalesReasons { get; set; }
        public DbSet<SalesTaxRate> SalesTaxRates { get; set; }
        public DbSet<SalesTerritory> SalesTerritories { get; set; }
        public DbSet<SalesTerritoryHistory> SalesTerritoryHistories { get; set; }
        public DbSet<ScrapReason> ScrapReasons { get; set; }
        public DbSet<Shift> Shifts { get; set; }
        public DbSet<ShipMethod> ShipMethods { get; set; }
        public DbSet<ShoppingCartItem> ShoppingCartItems { get; set; }
        public DbSet<SpecialOffer> SpecialOffers { get; set; }
        public DbSet<SpecialOfferProduct> SpecialOfferProducts { get; set; }
        public DbSet<StateProvince> StateProvinces { get; set; }
        public DbSet<Store> Stores { get; set; }
        public DbSet<StoreContact> StoreContacts { get; set; }
        public DbSet<TransactionHistory> TransactionHistories { get; set; }
        public DbSet<TransactionHistoryArchive> TransactionHistoryArchives { get; set; }
        public DbSet<UnitMeasure> UnitMeasures { get; set; }
        public DbSet<VAdditionalContactInfo> VAdditionalContactInfoes { get; set; }
        public DbSet<VEmployee> VEmployees { get; set; }
        public DbSet<VEmployeeDepartment> VEmployeeDepartments { get; set; }
        public DbSet<VEmployeeDepartmentHistory> VEmployeeDepartmentHistories { get; set; }
        public DbSet<Vendor> Vendors { get; set; }
        public DbSet<VendorAddress> VendorAddresses { get; set; }
        public DbSet<VendorContact> VendorContacts { get; set; }
        public DbSet<VIndividualCustomer> VIndividualCustomers { get; set; }
        public DbSet<VIndividualDemographic> VIndividualDemographics { get; set; }
        public DbSet<VJobCandidate> VJobCandidates { get; set; }
        public DbSet<VJobCandidateEducation> VJobCandidateEducations { get; set; }
        public DbSet<VJobCandidateEmployment> VJobCandidateEmployments { get; set; }
        public DbSet<VProductAndDescription> VProductAndDescriptions { get; set; }
        public DbSet<VProductModelCatalogDescription> VProductModelCatalogDescriptions { get; set; }
        public DbSet<VProductModelInstruction> VProductModelInstructions { get; set; }
        public DbSet<VSalesPerson> VSalesPersons { get; set; }
        public DbSet<VSalesPersonSalesByFiscalYear> VSalesPersonSalesByFiscalYears { get; set; }
        public DbSet<VStateProvinceCountryRegion> VStateProvinceCountryRegions { get; set; }
        public DbSet<VStoreWithDemographic> VStoreWithDemographics { get; set; }
        public DbSet<VVendor> VVendors { get; set; }
        public DbSet<WorkOrder> WorkOrders { get; set; }
        public DbSet<WorkOrderRouting> WorkOrderRoutings { get; set; }

        public FakeMyDbContext()
        {
            Addresses = new FakeDbSet<Address>();
            AddressTypes = new FakeDbSet<AddressType>();
            AwBuildVersions = new FakeDbSet<AwBuildVersion>();
            BillOfMaterials = new FakeDbSet<BillOfMaterial>();
            Contacts = new FakeDbSet<Contact>();
            ContactCreditCards = new FakeDbSet<ContactCreditCard>();
            ContactTypes = new FakeDbSet<ContactType>();
            CountryRegions = new FakeDbSet<CountryRegion>();
            CountryRegionCurrencies = new FakeDbSet<CountryRegionCurrency>();
            CreditCards = new FakeDbSet<CreditCard>();
            Cultures = new FakeDbSet<Culture>();
            Currencies = new FakeDbSet<Currency>();
            CurrencyRates = new FakeDbSet<CurrencyRate>();
            Customers = new FakeDbSet<Customer>();
            CustomerAddresses = new FakeDbSet<CustomerAddress>();
            DatabaseLogs = new FakeDbSet<DatabaseLog>();
            Departments = new FakeDbSet<Department>();
            Documents = new FakeDbSet<Document>();
            Employees = new FakeDbSet<Employee>();
            EmployeeAddresses = new FakeDbSet<EmployeeAddress>();
            EmployeeDepartmentHistories = new FakeDbSet<EmployeeDepartmentHistory>();
            EmployeePayHistories = new FakeDbSet<EmployeePayHistory>();
            ErrorLogs = new FakeDbSet<ErrorLog>();
            Illustrations = new FakeDbSet<Illustration>();
            Individuals = new FakeDbSet<Individual>();
            JobCandidates = new FakeDbSet<JobCandidate>();
            Locations = new FakeDbSet<Location>();
            Products = new FakeDbSet<Product>();
            ProductCategories = new FakeDbSet<ProductCategory>();
            ProductCostHistories = new FakeDbSet<ProductCostHistory>();
            ProductDescriptions = new FakeDbSet<ProductDescription>();
            ProductDocuments = new FakeDbSet<ProductDocument>();
            ProductInventories = new FakeDbSet<ProductInventory>();
            ProductListPriceHistories = new FakeDbSet<ProductListPriceHistory>();
            ProductModels = new FakeDbSet<ProductModel>();
            ProductModelIllustrations = new FakeDbSet<ProductModelIllustration>();
            ProductModelProductDescriptionCultures = new FakeDbSet<ProductModelProductDescriptionCulture>();
            ProductPhotoes = new FakeDbSet<ProductPhoto>();
            ProductProductPhotoes = new FakeDbSet<ProductProductPhoto>();
            ProductReviews = new FakeDbSet<ProductReview>();
            ProductSubcategories = new FakeDbSet<ProductSubcategory>();
            ProductVendors = new FakeDbSet<ProductVendor>();
            PurchaseOrderDetails = new FakeDbSet<PurchaseOrderDetail>();
            PurchaseOrderHeaders = new FakeDbSet<PurchaseOrderHeader>();
            SalesOrderDetails = new FakeDbSet<SalesOrderDetail>();
            SalesOrderHeaders = new FakeDbSet<SalesOrderHeader>();
            SalesOrderHeaderSalesReasons = new FakeDbSet<SalesOrderHeaderSalesReason>();
            SalesPersons = new FakeDbSet<SalesPerson>();
            SalesPersonQuotaHistories = new FakeDbSet<SalesPersonQuotaHistory>();
            SalesReasons = new FakeDbSet<SalesReason>();
            SalesTaxRates = new FakeDbSet<SalesTaxRate>();
            SalesTerritories = new FakeDbSet<SalesTerritory>();
            SalesTerritoryHistories = new FakeDbSet<SalesTerritoryHistory>();
            ScrapReasons = new FakeDbSet<ScrapReason>();
            Shifts = new FakeDbSet<Shift>();
            ShipMethods = new FakeDbSet<ShipMethod>();
            ShoppingCartItems = new FakeDbSet<ShoppingCartItem>();
            SpecialOffers = new FakeDbSet<SpecialOffer>();
            SpecialOfferProducts = new FakeDbSet<SpecialOfferProduct>();
            StateProvinces = new FakeDbSet<StateProvince>();
            Stores = new FakeDbSet<Store>();
            StoreContacts = new FakeDbSet<StoreContact>();
            TransactionHistories = new FakeDbSet<TransactionHistory>();
            TransactionHistoryArchives = new FakeDbSet<TransactionHistoryArchive>();
            UnitMeasures = new FakeDbSet<UnitMeasure>();
            VAdditionalContactInfoes = new FakeDbSet<VAdditionalContactInfo>();
            VEmployees = new FakeDbSet<VEmployee>();
            VEmployeeDepartments = new FakeDbSet<VEmployeeDepartment>();
            VEmployeeDepartmentHistories = new FakeDbSet<VEmployeeDepartmentHistory>();
            Vendors = new FakeDbSet<Vendor>();
            VendorAddresses = new FakeDbSet<VendorAddress>();
            VendorContacts = new FakeDbSet<VendorContact>();
            VIndividualCustomers = new FakeDbSet<VIndividualCustomer>();
            VIndividualDemographics = new FakeDbSet<VIndividualDemographic>();
            VJobCandidates = new FakeDbSet<VJobCandidate>();
            VJobCandidateEducations = new FakeDbSet<VJobCandidateEducation>();
            VJobCandidateEmployments = new FakeDbSet<VJobCandidateEmployment>();
            VProductAndDescriptions = new FakeDbSet<VProductAndDescription>();
            VProductModelCatalogDescriptions = new FakeDbSet<VProductModelCatalogDescription>();
            VProductModelInstructions = new FakeDbSet<VProductModelInstruction>();
            VSalesPersons = new FakeDbSet<VSalesPerson>();
            VSalesPersonSalesByFiscalYears = new FakeDbSet<VSalesPersonSalesByFiscalYear>();
            VStateProvinceCountryRegions = new FakeDbSet<VStateProvinceCountryRegion>();
            VStoreWithDemographics = new FakeDbSet<VStoreWithDemographic>();
            VVendors = new FakeDbSet<VVendor>();
            WorkOrders = new FakeDbSet<WorkOrder>();
            WorkOrderRoutings = new FakeDbSet<WorkOrderRouting>();
        }
        
        public int SaveChangesCount { get; private set; } 
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }
        
        public void Dispose()
        {
            Dispose(true);
        }
        
        // Stored Procedures
        public List<UspGetBillOfMaterialsReturnModel> UspGetBillOfMaterials(int? startProductId, DateTime? checkDate)
        {
            int procResult;
            return UspGetBillOfMaterials(startProductId, checkDate, out procResult);
        }

        public List<UspGetBillOfMaterialsReturnModel> UspGetBillOfMaterials(int? startProductId, DateTime? checkDate, out int procResult)
        {

            procResult = 0;
            return new List<UspGetBillOfMaterialsReturnModel>();
        }

        public List<UspGetEmployeeManagersReturnModel> UspGetEmployeeManagers(int? employeeId)
        {
            int procResult;
            return UspGetEmployeeManagers(employeeId, out procResult);
        }

        public List<UspGetEmployeeManagersReturnModel> UspGetEmployeeManagers(int? employeeId, out int procResult)
        {

            procResult = 0;
            return new List<UspGetEmployeeManagersReturnModel>();
        }

        public List<UspGetManagerEmployeesReturnModel> UspGetManagerEmployees(int? managerId)
        {
            int procResult;
            return UspGetManagerEmployees(managerId, out procResult);
        }

        public List<UspGetManagerEmployeesReturnModel> UspGetManagerEmployees(int? managerId, out int procResult)
        {

            procResult = 0;
            return new List<UspGetManagerEmployeesReturnModel>();
        }

        public List<UspGetWhereUsedProductIdReturnModel> UspGetWhereUsedProductId(int? startProductId, DateTime? checkDate)
        {
            int procResult;
            return UspGetWhereUsedProductId(startProductId, checkDate, out procResult);
        }

        public List<UspGetWhereUsedProductIdReturnModel> UspGetWhereUsedProductId(int? startProductId, DateTime? checkDate, out int procResult)
        {

            procResult = 0;
            return new List<UspGetWhereUsedProductIdReturnModel>();
        }

        public int UspLogError(out int? errorLogId)
        {
            errorLogId = default(int);
 
            return 0;
        }

        public int UspPrintError()
        {
 
            return 0;
        }

        public int UspUpdateEmployeeHireInfo(int? employeeId, string title, DateTime? hireDate, DateTime? rateChangeDate, decimal? rate, byte? payFrequency, bool? currentFlag)
        {
 
            return 0;
        }

        public int UspUpdateEmployeeLogin(int? employeeId, int? managerId, string loginId, string title, DateTime? hireDate, bool? currentFlag)
        {
 
            return 0;
        }

        public int UspUpdateEmployeePersonalInfo(int? employeeId, string nationalIdNumber, DateTime? birthDate, string maritalStatus, string gender)
        {
 
            return 0;
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable, IEnumerable<TEntity>, IDbAsyncEnumerable<TEntity> 
        where TEntity : class 
    { 
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;
 
        public FakeDbSet() 
        { 
            _data = new ObservableCollection<TEntity>(); 
            _query = _data.AsQueryable(); 
        }

        public override IEnumerable<TEntity> AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }
        
        public override TEntity Add(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Remove(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Remove(item); 
            return item; 
        } 
 
        public override TEntity Attach(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Create() 
        { 
            return Activator.CreateInstance<TEntity>(); 
        } 
 
        public override TDerivedEntity Create<TDerivedEntity>() 
        { 
            return Activator.CreateInstance<TDerivedEntity>(); 
        } 
 
        public override ObservableCollection<TEntity> Local 
        { 
            get { return _data; } 
        } 
 
        Type IQueryable.ElementType 
        { 
            get { return _query.ElementType; } 
        } 
 
        Expression IQueryable.Expression 
        { 
            get { return _query.Expression; } 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); } 
        } 
 
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        IDbAsyncEnumerator<TEntity> IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator()); 
        }
    } 
 
    public class FakeDbAsyncQueryProvider<TEntity> : IDbAsyncQueryProvider 
    { 
        private readonly IQueryProvider _inner; 
 
        public FakeDbAsyncQueryProvider(IQueryProvider inner) 
        { 
            _inner = inner; 
        } 
 
        public IQueryable CreateQuery(Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TEntity>(expression); 
        } 
 
        public IQueryable<TElement> CreateQuery<TElement>(Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TElement>(expression); 
        } 
 
        public object Execute(Expression expression) 
        { 
            return _inner.Execute(expression); 
        } 
 
        public TResult Execute<TResult>(Expression expression) 
        { 
            return _inner.Execute<TResult>(expression); 
        } 
 
        public System.Threading.Tasks.Task<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute(expression)); 
        } 
 
        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression)); 
        } 
    } 
 
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IDbAsyncEnumerable<T>, IQueryable<T> 
    { 
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable) 
            : base(enumerable) 
        { } 
 
        public FakeDbAsyncEnumerable(Expression expression) 
            : base(expression) 
        { } 
 
        public IDbAsyncEnumerator<T> GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator()); 
        } 
 
        IDbAsyncEnumerator IDbAsyncEnumerable.GetAsyncEnumerator() 
        { 
            return GetAsyncEnumerator(); 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<T>(this); } 
        } 
    } 
 
    public class FakeDbAsyncEnumerator<T> : IDbAsyncEnumerator<T> 
    { 
        private readonly IEnumerator<T> _inner; 
 
        public FakeDbAsyncEnumerator(IEnumerator<T> inner) 
        { 
            _inner = inner; 
        } 
 
        public void Dispose() 
        { 
            _inner.Dispose(); 
        } 
 
        public System.Threading.Tasks.Task<bool> MoveNextAsync(CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext()); 
        } 
 
        public T Current 
        { 
            get { return _inner.Current; } 
        } 
 
        object IDbAsyncEnumerator.Current 
        { 
            get { return Current; } 
        } 
    }

    // ************************************************************************
    // POCO classes

    // Address
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class Address
    {
        public int AddressId { get; set; } // AddressID (Primary key). Primary key for Address records.
        public string AddressLine1 { get; set; } // AddressLine1. First street address line.
        public string AddressLine2 { get; set; } // AddressLine2. Second street address line.
        public string City { get; set; } // City. Name of the city.
        public int StateProvinceId { get; set; } // StateProvinceID. Unique identification number for the state or province. Foreign key to StateProvince table.
        public string PostalCode { get; set; } // PostalCode. Postal code for the street address.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<CustomerAddress> CustomerAddresses { get; set; } // Many to many mapping
        public virtual ICollection<EmployeeAddress> EmployeeAddresses { get; set; } // Many to many mapping
        public virtual ICollection<SalesOrderHeader> SalesOrderHeaders_BillToAddressId { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_Address_BillToAddressID
        public virtual ICollection<SalesOrderHeader> SalesOrderHeaders_ShipToAddressId { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_Address_ShipToAddressID
        public virtual ICollection<VendorAddress> VendorAddresses { get; set; } // Many to many mapping

        // Foreign keys
        public virtual StateProvince StateProvince { get; set; } // FK_Address_StateProvince_StateProvinceID
        
        public Address()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            CustomerAddresses = new List<CustomerAddress>();
            EmployeeAddresses = new List<EmployeeAddress>();
            SalesOrderHeaders_BillToAddressId = new List<SalesOrderHeader>();
            SalesOrderHeaders_ShipToAddressId = new List<SalesOrderHeader>();
            VendorAddresses = new List<VendorAddress>();
        }
    }

    // AddressType
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class AddressType
    {
        public int AddressTypeId { get; set; } // AddressTypeID (Primary key). Primary key for AddressType records.
        public string Name { get; set; } // Name. Address type description. For example, Billing, Home, or Shipping.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<CustomerAddress> CustomerAddresses { get; set; } // CustomerAddress.FK_CustomerAddress_AddressType_AddressTypeID
        public virtual ICollection<VendorAddress> VendorAddresses { get; set; } // VendorAddress.FK_VendorAddress_AddressType_AddressTypeID
        
        public AddressType()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            CustomerAddresses = new List<CustomerAddress>();
            VendorAddresses = new List<VendorAddress>();
        }
    }

    // AWBuildVersion
    public class AwBuildVersion
    {
        public byte SystemInformationId { get; set; } // SystemInformationID (Primary key). Primary key for AWBuildVersion records.
        public string DatabaseVersion { get; set; } // Database Version. Version number of the database in 9.yy.mm.dd.00 format.
        public DateTime VersionDate { get; set; } // VersionDate. Date and time the record was last updated.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.
        
        public AwBuildVersion()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // BillOfMaterials
    public class BillOfMaterial
    {
        public int BillOfMaterialsId { get; set; } // BillOfMaterialsID (Primary key). Primary key for BillOfMaterials records.
        public int? ProductAssemblyId { get; set; } // ProductAssemblyID. Parent product identification number. Foreign key to Product.ProductID.
        public int ComponentId { get; set; } // ComponentID. Component identification number. Foreign key to Product.ProductID.
        public DateTime StartDate { get; set; } // StartDate. Date the component started being used in the assembly item.
        public DateTime? EndDate { get; set; } // EndDate. Date the component stopped being used in the assembly item.
        public string UnitMeasureCode { get; set; } // UnitMeasureCode. Standard code identifying the unit of measure for the quantity.
        public short BomLevel { get; set; } // BOMLevel. Indicates the depth the component is from its parent (AssemblyID).
        public decimal PerAssemblyQty { get; set; } // PerAssemblyQty. Quantity of the component needed to create the assembly.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual Product Product_ComponentId { get; set; } // FK_BillOfMaterials_Product_ComponentID
        public virtual Product Product_ProductAssemblyId { get; set; } // FK_BillOfMaterials_Product_ProductAssemblyID
        public virtual UnitMeasure UnitMeasure { get; set; } // FK_BillOfMaterials_UnitMeasure_UnitMeasureCode
        
        public BillOfMaterial()
        {
            StartDate = System.DateTime.Now;
            PerAssemblyQty = 1.00m;
            ModifiedDate = System.DateTime.Now;
        }
    }

    // Contact
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class Contact
    {
        public int ContactId { get; set; } // ContactID (Primary key). Primary key for Contact records.
        public bool NameStyle { get; set; } // NameStyle. 0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order.
        public string Title { get; set; } // Title. A courtesy title. For example, Mr. or Ms.
        public string FirstName { get; set; } // FirstName. First name of the person.
        public string MiddleName { get; set; } // MiddleName. Middle name or middle initial of the person.
        public string LastName { get; set; } // LastName. Last name of the person.
        public string Suffix { get; set; } // Suffix. Surname suffix. For example, Sr. or Jr.
        public string EmailAddress { get; set; } // EmailAddress. E-mail address for the person.
        public int EmailPromotion { get; set; } // EmailPromotion. 0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners.
        public string Phone { get; set; } // Phone. Phone number associated with the person.
        public string PasswordHash { get; set; } // PasswordHash. Password for the e-mail account.
        public string PasswordSalt { get; set; } // PasswordSalt. Random value concatenated with the password string before the password is hashed.
        public string AdditionalContactInfo { get; set; } // AdditionalContactInfo. Additional contact information about the person stored in xml format.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<ContactCreditCard> ContactCreditCards { get; set; } // Many to many mapping
        public virtual ICollection<Employee> Employees { get; set; } // Employee.FK_Employee_Contact_ContactID
        public virtual ICollection<Individual> Individuals { get; set; } // Individual.FK_Individual_Contact_ContactID
        public virtual ICollection<SalesOrderHeader> SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_Contact_ContactID
        public virtual ICollection<StoreContact> StoreContacts { get; set; } // Many to many mapping
        public virtual ICollection<VendorContact> VendorContacts { get; set; } // Many to many mapping
        
        public Contact()
        {
            NameStyle = false;
            EmailPromotion = 0;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            ContactCreditCards = new List<ContactCreditCard>();
            Employees = new List<Employee>();
            Individuals = new List<Individual>();
            SalesOrderHeaders = new List<SalesOrderHeader>();
            StoreContacts = new List<StoreContact>();
            VendorContacts = new List<VendorContact>();
        }
    }

    // ContactCreditCard
    public class ContactCreditCard
    {
        public int ContactId { get; set; } // ContactID (Primary key). Customer identification number. Foreign key to Contact.ContactID.
        public int CreditCardId { get; set; } // CreditCardID (Primary key). Credit card identification number. Foreign key to CreditCard.CreditCardID.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual Contact Contact { get; set; } // FK_ContactCreditCard_Contact_ContactID
        public virtual CreditCard CreditCard { get; set; } // FK_ContactCreditCard_CreditCard_CreditCardID
        
        public ContactCreditCard()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ContactType
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class ContactType
    {
        public int ContactTypeId { get; set; } // ContactTypeID (Primary key). Primary key for ContactType records.
        public string Name { get; set; } // Name. Contact type description.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<StoreContact> StoreContacts { get; set; } // StoreContact.FK_StoreContact_ContactType_ContactTypeID
        public virtual ICollection<VendorContact> VendorContacts { get; set; } // VendorContact.FK_VendorContact_ContactType_ContactTypeID
        
        public ContactType()
        {
            ModifiedDate = System.DateTime.Now;
            StoreContacts = new List<StoreContact>();
            VendorContacts = new List<VendorContact>();
        }
    }

    // CountryRegion
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class CountryRegion
    {
        public string CountryRegionCode { get; set; } // CountryRegionCode (Primary key). ISO standard code for countries and regions.
        public string Name { get; set; } // Name. Country or region name.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<CountryRegionCurrency> CountryRegionCurrencies { get; set; } // Many to many mapping
        public virtual ICollection<StateProvince> StateProvinces { get; set; } // StateProvince.FK_StateProvince_CountryRegion_CountryRegionCode
        
        public CountryRegion()
        {
            ModifiedDate = System.DateTime.Now;
            CountryRegionCurrencies = new List<CountryRegionCurrency>();
            StateProvinces = new List<StateProvince>();
        }
    }

    // CountryRegionCurrency
    public class CountryRegionCurrency
    {
        public string CountryRegionCode { get; set; } // CountryRegionCode (Primary key). ISO code for countries and regions. Foreign key to CountryRegion.CountryRegionCode.
        public string CurrencyCode { get; set; } // CurrencyCode (Primary key). ISO standard currency code. Foreign key to Currency.CurrencyCode.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual CountryRegion CountryRegion { get; set; } // FK_CountryRegionCurrency_CountryRegion_CountryRegionCode
        public virtual Currency Currency { get; set; } // FK_CountryRegionCurrency_Currency_CurrencyCode
        
        public CountryRegionCurrency()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // CreditCard
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class CreditCard
    {
        public int CreditCardId { get; set; } // CreditCardID (Primary key). Primary key for CreditCard records.
        public string CardType { get; set; } // CardType. Credit card name.
        public string CardNumber { get; set; } // CardNumber. Credit card number.
        public byte ExpMonth { get; set; } // ExpMonth. Credit card expiration month.
        public short ExpYear { get; set; } // ExpYear. Credit card expiration year.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<ContactCreditCard> ContactCreditCards { get; set; } // Many to many mapping
        public virtual ICollection<SalesOrderHeader> SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_CreditCard_CreditCardID
        
        public CreditCard()
        {
            ModifiedDate = System.DateTime.Now;
            ContactCreditCards = new List<ContactCreditCard>();
            SalesOrderHeaders = new List<SalesOrderHeader>();
        }
    }

    // Culture
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class Culture
    {
        public string CultureId { get; set; } // CultureID (Primary key). Primary key for Culture records.
        public string Name { get; set; } // Name. Culture description.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<ProductModelProductDescriptionCulture> ProductModelProductDescriptionCultures { get; set; } // Many to many mapping
        
        public Culture()
        {
            ModifiedDate = System.DateTime.Now;
            ProductModelProductDescriptionCultures = new List<ProductModelProductDescriptionCulture>();
        }
    }

    // Currency
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class Currency
    {
        public string CurrencyCode { get; set; } // CurrencyCode (Primary key). The ISO code for the Currency.
        public string Name { get; set; } // Name. Currency name.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<CountryRegionCurrency> CountryRegionCurrencies { get; set; } // Many to many mapping
        public virtual ICollection<CurrencyRate> CurrencyRates_FromCurrencyCode { get; set; } // CurrencyRate.FK_CurrencyRate_Currency_FromCurrencyCode
        public virtual ICollection<CurrencyRate> CurrencyRates_ToCurrencyCode { get; set; } // CurrencyRate.FK_CurrencyRate_Currency_ToCurrencyCode
        
        public Currency()
        {
            ModifiedDate = System.DateTime.Now;
            CountryRegionCurrencies = new List<CountryRegionCurrency>();
            CurrencyRates_FromCurrencyCode = new List<CurrencyRate>();
            CurrencyRates_ToCurrencyCode = new List<CurrencyRate>();
        }
    }

    // CurrencyRate
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class CurrencyRate
    {
        public int CurrencyRateId { get; set; } // CurrencyRateID (Primary key). Primary key for CurrencyRate records.
        public DateTime CurrencyRateDate { get; set; } // CurrencyRateDate. Date and time the exchange rate was obtained.
        public string FromCurrencyCode { get; set; } // FromCurrencyCode. Exchange rate was converted from this currency code.
        public string ToCurrencyCode { get; set; } // ToCurrencyCode. Exchange rate was converted to this currency code.
        public decimal AverageRate { get; set; } // AverageRate. Average exchange rate for the day.
        public decimal EndOfDayRate { get; set; } // EndOfDayRate. Final exchange rate for the day.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<SalesOrderHeader> SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_CurrencyRate_CurrencyRateID

        // Foreign keys
        public virtual Currency Currency_FromCurrencyCode { get; set; } // FK_CurrencyRate_Currency_FromCurrencyCode
        public virtual Currency Currency_ToCurrencyCode { get; set; } // FK_CurrencyRate_Currency_ToCurrencyCode
        
        public CurrencyRate()
        {
            ModifiedDate = System.DateTime.Now;
            SalesOrderHeaders = new List<SalesOrderHeader>();
        }
    }

    // Customer
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class Customer
    {
        public int CustomerId { get; set; } // CustomerID (Primary key). Primary key for Customer records.
        public int? TerritoryId { get; set; } // TerritoryID. ID of the territory in which the customer is located. Foreign key to SalesTerritory.SalesTerritoryID.
        public string AccountNumber { get; set; } // AccountNumber. Unique number identifying the customer assigned by the accounting system.
        public string CustomerType { get; set; } // CustomerType. Customer type: I = Individual, S = Store
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<CustomerAddress> CustomerAddresses { get; set; } // Many to many mapping
        public virtual ICollection<SalesOrderHeader> SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_Customer_CustomerID
        public virtual Individual Individual { get; set; } // Individual.FK_Individual_Customer_CustomerID
        public virtual Store Store { get; set; } // Store.FK_Store_Customer_CustomerID

        // Foreign keys
        public virtual SalesTerritory SalesTerritory { get; set; } // FK_Customer_SalesTerritory_TerritoryID
        
        public Customer()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            CustomerAddresses = new List<CustomerAddress>();
            SalesOrderHeaders = new List<SalesOrderHeader>();
        }
    }

    // CustomerAddress
    public class CustomerAddress
    {
        public int CustomerId { get; set; } // CustomerID (Primary key). Primary key. Foreign key to Customer.CustomerID.
        public int AddressId { get; set; } // AddressID (Primary key). Primary key. Foreign key to Address.AddressID.
        public int AddressTypeId { get; set; } // AddressTypeID. Address type. Foreign key to AddressType.AddressTypeID.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual Address Address { get; set; } // FK_CustomerAddress_Address_AddressID
        public virtual AddressType AddressType { get; set; } // FK_CustomerAddress_AddressType_AddressTypeID
        public virtual Customer Customer { get; set; } // FK_CustomerAddress_Customer_CustomerID
        
        public CustomerAddress()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // DatabaseLog
    public class DatabaseLog
    {
        public int DatabaseLogId { get; set; } // DatabaseLogID (Primary key). Primary key for DatabaseLog records.
        public DateTime PostTime { get; set; } // PostTime. The date and time the DDL change occurred.
        public string DatabaseUser { get; set; } // DatabaseUser. The user who implemented the DDL change.
        public string Event { get; set; } // Event. The type of DDL statement that was executed.
        public string Schema { get; set; } // Schema. The schema to which the changed object belongs.
        public string Object { get; set; } // Object. The object that was changed by the DDL statment.
        public string Tsql { get; set; } // TSQL. The exact Transact-SQL statement that was executed.
        public string XmlEvent { get; set; } // XmlEvent. The raw XML data generated by database trigger.
    }

    // Department
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class Department
    {
        public short DepartmentId { get; set; } // DepartmentID (Primary key). Primary key for Department records.
        public string Name { get; set; } // Name. Name of the department.
        public string GroupName { get; set; } // GroupName. Name of the group to which the department belongs.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<EmployeeDepartmentHistory> EmployeeDepartmentHistories { get; set; } // Many to many mapping
        
        public Department()
        {
            ModifiedDate = System.DateTime.Now;
            EmployeeDepartmentHistories = new List<EmployeeDepartmentHistory>();
        }
    }

    // Document
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class Document
    {
        public int DocumentId { get; set; } // DocumentID (Primary key). Primary key for Document records.
        public string Title { get; set; } // Title. Title of the document.
        public string FileName { get; set; } // FileName. Directory path and file name of the document
        public string FileExtension { get; set; } // FileExtension. File extension indicating the document type. For example, .doc or .txt.
        public string Revision { get; set; } // Revision. Revision number of the document.
        public int ChangeNumber { get; set; } // ChangeNumber. Engineering change approval number.
        public byte Status { get; set; } // Status. 1 = Pending approval, 2 = Approved, 3 = Obsolete
        public string DocumentSummary { get; set; } // DocumentSummary. Document abstract.
        public byte[] Document_ { get; set; } // Document. Complete document.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<ProductDocument> ProductDocuments { get; set; } // Many to many mapping
        
        public Document()
        {
            ChangeNumber = 0;
            ModifiedDate = System.DateTime.Now;
            ProductDocuments = new List<ProductDocument>();
        }
    }

    // Employee
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class Employee
    {
        public int EmployeeId { get; set; } // EmployeeID (Primary key). Primary key for Employee records.
        public string NationalIdNumber { get; set; } // NationalIDNumber. Unique national identification number such as a social security number.
        public int ContactId { get; set; } // ContactID. Identifies the employee in the Contact table. Foreign key to Contact.ContactID.
        public string LoginId { get; set; } // LoginID. Network login.
        public int? ManagerId { get; set; } // ManagerID. Manager to whom the employee is assigned. Foreign Key to Employee.M
        public string Title { get; set; } // Title. Work title such as Buyer or Sales Representative.
        public DateTime BirthDate { get; set; } // BirthDate. Date of birth.
        public string MaritalStatus { get; set; } // MaritalStatus. M = Married, S = Single
        public string Gender { get; set; } // Gender. M = Male, F = Female
        public DateTime HireDate { get; set; } // HireDate. Employee hired on this date.
        public bool SalariedFlag { get; set; } // SalariedFlag. Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.
        public short VacationHours { get; set; } // VacationHours. Number of available vacation hours.
        public short SickLeaveHours { get; set; } // SickLeaveHours. Number of available sick leave hours.
        public bool CurrentFlag { get; set; } // CurrentFlag. 0 = Inactive, 1 = Active
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<Employee> Employees { get; set; } // Employee.FK_Employee_Employee_ManagerID
        public virtual ICollection<EmployeeAddress> EmployeeAddresses { get; set; } // Many to many mapping
        public virtual ICollection<EmployeeDepartmentHistory> EmployeeDepartmentHistories { get; set; } // Many to many mapping
        public virtual ICollection<EmployeePayHistory> EmployeePayHistories { get; set; } // Many to many mapping
        public virtual ICollection<JobCandidate> JobCandidates { get; set; } // JobCandidate.FK_JobCandidate_Employee_EmployeeID
        public virtual ICollection<PurchaseOrderHeader> PurchaseOrderHeaders { get; set; } // PurchaseOrderHeader.FK_PurchaseOrderHeader_Employee_EmployeeID
        public virtual SalesPerson SalesPerson { get; set; } // SalesPerson.FK_SalesPerson_Employee_SalesPersonID

        // Foreign keys
        public virtual Contact Contact { get; set; } // FK_Employee_Contact_ContactID
        public virtual Employee Employee_ManagerId { get; set; } // FK_Employee_Employee_ManagerID
        
        public Employee()
        {
            SalariedFlag = true;
            VacationHours = 0;
            SickLeaveHours = 0;
            CurrentFlag = true;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Employees = new List<Employee>();
            EmployeeAddresses = new List<EmployeeAddress>();
            EmployeeDepartmentHistories = new List<EmployeeDepartmentHistory>();
            EmployeePayHistories = new List<EmployeePayHistory>();
            JobCandidates = new List<JobCandidate>();
            PurchaseOrderHeaders = new List<PurchaseOrderHeader>();
        }
    }

    // EmployeeAddress
    public class EmployeeAddress
    {
        public int EmployeeId { get; set; } // EmployeeID (Primary key). Primary key. Foreign key to Employee.EmployeeID.
        public int AddressId { get; set; } // AddressID (Primary key). Primary key. Foreign key to Address.AddressID.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual Address Address { get; set; } // FK_EmployeeAddress_Address_AddressID
        public virtual Employee Employee { get; set; } // FK_EmployeeAddress_Employee_EmployeeID
        
        public EmployeeAddress()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // EmployeeDepartmentHistory
    public class EmployeeDepartmentHistory
    {
        public int EmployeeId { get; set; } // EmployeeID (Primary key). Employee identification number. Foreign key to Employee.EmployeeID.
        public short DepartmentId { get; set; } // DepartmentID (Primary key). Department in which the employee worked including currently. Foreign key to Department.DepartmentID.
        public byte ShiftId { get; set; } // ShiftID (Primary key). Identifies which 8-hour shift the employee works. Foreign key to Shift.Shift.ID.
        public DateTime StartDate { get; set; } // StartDate (Primary key). Date the employee started work in the department.
        public DateTime? EndDate { get; set; } // EndDate. Date the employee left the department. NULL = Current department.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual Department Department { get; set; } // FK_EmployeeDepartmentHistory_Department_DepartmentID
        public virtual Employee Employee { get; set; } // FK_EmployeeDepartmentHistory_Employee_EmployeeID
        public virtual Shift Shift { get; set; } // FK_EmployeeDepartmentHistory_Shift_ShiftID
        
        public EmployeeDepartmentHistory()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // EmployeePayHistory
    public class EmployeePayHistory
    {
        public int EmployeeId { get; set; } // EmployeeID (Primary key). Employee identification number. Foreign key to Employee.EmployeeID.
        public DateTime RateChangeDate { get; set; } // RateChangeDate (Primary key). Date the change in pay is effective
        public decimal Rate { get; set; } // Rate. Salary hourly rate.
        public byte PayFrequency { get; set; } // PayFrequency. 1 = Salary received monthly, 2 = Salary received biweekly
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual Employee Employee { get; set; } // FK_EmployeePayHistory_Employee_EmployeeID
        
        public EmployeePayHistory()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ErrorLog
    public class ErrorLog
    {
        public int ErrorLogId { get; set; } // ErrorLogID (Primary key). Primary key for ErrorLog records.
        public DateTime ErrorTime { get; set; } // ErrorTime. The date and time at which the error occurred.
        public string UserName { get; set; } // UserName. The user who executed the batch in which the error occurred.
        public int ErrorNumber { get; set; } // ErrorNumber. The error number of the error that occurred.
        public int? ErrorSeverity { get; set; } // ErrorSeverity. The severity of the error that occurred.
        public int? ErrorState { get; set; } // ErrorState. The state number of the error that occurred.
        public string ErrorProcedure { get; set; } // ErrorProcedure. The name of the stored procedure or trigger where the error occurred.
        public int? ErrorLine { get; set; } // ErrorLine. The line number at which the error occurred.
        public string ErrorMessage { get; set; } // ErrorMessage. The message text of the error that occurred.
        
        public ErrorLog()
        {
            ErrorTime = System.DateTime.Now;
        }
    }

    // Illustration
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class Illustration
    {
        public int IllustrationId { get; set; } // IllustrationID (Primary key). Primary key for Illustration records.
        public string Diagram { get; set; } // Diagram. Illustrations used in manufacturing instructions. Stored as XML.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<ProductModelIllustration> ProductModelIllustrations { get; set; } // Many to many mapping
        
        public Illustration()
        {
            ModifiedDate = System.DateTime.Now;
            ProductModelIllustrations = new List<ProductModelIllustration>();
        }
    }

    // Individual
    public class Individual
    {
        public int CustomerId { get; set; } // CustomerID (Primary key). Unique customer identification number. Foreign key to Customer.CustomerID.
        public int ContactId { get; set; } // ContactID. Identifies the customer in the Contact table. Foreign key to Contact.ContactID.
        public string Demographics { get; set; } // Demographics. Personal information such as hobbies, and income collected from online shoppers. Used for sales analysis.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual Contact Contact { get; set; } // FK_Individual_Contact_ContactID
        public virtual Customer Customer { get; set; } // FK_Individual_Customer_CustomerID
        
        public Individual()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // JobCandidate
    public class JobCandidate
    {
        public int JobCandidateId { get; set; } // JobCandidateID (Primary key). Primary key for JobCandidate records.
        public int? EmployeeId { get; set; } // EmployeeID. Employee identification number if applicant was hired. Foreign key to Employee.EmployeeID.
        public string Resume { get; set; } // Resume. Résumé in XML format.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual Employee Employee { get; set; } // FK_JobCandidate_Employee_EmployeeID
        
        public JobCandidate()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // Location
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class Location
    {
        public short LocationId { get; set; } // LocationID (Primary key). Primary key for Location records.
        public string Name { get; set; } // Name. Location description.
        public decimal CostRate { get; set; } // CostRate. Standard hourly cost of the manufacturing location.
        public decimal Availability { get; set; } // Availability. Work capacity (in hours) of the manufacturing location.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<ProductInventory> ProductInventories { get; set; } // Many to many mapping
        public virtual ICollection<WorkOrderRouting> WorkOrderRoutings { get; set; } // WorkOrderRouting.FK_WorkOrderRouting_Location_LocationID
        
        public Location()
        {
            CostRate = 0.00m;
            Availability = 0.00m;
            ModifiedDate = System.DateTime.Now;
            ProductInventories = new List<ProductInventory>();
            WorkOrderRoutings = new List<WorkOrderRouting>();
        }
    }

    // Product
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class Product
    {
        public int ProductId { get; set; } // ProductID (Primary key). Primary key for Product records.
        public string Name { get; set; } // Name. Name of the product.
        public string ProductNumber { get; set; } // ProductNumber. Unique product identification number.
        public bool MakeFlag { get; set; } // MakeFlag. 0 = Product is purchased, 1 = Product is manufactured in-house.
        public bool FinishedGoodsFlag { get; set; } // FinishedGoodsFlag. 0 = Product is not a salable item. 1 = Product is salable.
        public string Color { get; set; } // Color. Product color.
        public short SafetyStockLevel { get; set; } // SafetyStockLevel. Minimum inventory quantity.
        public short ReorderPoint { get; set; } // ReorderPoint. Inventory level that triggers a purchase order or work order.
        public decimal StandardCost { get; set; } // StandardCost. Standard cost of the product.
        public decimal ListPrice { get; set; } // ListPrice. Selling price.
        public string Size { get; set; } // Size. Product size.
        public string SizeUnitMeasureCode { get; set; } // SizeUnitMeasureCode. Unit of measure for Size column.
        public string WeightUnitMeasureCode { get; set; } // WeightUnitMeasureCode. Unit of measure for Weight column.
        public decimal? Weight { get; set; } // Weight. Product weight.
        public int DaysToManufacture { get; set; } // DaysToManufacture. Number of days required to manufacture the product.
        public string ProductLine { get; set; } // ProductLine. R = Road, M = Mountain, T = Touring, S = Standard
        public string Class { get; set; } // Class. H = High, M = Medium, L = Low
        public string Style { get; set; } // Style. W = Womens, M = Mens, U = Universal
        public int? ProductSubcategoryId { get; set; } // ProductSubcategoryID. Product is a member of this product subcategory. Foreign key to ProductSubCategory.ProductSubCategoryID.
        public int? ProductModelId { get; set; } // ProductModelID. Product is a member of this product model. Foreign key to ProductModel.ProductModelID.
        public DateTime SellStartDate { get; set; } // SellStartDate. Date the product was available for sale.
        public DateTime? SellEndDate { get; set; } // SellEndDate. Date the product was no longer available for sale.
        public DateTime? DiscontinuedDate { get; set; } // DiscontinuedDate. Date the product was discontinued.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<BillOfMaterial> BillOfMaterials_ComponentId { get; set; } // BillOfMaterials.FK_BillOfMaterials_Product_ComponentID
        public virtual ICollection<BillOfMaterial> BillOfMaterials_ProductAssemblyId { get; set; } // BillOfMaterials.FK_BillOfMaterials_Product_ProductAssemblyID
        public virtual ICollection<ProductCostHistory> ProductCostHistories { get; set; } // Many to many mapping
        public virtual ICollection<ProductDocument> ProductDocuments { get; set; } // Many to many mapping
        public virtual ICollection<ProductInventory> ProductInventories { get; set; } // Many to many mapping
        public virtual ICollection<ProductListPriceHistory> ProductListPriceHistories { get; set; } // Many to many mapping
        public virtual ICollection<ProductProductPhoto> ProductProductPhotoes { get; set; } // Many to many mapping
        public virtual ICollection<ProductReview> ProductReviews { get; set; } // ProductReview.FK_ProductReview_Product_ProductID
        public virtual ICollection<ProductVendor> ProductVendors { get; set; } // Many to many mapping
        public virtual ICollection<PurchaseOrderDetail> PurchaseOrderDetails { get; set; } // PurchaseOrderDetail.FK_PurchaseOrderDetail_Product_ProductID
        public virtual ICollection<ShoppingCartItem> ShoppingCartItems { get; set; } // ShoppingCartItem.FK_ShoppingCartItem_Product_ProductID
        public virtual ICollection<SpecialOfferProduct> SpecialOfferProducts { get; set; } // Many to many mapping
        public virtual ICollection<TransactionHistory> TransactionHistories { get; set; } // TransactionHistory.FK_TransactionHistory_Product_ProductID
        public virtual ICollection<WorkOrder> WorkOrders { get; set; } // WorkOrder.FK_WorkOrder_Product_ProductID

        // Foreign keys
        public virtual ProductModel ProductModel { get; set; } // FK_Product_ProductModel_ProductModelID
        public virtual ProductSubcategory ProductSubcategory { get; set; } // FK_Product_ProductSubcategory_ProductSubcategoryID
        public virtual UnitMeasure UnitMeasure_SizeUnitMeasureCode { get; set; } // FK_Product_UnitMeasure_SizeUnitMeasureCode
        public virtual UnitMeasure UnitMeasure_WeightUnitMeasureCode { get; set; } // FK_Product_UnitMeasure_WeightUnitMeasureCode
        
        public Product()
        {
            MakeFlag = true;
            FinishedGoodsFlag = true;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            BillOfMaterials_ComponentId = new List<BillOfMaterial>();
            BillOfMaterials_ProductAssemblyId = new List<BillOfMaterial>();
            ProductCostHistories = new List<ProductCostHistory>();
            ProductDocuments = new List<ProductDocument>();
            ProductInventories = new List<ProductInventory>();
            ProductListPriceHistories = new List<ProductListPriceHistory>();
            ProductProductPhotoes = new List<ProductProductPhoto>();
            ProductReviews = new List<ProductReview>();
            ProductVendors = new List<ProductVendor>();
            PurchaseOrderDetails = new List<PurchaseOrderDetail>();
            ShoppingCartItems = new List<ShoppingCartItem>();
            SpecialOfferProducts = new List<SpecialOfferProduct>();
            TransactionHistories = new List<TransactionHistory>();
            WorkOrders = new List<WorkOrder>();
        }
    }

    // ProductCategory
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class ProductCategory
    {
        public int ProductCategoryId { get; set; } // ProductCategoryID (Primary key). Primary key for ProductCategory records.
        public string Name { get; set; } // Name. Category description.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<ProductSubcategory> ProductSubcategories { get; set; } // ProductSubcategory.FK_ProductSubcategory_ProductCategory_ProductCategoryID
        
        public ProductCategory()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            ProductSubcategories = new List<ProductSubcategory>();
        }
    }

    // ProductCostHistory
    public class ProductCostHistory
    {
        public int ProductId { get; set; } // ProductID (Primary key). Product identification number. Foreign key to Product.ProductID
        public DateTime StartDate { get; set; } // StartDate (Primary key). Product cost start date.
        public DateTime? EndDate { get; set; } // EndDate. Product cost end date.
        public decimal StandardCost { get; set; } // StandardCost. Standard cost of the product.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual Product Product { get; set; } // FK_ProductCostHistory_Product_ProductID
        
        public ProductCostHistory()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ProductDescription
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class ProductDescription
    {
        public int ProductDescriptionId { get; set; } // ProductDescriptionID (Primary key). Primary key for ProductDescription records.
        public string Description { get; set; } // Description. Description of the product.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<ProductModelProductDescriptionCulture> ProductModelProductDescriptionCultures { get; set; } // Many to many mapping
        
        public ProductDescription()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            ProductModelProductDescriptionCultures = new List<ProductModelProductDescriptionCulture>();
        }
    }

    // ProductDocument
    public class ProductDocument
    {
        public int ProductId { get; set; } // ProductID (Primary key). Product identification number. Foreign key to Product.ProductID.
        public int DocumentId { get; set; } // DocumentID (Primary key). Document identification number. Foreign key to Document.DocumentID.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual Document Document { get; set; } // FK_ProductDocument_Document_DocumentID
        public virtual Product Product { get; set; } // FK_ProductDocument_Product_ProductID
        
        public ProductDocument()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ProductInventory
    public class ProductInventory
    {
        public int ProductId { get; set; } // ProductID (Primary key). Product identification number. Foreign key to Product.ProductID.
        public short LocationId { get; set; } // LocationID (Primary key). Inventory location identification number. Foreign key to Location.LocationID.
        public string Shelf { get; set; } // Shelf. Storage compartment within an inventory location.
        public byte Bin { get; set; } // Bin. Storage container on a shelf in an inventory location.
        public short Quantity { get; set; } // Quantity. Quantity of products in the inventory location.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual Location Location { get; set; } // FK_ProductInventory_Location_LocationID
        public virtual Product Product { get; set; } // FK_ProductInventory_Product_ProductID
        
        public ProductInventory()
        {
            Quantity = 0;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ProductListPriceHistory
    public class ProductListPriceHistory
    {
        public int ProductId { get; set; } // ProductID (Primary key). Product identification number. Foreign key to Product.ProductID
        public DateTime StartDate { get; set; } // StartDate (Primary key). List price start date.
        public DateTime? EndDate { get; set; } // EndDate. List price end date
        public decimal ListPrice { get; set; } // ListPrice. Product list price.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual Product Product { get; set; } // FK_ProductListPriceHistory_Product_ProductID
        
        public ProductListPriceHistory()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ProductModel
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class ProductModel
    {
        public int ProductModelId { get; set; } // ProductModelID (Primary key). Primary key for ProductModel records.
        public string Name { get; set; } // Name. Product model description.
        public string CatalogDescription { get; set; } // CatalogDescription. Detailed product catalog information in xml format.
        public string Instructions { get; set; } // Instructions. Manufacturing instructions in xml format.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<Product> Products { get; set; } // Product.FK_Product_ProductModel_ProductModelID
        public virtual ICollection<ProductModelIllustration> ProductModelIllustrations { get; set; } // Many to many mapping
        public virtual ICollection<ProductModelProductDescriptionCulture> ProductModelProductDescriptionCultures { get; set; } // Many to many mapping
        
        public ProductModel()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Products = new List<Product>();
            ProductModelIllustrations = new List<ProductModelIllustration>();
            ProductModelProductDescriptionCultures = new List<ProductModelProductDescriptionCulture>();
        }
    }

    // ProductModelIllustration
    public class ProductModelIllustration
    {
        public int ProductModelId { get; set; } // ProductModelID (Primary key). Primary key. Foreign key to ProductModel.ProductModelID.
        public int IllustrationId { get; set; } // IllustrationID (Primary key). Primary key. Foreign key to Illustration.IllustrationID.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual Illustration Illustration { get; set; } // FK_ProductModelIllustration_Illustration_IllustrationID
        public virtual ProductModel ProductModel { get; set; } // FK_ProductModelIllustration_ProductModel_ProductModelID
        
        public ProductModelIllustration()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ProductModelProductDescriptionCulture
    public class ProductModelProductDescriptionCulture
    {
        public int ProductModelId { get; set; } // ProductModelID (Primary key). Primary key. Foreign key to ProductModel.ProductModelID.
        public int ProductDescriptionId { get; set; } // ProductDescriptionID (Primary key). Primary key. Foreign key to ProductDescription.ProductDescriptionID.
        public string CultureId { get; set; } // CultureID (Primary key). Culture identification number. Foreign key to Culture.CultureID.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual Culture Culture { get; set; } // FK_ProductModelProductDescriptionCulture_Culture_CultureID
        public virtual ProductDescription ProductDescription { get; set; } // FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID
        public virtual ProductModel ProductModel { get; set; } // FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID
        
        public ProductModelProductDescriptionCulture()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ProductPhoto
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class ProductPhoto
    {
        public int ProductPhotoId { get; set; } // ProductPhotoID (Primary key). Primary key for ProductPhoto records.
        public byte[] ThumbNailPhoto { get; set; } // ThumbNailPhoto. Small image of the product.
        public string ThumbnailPhotoFileName { get; set; } // ThumbnailPhotoFileName. Small image file name.
        public byte[] LargePhoto { get; set; } // LargePhoto. Large image of the product.
        public string LargePhotoFileName { get; set; } // LargePhotoFileName. Large image file name.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<ProductProductPhoto> ProductProductPhotoes { get; set; } // Many to many mapping
        
        public ProductPhoto()
        {
            ModifiedDate = System.DateTime.Now;
            ProductProductPhotoes = new List<ProductProductPhoto>();
        }
    }

    // ProductProductPhoto
    public class ProductProductPhoto
    {
        public int ProductId { get; set; } // ProductID (Primary key). Product identification number. Foreign key to Product.ProductID.
        public int ProductPhotoId { get; set; } // ProductPhotoID (Primary key). Product photo identification number. Foreign key to ProductPhoto.ProductPhotoID.
        public bool Primary { get; set; } // Primary. 0 = Photo is not the principal image. 1 = Photo is the principal image.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual Product Product { get; set; } // FK_ProductProductPhoto_Product_ProductID
        public virtual ProductPhoto ProductPhoto { get; set; } // FK_ProductProductPhoto_ProductPhoto_ProductPhotoID
        
        public ProductProductPhoto()
        {
            Primary = false;
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ProductReview
    public class ProductReview
    {
        public int ProductReviewId { get; set; } // ProductReviewID (Primary key). Primary key for ProductReview records.
        public int ProductId { get; set; } // ProductID. Product identification number. Foreign key to Product.ProductID.
        public string ReviewerName { get; set; } // ReviewerName. Name of the reviewer.
        public DateTime ReviewDate { get; set; } // ReviewDate. Date review was submitted.
        public string EmailAddress { get; set; } // EmailAddress. Reviewer's e-mail address.
        public int Rating { get; set; } // Rating. Product rating given by the reviewer. Scale is 1 to 5 with 5 as the highest rating.
        public string Comments { get; set; } // Comments. Reviewer's comments
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual Product Product { get; set; } // FK_ProductReview_Product_ProductID
        
        public ProductReview()
        {
            ReviewDate = System.DateTime.Now;
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ProductSubcategory
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class ProductSubcategory
    {
        public int ProductSubcategoryId { get; set; } // ProductSubcategoryID (Primary key). Primary key for ProductSubcategory records.
        public int ProductCategoryId { get; set; } // ProductCategoryID. Product category identification number. Foreign key to ProductCategory.ProductCategoryID.
        public string Name { get; set; } // Name. Subcategory description.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<Product> Products { get; set; } // Product.FK_Product_ProductSubcategory_ProductSubcategoryID

        // Foreign keys
        public virtual ProductCategory ProductCategory { get; set; } // FK_ProductSubcategory_ProductCategory_ProductCategoryID
        
        public ProductSubcategory()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Products = new List<Product>();
        }
    }

    // ProductVendor
    public class ProductVendor
    {
        public int ProductId { get; set; } // ProductID (Primary key). Primary key. Foreign key to Product.ProductID.
        public int VendorId { get; set; } // VendorID (Primary key). Primary key. Foreign key to Vendor.VendorID.
        public int AverageLeadTime { get; set; } // AverageLeadTime. The average span of time (in days) between placing an order with the vendor and receiving the purchased product.
        public decimal StandardPrice { get; set; } // StandardPrice. The vendor's usual selling price.
        public decimal? LastReceiptCost { get; set; } // LastReceiptCost. The selling price when last purchased.
        public DateTime? LastReceiptDate { get; set; } // LastReceiptDate. Date the product was last received by the vendor.
        public int MinOrderQty { get; set; } // MinOrderQty. The maximum quantity that should be ordered.
        public int MaxOrderQty { get; set; } // MaxOrderQty. The minimum quantity that should be ordered.
        public int? OnOrderQty { get; set; } // OnOrderQty. The quantity currently on order.
        public string UnitMeasureCode { get; set; } // UnitMeasureCode. The product's unit of measure.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual Product Product { get; set; } // FK_ProductVendor_Product_ProductID
        public virtual UnitMeasure UnitMeasure { get; set; } // FK_ProductVendor_UnitMeasure_UnitMeasureCode
        public virtual Vendor Vendor { get; set; } // FK_ProductVendor_Vendor_VendorID
        
        public ProductVendor()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // PurchaseOrderDetail
    public class PurchaseOrderDetail
    {
        public int PurchaseOrderId { get; set; } // PurchaseOrderID (Primary key). Primary key. Foreign key to PurchaseOrderHeader.PurchaseOrderID.
        public int PurchaseOrderDetailId { get; set; } // PurchaseOrderDetailID (Primary key). Primary key. One line number per purchased product.
        public DateTime DueDate { get; set; } // DueDate. Date the product is expected to be received.
        public short OrderQty { get; set; } // OrderQty. Quantity ordered.
        public int ProductId { get; set; } // ProductID. Product identification number. Foreign key to Product.ProductID.
        public decimal UnitPrice { get; set; } // UnitPrice. Vendor's selling price of a single product.
        public decimal LineTotal { get; set; } // LineTotal. Per product subtotal. Computed as OrderQty * UnitPrice.
        public decimal ReceivedQty { get; set; } // ReceivedQty. Quantity actually received from the vendor.
        public decimal RejectedQty { get; set; } // RejectedQty. Quantity rejected during inspection.
        public decimal StockedQty { get; set; } // StockedQty. Quantity accepted into inventory. Computed as ReceivedQty - RejectedQty.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual Product Product { get; set; } // FK_PurchaseOrderDetail_Product_ProductID
        public virtual PurchaseOrderHeader PurchaseOrderHeader { get; set; } // FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID
        
        public PurchaseOrderDetail()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // PurchaseOrderHeader
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class PurchaseOrderHeader
    {
        public int PurchaseOrderId { get; set; } // PurchaseOrderID (Primary key). Primary key.
        public byte RevisionNumber { get; set; } // RevisionNumber. Incremental number to track changes to the purchase order over time.
        public byte Status { get; set; } // Status. Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete
        public int EmployeeId { get; set; } // EmployeeID. Employee who created the purchase order. Foreign key to Employee.EmployeeID.
        public int VendorId { get; set; } // VendorID. Vendor with whom the purchase order is placed. Foreign key to Vendor.VendorID.
        public int ShipMethodId { get; set; } // ShipMethodID. Shipping method. Foreign key to ShipMethod.ShipMethodID.
        public DateTime OrderDate { get; set; } // OrderDate. Purchase order creation date.
        public DateTime? ShipDate { get; set; } // ShipDate. Estimated shipment date from the vendor.
        public decimal SubTotal { get; set; } // SubTotal. Purchase order subtotal. Computed as SUM(PurchaseOrderDetail.LineTotal)for the appropriate PurchaseOrderID.
        public decimal TaxAmt { get; set; } // TaxAmt. Tax amount.
        public decimal Freight { get; set; } // Freight. Shipping cost.
        public decimal TotalDue { get; set; } // TotalDue. Total due to vendor. Computed as Subtotal + TaxAmt + Freight.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<PurchaseOrderDetail> PurchaseOrderDetails { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Employee Employee { get; set; } // FK_PurchaseOrderHeader_Employee_EmployeeID
        public virtual ShipMethod ShipMethod { get; set; } // FK_PurchaseOrderHeader_ShipMethod_ShipMethodID
        public virtual Vendor Vendor { get; set; } // FK_PurchaseOrderHeader_Vendor_VendorID
        
        public PurchaseOrderHeader()
        {
            RevisionNumber = 0;
            Status = 1;
            OrderDate = System.DateTime.Now;
            SubTotal = 0.00m;
            TaxAmt = 0.00m;
            Freight = 0.00m;
            ModifiedDate = System.DateTime.Now;
            PurchaseOrderDetails = new List<PurchaseOrderDetail>();
        }
    }

    // SalesOrderDetail
    public class SalesOrderDetail
    {
        public int SalesOrderId { get; set; } // SalesOrderID (Primary key). Primary key. Foreign key to SalesOrderHeader.SalesOrderID.
        public int SalesOrderDetailId { get; set; } // SalesOrderDetailID (Primary key). Primary key. One incremental unique number per product sold.
        public string CarrierTrackingNumber { get; set; } // CarrierTrackingNumber. Shipment tracking number supplied by the shipper.
        public short OrderQty { get; set; } // OrderQty. Quantity ordered per product.
        public int ProductId { get; set; } // ProductID. Product sold to customer. Foreign key to Product.ProductID.
        public int SpecialOfferId { get; set; } // SpecialOfferID. Promotional code. Foreign key to SpecialOffer.SpecialOfferID.
        public decimal UnitPrice { get; set; } // UnitPrice. Selling price of a single product.
        public decimal UnitPriceDiscount { get; set; } // UnitPriceDiscount. Discount amount.
        public decimal LineTotal { get; set; } // LineTotal. Per product subtotal. Computed as UnitPrice * (1 - UnitPriceDiscount) * OrderQty.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual SalesOrderHeader SalesOrderHeader { get; set; } // FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID
        public virtual SpecialOfferProduct SpecialOfferProduct { get; set; } // FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID
        
        public SalesOrderDetail()
        {
            UnitPriceDiscount = 0.0m;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // SalesOrderHeader
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class SalesOrderHeader
    {
        public int SalesOrderId { get; set; } // SalesOrderID (Primary key). Primary key.
        public byte RevisionNumber { get; set; } // RevisionNumber. Incremental number to track changes to the sales order over time.
        public DateTime OrderDate { get; set; } // OrderDate. Dates the sales order was created.
        public DateTime DueDate { get; set; } // DueDate. Date the order is due to the customer.
        public DateTime? ShipDate { get; set; } // ShipDate. Date the order was shipped to the customer.
        public byte Status { get; set; } // Status. Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled
        public bool OnlineOrderFlag { get; set; } // OnlineOrderFlag. 0 = Order placed by sales person. 1 = Order placed online by customer.
        public string SalesOrderNumber { get; set; } // SalesOrderNumber. Unique sales order identification number.
        public string PurchaseOrderNumber { get; set; } // PurchaseOrderNumber. Customer purchase order number reference.
        public string AccountNumber { get; set; } // AccountNumber. Financial accounting number reference.
        public int CustomerId { get; set; } // CustomerID. Customer identification number. Foreign key to Customer.CustomerID.
        public int ContactId { get; set; } // ContactID. Customer contact identification number. Foreign key to Contact.ContactID.
        public int? SalesPersonId { get; set; } // SalesPersonID. Sales person who created the sales order. Foreign key to SalesPerson.SalePersonID.
        public int? TerritoryId { get; set; } // TerritoryID. Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.
        public int BillToAddressId { get; set; } // BillToAddressID. Customer billing address. Foreign key to Address.AddressID.
        public int ShipToAddressId { get; set; } // ShipToAddressID. Customer shipping address. Foreign key to Address.AddressID.
        public int ShipMethodId { get; set; } // ShipMethodID. Shipping method. Foreign key to ShipMethod.ShipMethodID.
        public int? CreditCardId { get; set; } // CreditCardID. Credit card identification number. Foreign key to CreditCard.CreditCardID.
        public string CreditCardApprovalCode { get; set; } // CreditCardApprovalCode. Approval code provided by the credit card company.
        public int? CurrencyRateId { get; set; } // CurrencyRateID. Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.
        public decimal SubTotal { get; set; } // SubTotal. Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.
        public decimal TaxAmt { get; set; } // TaxAmt. Tax amount.
        public decimal Freight { get; set; } // Freight. Shipping cost.
        public decimal TotalDue { get; set; } // TotalDue. Total due from customer. Computed as Subtotal + TaxAmt + Freight.
        public string Comment { get; set; } // Comment. Sales representative comments.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<SalesOrderDetail> SalesOrderDetails { get; set; } // Many to many mapping
        public virtual ICollection<SalesOrderHeaderSalesReason> SalesOrderHeaderSalesReasons { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Address Address_BillToAddressId { get; set; } // FK_SalesOrderHeader_Address_BillToAddressID
        public virtual Address Address_ShipToAddressId { get; set; } // FK_SalesOrderHeader_Address_ShipToAddressID
        public virtual Contact Contact { get; set; } // FK_SalesOrderHeader_Contact_ContactID
        public virtual CreditCard CreditCard { get; set; } // FK_SalesOrderHeader_CreditCard_CreditCardID
        public virtual CurrencyRate CurrencyRate { get; set; } // FK_SalesOrderHeader_CurrencyRate_CurrencyRateID
        public virtual Customer Customer { get; set; } // FK_SalesOrderHeader_Customer_CustomerID
        public virtual SalesPerson SalesPerson { get; set; } // FK_SalesOrderHeader_SalesPerson_SalesPersonID
        public virtual SalesTerritory SalesTerritory { get; set; } // FK_SalesOrderHeader_SalesTerritory_TerritoryID
        public virtual ShipMethod ShipMethod { get; set; } // FK_SalesOrderHeader_ShipMethod_ShipMethodID
        
        public SalesOrderHeader()
        {
            RevisionNumber = 0;
            OrderDate = System.DateTime.Now;
            Status = 1;
            OnlineOrderFlag = true;
            SubTotal = 0.00m;
            TaxAmt = 0.00m;
            Freight = 0.00m;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            SalesOrderDetails = new List<SalesOrderDetail>();
            SalesOrderHeaderSalesReasons = new List<SalesOrderHeaderSalesReason>();
        }
    }

    // SalesOrderHeaderSalesReason
    public class SalesOrderHeaderSalesReason
    {
        public int SalesOrderId { get; set; } // SalesOrderID (Primary key). Primary key. Foreign key to SalesOrderHeader.SalesOrderID.
        public int SalesReasonId { get; set; } // SalesReasonID (Primary key). Primary key. Foreign key to SalesReason.SalesReasonID.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual SalesOrderHeader SalesOrderHeader { get; set; } // FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID
        public virtual SalesReason SalesReason { get; set; } // FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID
        
        public SalesOrderHeaderSalesReason()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // SalesPerson
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class SalesPerson
    {
        public int SalesPersonId { get; set; } // SalesPersonID (Primary key). Primary key for SalesPerson records.
        public int? TerritoryId { get; set; } // TerritoryID. Territory currently assigned to. Foreign key to SalesTerritory.SalesTerritoryID.
        public decimal? SalesQuota { get; set; } // SalesQuota. Projected yearly sales.
        public decimal Bonus { get; set; } // Bonus. Bonus due if quota is met.
        public decimal CommissionPct { get; set; } // CommissionPct. Commision percent received per sale.
        public decimal SalesYtd { get; set; } // SalesYTD. Sales total year to date.
        public decimal SalesLastYear { get; set; } // SalesLastYear. Sales total of previous year.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<SalesOrderHeader> SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_SalesPerson_SalesPersonID
        public virtual ICollection<SalesPersonQuotaHistory> SalesPersonQuotaHistories { get; set; } // Many to many mapping
        public virtual ICollection<SalesTerritoryHistory> SalesTerritoryHistories { get; set; } // Many to many mapping
        public virtual ICollection<Store> Stores { get; set; } // Store.FK_Store_SalesPerson_SalesPersonID

        // Foreign keys
        public virtual Employee Employee { get; set; } // FK_SalesPerson_Employee_SalesPersonID
        public virtual SalesTerritory SalesTerritory { get; set; } // FK_SalesPerson_SalesTerritory_TerritoryID
        
        public SalesPerson()
        {
            Bonus = 0.00m;
            CommissionPct = 0.00m;
            SalesYtd = 0.00m;
            SalesLastYear = 0.00m;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            SalesOrderHeaders = new List<SalesOrderHeader>();
            SalesPersonQuotaHistories = new List<SalesPersonQuotaHistory>();
            SalesTerritoryHistories = new List<SalesTerritoryHistory>();
            Stores = new List<Store>();
        }
    }

    // SalesPersonQuotaHistory
    public class SalesPersonQuotaHistory
    {
        public int SalesPersonId { get; set; } // SalesPersonID (Primary key). Sales person identification number. Foreign key to SalesPerson.SalesPersonID.
        public DateTime QuotaDate { get; set; } // QuotaDate (Primary key). Sales quota date.
        public decimal SalesQuota { get; set; } // SalesQuota. Sales quota amount.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual SalesPerson SalesPerson { get; set; } // FK_SalesPersonQuotaHistory_SalesPerson_SalesPersonID
        
        public SalesPersonQuotaHistory()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // SalesReason
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class SalesReason
    {
        public int SalesReasonId { get; set; } // SalesReasonID (Primary key). Primary key for SalesReason records.
        public string Name { get; set; } // Name. Sales reason description.
        public string ReasonType { get; set; } // ReasonType. Category the sales reason belongs to.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<SalesOrderHeaderSalesReason> SalesOrderHeaderSalesReasons { get; set; } // Many to many mapping
        
        public SalesReason()
        {
            ModifiedDate = System.DateTime.Now;
            SalesOrderHeaderSalesReasons = new List<SalesOrderHeaderSalesReason>();
        }
    }

    // SalesTaxRate
    public class SalesTaxRate
    {
        public int SalesTaxRateId { get; set; } // SalesTaxRateID (Primary key). Primary key for SalesTaxRate records.
        public int StateProvinceId { get; set; } // StateProvinceID. State, province, or country/region the sales tax applies to.
        public byte TaxType { get; set; } // TaxType. 1 = Tax applied to retail transactions, 2 = Tax applied to wholesale transactions, 3 = Tax applied to all sales (retail and wholesale) transactions.
        public decimal TaxRate { get; set; } // TaxRate. Tax rate amount.
        public string Name { get; set; } // Name. Tax rate description.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual StateProvince StateProvince { get; set; } // FK_SalesTaxRate_StateProvince_StateProvinceID
        
        public SalesTaxRate()
        {
            TaxRate = 0.00m;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // SalesTerritory
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class SalesTerritory
    {
        public int TerritoryId { get; set; } // TerritoryID (Primary key). Primary key for SalesTerritory records.
        public string Name { get; set; } // Name. Sales territory description
        public string CountryRegionCode { get; set; } // CountryRegionCode. ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.
        public string Group { get; set; } // Group. Geographic area to which the sales territory belong.
        public decimal SalesYtd { get; set; } // SalesYTD. Sales in the territory year to date.
        public decimal SalesLastYear { get; set; } // SalesLastYear. Sales in the territory the previous year.
        public decimal CostYtd { get; set; } // CostYTD. Business costs in the territory year to date.
        public decimal CostLastYear { get; set; } // CostLastYear. Business costs in the territory the previous year.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<Customer> Customers { get; set; } // Customer.FK_Customer_SalesTerritory_TerritoryID
        public virtual ICollection<SalesOrderHeader> SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_SalesTerritory_TerritoryID
        public virtual ICollection<SalesPerson> SalesPersons { get; set; } // SalesPerson.FK_SalesPerson_SalesTerritory_TerritoryID
        public virtual ICollection<SalesTerritoryHistory> SalesTerritoryHistories { get; set; } // Many to many mapping
        public virtual ICollection<StateProvince> StateProvinces { get; set; } // StateProvince.FK_StateProvince_SalesTerritory_TerritoryID
        
        public SalesTerritory()
        {
            SalesYtd = 0.00m;
            SalesLastYear = 0.00m;
            CostYtd = 0.00m;
            CostLastYear = 0.00m;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Customers = new List<Customer>();
            SalesOrderHeaders = new List<SalesOrderHeader>();
            SalesPersons = new List<SalesPerson>();
            SalesTerritoryHistories = new List<SalesTerritoryHistory>();
            StateProvinces = new List<StateProvince>();
        }
    }

    // SalesTerritoryHistory
    public class SalesTerritoryHistory
    {
        public int SalesPersonId { get; set; } // SalesPersonID (Primary key). Primary key for SalesTerritoryHistory records.
        public int TerritoryId { get; set; } // TerritoryID (Primary key). Territory identification number. Foreign key to SalesTerritory.SalesTerritoryID.
        public DateTime StartDate { get; set; } // StartDate (Primary key). Date the sales representive started work in the territory.
        public DateTime? EndDate { get; set; } // EndDate. Date the sales representative left work in the territory.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual SalesPerson SalesPerson { get; set; } // FK_SalesTerritoryHistory_SalesPerson_SalesPersonID
        public virtual SalesTerritory SalesTerritory { get; set; } // FK_SalesTerritoryHistory_SalesTerritory_TerritoryID
        
        public SalesTerritoryHistory()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ScrapReason
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class ScrapReason
    {
        public short ScrapReasonId { get; set; } // ScrapReasonID (Primary key). Primary key for ScrapReason records.
        public string Name { get; set; } // Name. Failure description.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<WorkOrder> WorkOrders { get; set; } // WorkOrder.FK_WorkOrder_ScrapReason_ScrapReasonID
        
        public ScrapReason()
        {
            ModifiedDate = System.DateTime.Now;
            WorkOrders = new List<WorkOrder>();
        }
    }

    // Shift
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class Shift
    {
        public byte ShiftId { get; set; } // ShiftID (Primary key). Primary key for Shift records.
        public string Name { get; set; } // Name. Shift description.
        public DateTime StartTime { get; set; } // StartTime. Shift start time.
        public DateTime EndTime { get; set; } // EndTime. Shift end time.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<EmployeeDepartmentHistory> EmployeeDepartmentHistories { get; set; } // Many to many mapping
        
        public Shift()
        {
            ModifiedDate = System.DateTime.Now;
            EmployeeDepartmentHistories = new List<EmployeeDepartmentHistory>();
        }
    }

    // ShipMethod
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class ShipMethod
    {
        public int ShipMethodId { get; set; } // ShipMethodID (Primary key). Primary key for ShipMethod records.
        public string Name { get; set; } // Name. Shipping company name.
        public decimal ShipBase { get; set; } // ShipBase. Minimum shipping charge.
        public decimal ShipRate { get; set; } // ShipRate. Shipping charge per pound.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<PurchaseOrderHeader> PurchaseOrderHeaders { get; set; } // PurchaseOrderHeader.FK_PurchaseOrderHeader_ShipMethod_ShipMethodID
        public virtual ICollection<SalesOrderHeader> SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_ShipMethod_ShipMethodID
        
        public ShipMethod()
        {
            ShipBase = 0.00m;
            ShipRate = 0.00m;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            PurchaseOrderHeaders = new List<PurchaseOrderHeader>();
            SalesOrderHeaders = new List<SalesOrderHeader>();
        }
    }

    // ShoppingCartItem
    public class ShoppingCartItem
    {
        public int ShoppingCartItemId { get; set; } // ShoppingCartItemID (Primary key). Primary key for ShoppingCartItem records.
        public string ShoppingCartId { get; set; } // ShoppingCartID. Shopping cart identification number.
        public int Quantity { get; set; } // Quantity. Product quantity ordered.
        public int ProductId { get; set; } // ProductID. Product ordered. Foreign key to Product.ProductID.
        public DateTime DateCreated { get; set; } // DateCreated. Date the time the record was created.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual Product Product { get; set; } // FK_ShoppingCartItem_Product_ProductID
        
        public ShoppingCartItem()
        {
            Quantity = 1;
            DateCreated = System.DateTime.Now;
            ModifiedDate = System.DateTime.Now;
        }
    }

    // SpecialOffer
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class SpecialOffer
    {
        public int SpecialOfferId { get; set; } // SpecialOfferID (Primary key). Primary key for SpecialOffer records.
        public string Description { get; set; } // Description. Discount description.
        public decimal DiscountPct { get; set; } // DiscountPct. Discount precentage.
        public string Type { get; set; } // Type. Discount type category.
        public string Category { get; set; } // Category. Group the discount applies to such as Reseller or Customer.
        public DateTime StartDate { get; set; } // StartDate. Discount start date.
        public DateTime EndDate { get; set; } // EndDate. Discount end date.
        public int MinQty { get; set; } // MinQty. Minimum discount percent allowed.
        public int? MaxQty { get; set; } // MaxQty. Maximum discount percent allowed.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<SpecialOfferProduct> SpecialOfferProducts { get; set; } // Many to many mapping
        
        public SpecialOffer()
        {
            DiscountPct = 0.00m;
            MinQty = 0;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            SpecialOfferProducts = new List<SpecialOfferProduct>();
        }
    }

    // SpecialOfferProduct
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class SpecialOfferProduct
    {
        public int SpecialOfferId { get; set; } // SpecialOfferID (Primary key). Primary key for SpecialOfferProduct records.
        public int ProductId { get; set; } // ProductID (Primary key). Product identification number. Foreign key to Product.ProductID.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<SalesOrderDetail> SalesOrderDetails { get; set; } // SalesOrderDetail.FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID

        // Foreign keys
        public virtual Product Product { get; set; } // FK_SpecialOfferProduct_Product_ProductID
        public virtual SpecialOffer SpecialOffer { get; set; } // FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID
        
        public SpecialOfferProduct()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            SalesOrderDetails = new List<SalesOrderDetail>();
        }
    }

    // StateProvince
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class StateProvince
    {
        public int StateProvinceId { get; set; } // StateProvinceID (Primary key). Primary key for StateProvince records.
        public string StateProvinceCode { get; set; } // StateProvinceCode. ISO standard state or province code.
        public string CountryRegionCode { get; set; } // CountryRegionCode. ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.
        public bool IsOnlyStateProvinceFlag { get; set; } // IsOnlyStateProvinceFlag. 0 = StateProvinceCode exists. 1 = StateProvinceCode unavailable, using CountryRegionCode.
        public string Name { get; set; } // Name. State or province description.
        public int TerritoryId { get; set; } // TerritoryID. ID of the territory in which the state or province is located. Foreign key to SalesTerritory.SalesTerritoryID.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<Address> Addresses { get; set; } // Address.FK_Address_StateProvince_StateProvinceID
        public virtual ICollection<SalesTaxRate> SalesTaxRates { get; set; } // SalesTaxRate.FK_SalesTaxRate_StateProvince_StateProvinceID

        // Foreign keys
        public virtual CountryRegion CountryRegion { get; set; } // FK_StateProvince_CountryRegion_CountryRegionCode
        public virtual SalesTerritory SalesTerritory { get; set; } // FK_StateProvince_SalesTerritory_TerritoryID
        
        public StateProvince()
        {
            IsOnlyStateProvinceFlag = true;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Addresses = new List<Address>();
            SalesTaxRates = new List<SalesTaxRate>();
        }
    }

    // Store
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class Store
    {
        public int CustomerId { get; set; } // CustomerID (Primary key). Primary key. Foreign key to Customer.CustomerID.
        public string Name { get; set; } // Name. Name of the store.
        public int? SalesPersonId { get; set; } // SalesPersonID. ID of the sales person assigned to the customer. Foreign key to SalesPerson.SalesPersonID.
        public string Demographics { get; set; } // Demographics. Demographic informationg about the store such as the number of employees, annual sales and store type.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<StoreContact> StoreContacts { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Customer Customer { get; set; } // FK_Store_Customer_CustomerID
        public virtual SalesPerson SalesPerson { get; set; } // FK_Store_SalesPerson_SalesPersonID
        
        public Store()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            StoreContacts = new List<StoreContact>();
        }
    }

    // StoreContact
    public class StoreContact
    {
        public int CustomerId { get; set; } // CustomerID (Primary key). Store identification number. Foreign key to Customer.CustomerID.
        public int ContactId { get; set; } // ContactID (Primary key). Contact (store employee) identification number. Foreign key to Contact.ContactID.
        public int ContactTypeId { get; set; } // ContactTypeID. Contact type such as owner or purchasing agent. Foreign key to ContactType.ContactTypeID.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual Contact Contact { get; set; } // FK_StoreContact_Contact_ContactID
        public virtual ContactType ContactType { get; set; } // FK_StoreContact_ContactType_ContactTypeID
        public virtual Store Store { get; set; } // FK_StoreContact_Store_CustomerID
        
        public StoreContact()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // TransactionHistory
    public class TransactionHistory
    {
        public int TransactionId { get; set; } // TransactionID (Primary key). Primary key for TransactionHistory records.
        public int ProductId { get; set; } // ProductID. Product identification number. Foreign key to Product.ProductID.
        public int ReferenceOrderId { get; set; } // ReferenceOrderID. Purchase order, sales order, or work order identification number.
        public int ReferenceOrderLineId { get; set; } // ReferenceOrderLineID. Line number associated with the purchase order, sales order, or work order.
        public DateTime TransactionDate { get; set; } // TransactionDate. Date and time of the transaction.
        public string TransactionType { get; set; } // TransactionType. W = WorkOrder, S = SalesOrder, P = PurchaseOrder
        public int Quantity { get; set; } // Quantity. Product quantity.
        public decimal ActualCost { get; set; } // ActualCost. Product cost.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual Product Product { get; set; } // FK_TransactionHistory_Product_ProductID
        
        public TransactionHistory()
        {
            ReferenceOrderLineId = 0;
            TransactionDate = System.DateTime.Now;
            ModifiedDate = System.DateTime.Now;
        }
    }

    // TransactionHistoryArchive
    public class TransactionHistoryArchive
    {
        public int TransactionId { get; set; } // TransactionID (Primary key). Primary key for TransactionHistoryArchive records.
        public int ProductId { get; set; } // ProductID. Product identification number. Foreign key to Product.ProductID.
        public int ReferenceOrderId { get; set; } // ReferenceOrderID. Purchase order, sales order, or work order identification number.
        public int ReferenceOrderLineId { get; set; } // ReferenceOrderLineID. Line number associated with the purchase order, sales order, or work order.
        public DateTime TransactionDate { get; set; } // TransactionDate. Date and time of the transaction.
        public string TransactionType { get; set; } // TransactionType. W = Work Order, S = Sales Order, P = Purchase Order
        public int Quantity { get; set; } // Quantity. Product quantity.
        public decimal ActualCost { get; set; } // ActualCost. Product cost.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.
        
        public TransactionHistoryArchive()
        {
            ReferenceOrderLineId = 0;
            TransactionDate = System.DateTime.Now;
            ModifiedDate = System.DateTime.Now;
        }
    }

    // UnitMeasure
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class UnitMeasure
    {
        public string UnitMeasureCode { get; set; } // UnitMeasureCode (Primary key). Primary key.
        public string Name { get; set; } // Name. Unit of measure description.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<BillOfMaterial> BillOfMaterials { get; set; } // BillOfMaterials.FK_BillOfMaterials_UnitMeasure_UnitMeasureCode
        public virtual ICollection<Product> Products_SizeUnitMeasureCode { get; set; } // Product.FK_Product_UnitMeasure_SizeUnitMeasureCode
        public virtual ICollection<Product> Products_WeightUnitMeasureCode { get; set; } // Product.FK_Product_UnitMeasure_WeightUnitMeasureCode
        public virtual ICollection<ProductVendor> ProductVendors { get; set; } // ProductVendor.FK_ProductVendor_UnitMeasure_UnitMeasureCode
        
        public UnitMeasure()
        {
            ModifiedDate = System.DateTime.Now;
            BillOfMaterials = new List<BillOfMaterial>();
            Products_SizeUnitMeasureCode = new List<Product>();
            Products_WeightUnitMeasureCode = new List<Product>();
            ProductVendors = new List<ProductVendor>();
        }
    }

    // vAdditionalContactInfo
    public class VAdditionalContactInfo
    {
        public int ContactId { get; set; } // ContactID
        public string FirstName { get; set; } // FirstName
        public string MiddleName { get; set; } // MiddleName
        public string LastName { get; set; } // LastName
        public string TelephoneNumber { get; set; } // TelephoneNumber
        public string TelephoneSpecialInstructions { get; set; } // TelephoneSpecialInstructions
        public string Street { get; set; } // Street
        public string City { get; set; } // City
        public string StateProvince { get; set; } // StateProvince
        public string PostalCode { get; set; } // PostalCode
        public string CountryRegion { get; set; } // CountryRegion
        public string HomeAddressSpecialInstructions { get; set; } // HomeAddressSpecialInstructions
        public string EMailAddress { get; set; } // EMailAddress
        public string EMailSpecialInstructions { get; set; } // EMailSpecialInstructions
        public string EMailTelephoneNumber { get; set; } // EMailTelephoneNumber
        public Guid Rowguid { get; set; } // rowguid
        public DateTime ModifiedDate { get; set; } // ModifiedDate
    }

    // vEmployee
    public class VEmployee
    {
        public int EmployeeId { get; set; } // EmployeeID
        public string Title { get; set; } // Title
        public string FirstName { get; set; } // FirstName
        public string MiddleName { get; set; } // MiddleName
        public string LastName { get; set; } // LastName
        public string Suffix { get; set; } // Suffix
        public string JobTitle { get; set; } // JobTitle
        public string Phone { get; set; } // Phone
        public string EmailAddress { get; set; } // EmailAddress
        public int EmailPromotion { get; set; } // EmailPromotion
        public string AddressLine1 { get; set; } // AddressLine1
        public string AddressLine2 { get; set; } // AddressLine2
        public string City { get; set; } // City
        public string StateProvinceName { get; set; } // StateProvinceName
        public string PostalCode { get; set; } // PostalCode
        public string CountryRegionName { get; set; } // CountryRegionName
        public string AdditionalContactInfo { get; set; } // AdditionalContactInfo
    }

    // vEmployeeDepartment
    public class VEmployeeDepartment
    {
        public int EmployeeId { get; set; } // EmployeeID
        public string Title { get; set; } // Title
        public string FirstName { get; set; } // FirstName
        public string MiddleName { get; set; } // MiddleName
        public string LastName { get; set; } // LastName
        public string Suffix { get; set; } // Suffix
        public string JobTitle { get; set; } // JobTitle
        public string Department { get; set; } // Department
        public string GroupName { get; set; } // GroupName
        public DateTime StartDate { get; set; } // StartDate
    }

    // vEmployeeDepartmentHistory
    public class VEmployeeDepartmentHistory
    {
        public int EmployeeId { get; set; } // EmployeeID
        public string Title { get; set; } // Title
        public string FirstName { get; set; } // FirstName
        public string MiddleName { get; set; } // MiddleName
        public string LastName { get; set; } // LastName
        public string Suffix { get; set; } // Suffix
        public string Shift { get; set; } // Shift
        public string Department { get; set; } // Department
        public string GroupName { get; set; } // GroupName
        public DateTime StartDate { get; set; } // StartDate
        public DateTime? EndDate { get; set; } // EndDate
    }

    // Vendor
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class Vendor
    {
        public int VendorId { get; set; } // VendorID (Primary key). Primary key for Vendor records.
        public string AccountNumber { get; set; } // AccountNumber. Vendor account (identification) number.
        public string Name { get; set; } // Name. Company name.
        public byte CreditRating { get; set; } // CreditRating. 1 = Superior, 2 = Excellent, 3 = Above average, 4 = Average, 5 = Below average
        public bool PreferredVendorStatus { get; set; } // PreferredVendorStatus. 0 = Do not use if another vendor is available. 1 = Preferred over other vendors supplying the same product.
        public bool ActiveFlag { get; set; } // ActiveFlag. 0 = Vendor no longer used. 1 = Vendor is actively used.
        public string PurchasingWebServiceUrl { get; set; } // PurchasingWebServiceURL. Vendor URL.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<ProductVendor> ProductVendors { get; set; } // Many to many mapping
        public virtual ICollection<PurchaseOrderHeader> PurchaseOrderHeaders { get; set; } // PurchaseOrderHeader.FK_PurchaseOrderHeader_Vendor_VendorID
        public virtual ICollection<VendorAddress> VendorAddresses { get; set; } // Many to many mapping
        public virtual ICollection<VendorContact> VendorContacts { get; set; } // Many to many mapping
        
        public Vendor()
        {
            PreferredVendorStatus = true;
            ActiveFlag = true;
            ModifiedDate = System.DateTime.Now;
            ProductVendors = new List<ProductVendor>();
            PurchaseOrderHeaders = new List<PurchaseOrderHeader>();
            VendorAddresses = new List<VendorAddress>();
            VendorContacts = new List<VendorContact>();
        }
    }

    // VendorAddress
    public class VendorAddress
    {
        public int VendorId { get; set; } // VendorID (Primary key). Primary key. Foreign key to Vendor.VendorID.
        public int AddressId { get; set; } // AddressID (Primary key). Primary key. Foreign key to Address.AddressID.
        public int AddressTypeId { get; set; } // AddressTypeID. Address type. Foreign key to AddressType.AddressTypeID.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual Address Address { get; set; } // FK_VendorAddress_Address_AddressID
        public virtual AddressType AddressType { get; set; } // FK_VendorAddress_AddressType_AddressTypeID
        public virtual Vendor Vendor { get; set; } // FK_VendorAddress_Vendor_VendorID
        
        public VendorAddress()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // VendorContact
    public class VendorContact
    {
        public int VendorId { get; set; } // VendorID (Primary key). Primary key.
        public int ContactId { get; set; } // ContactID (Primary key). Contact (Vendor employee) identification number. Foreign key to Contact.ContactID.
        public int ContactTypeId { get; set; } // ContactTypeID. Contact type such as sales manager, or sales agent.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual Contact Contact { get; set; } // FK_VendorContact_Contact_ContactID
        public virtual ContactType ContactType { get; set; } // FK_VendorContact_ContactType_ContactTypeID
        public virtual Vendor Vendor { get; set; } // FK_VendorContact_Vendor_VendorID
        
        public VendorContact()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // vIndividualCustomer
    public class VIndividualCustomer
    {
        public int CustomerId { get; set; } // CustomerID
        public string Title { get; set; } // Title
        public string FirstName { get; set; } // FirstName
        public string MiddleName { get; set; } // MiddleName
        public string LastName { get; set; } // LastName
        public string Suffix { get; set; } // Suffix
        public string Phone { get; set; } // Phone
        public string EmailAddress { get; set; } // EmailAddress
        public int EmailPromotion { get; set; } // EmailPromotion
        public string AddressType { get; set; } // AddressType
        public string AddressLine1 { get; set; } // AddressLine1
        public string AddressLine2 { get; set; } // AddressLine2
        public string City { get; set; } // City
        public string StateProvinceName { get; set; } // StateProvinceName
        public string PostalCode { get; set; } // PostalCode
        public string CountryRegionName { get; set; } // CountryRegionName
        public string Demographics { get; set; } // Demographics
    }

    // vIndividualDemographics
    public class VIndividualDemographic
    {
        public int CustomerId { get; set; } // CustomerID
        public decimal? TotalPurchaseYtd { get; set; } // TotalPurchaseYTD
        public DateTime? DateFirstPurchase { get; set; } // DateFirstPurchase
        public DateTime? BirthDate { get; set; } // BirthDate
        public string MaritalStatus { get; set; } // MaritalStatus
        public string YearlyIncome { get; set; } // YearlyIncome
        public string Gender { get; set; } // Gender
        public int? TotalChildren { get; set; } // TotalChildren
        public int? NumberChildrenAtHome { get; set; } // NumberChildrenAtHome
        public string Education { get; set; } // Education
        public string Occupation { get; set; } // Occupation
        public bool? HomeOwnerFlag { get; set; } // HomeOwnerFlag
        public int? NumberCarsOwned { get; set; } // NumberCarsOwned
    }

    // vJobCandidate
    public class VJobCandidate
    {
        public int JobCandidateId { get; set; } // JobCandidateID
        public int? EmployeeId { get; set; } // EmployeeID
        public string Name46Prefix { get; set; } // Name.Prefix
        public string Name46First { get; set; } // Name.First
        public string Name46Middle { get; set; } // Name.Middle
        public string Name46Last { get; set; } // Name.Last
        public string Name46Suffix { get; set; } // Name.Suffix
        public string Skills { get; set; } // Skills
        public string Addr46Type { get; set; } // Addr.Type
        public string Addr46Loc46CountryRegion { get; set; } // Addr.Loc.CountryRegion
        public string Addr46Loc46State { get; set; } // Addr.Loc.State
        public string Addr46Loc46City { get; set; } // Addr.Loc.City
        public string Addr46PostalCode { get; set; } // Addr.PostalCode
        public string EMail { get; set; } // EMail
        public string WebSite { get; set; } // WebSite
        public DateTime ModifiedDate { get; set; } // ModifiedDate
    }

    // vJobCandidateEducation
    public class VJobCandidateEducation
    {
        public int JobCandidateId { get; set; } // JobCandidateID
        public string Edu46Level { get; set; } // Edu.Level
        public DateTime? Edu46StartDate { get; set; } // Edu.StartDate
        public DateTime? Edu46EndDate { get; set; } // Edu.EndDate
        public string Edu46Degree { get; set; } // Edu.Degree
        public string Edu46Major { get; set; } // Edu.Major
        public string Edu46Minor { get; set; } // Edu.Minor
        public string Edu46Gpa { get; set; } // Edu.GPA
        public string Edu46GpaScale { get; set; } // Edu.GPAScale
        public string Edu46School { get; set; } // Edu.School
        public string Edu46Loc46CountryRegion { get; set; } // Edu.Loc.CountryRegion
        public string Edu46Loc46State { get; set; } // Edu.Loc.State
        public string Edu46Loc46City { get; set; } // Edu.Loc.City
    }

    // vJobCandidateEmployment
    public class VJobCandidateEmployment
    {
        public int JobCandidateId { get; set; } // JobCandidateID
        public DateTime? Emp46StartDate { get; set; } // Emp.StartDate
        public DateTime? Emp46EndDate { get; set; } // Emp.EndDate
        public string Emp46OrgName { get; set; } // Emp.OrgName
        public string Emp46JobTitle { get; set; } // Emp.JobTitle
        public string Emp46Responsibility { get; set; } // Emp.Responsibility
        public string Emp46FunctionCategory { get; set; } // Emp.FunctionCategory
        public string Emp46IndustryCategory { get; set; } // Emp.IndustryCategory
        public string Emp46Loc46CountryRegion { get; set; } // Emp.Loc.CountryRegion
        public string Emp46Loc46State { get; set; } // Emp.Loc.State
        public string Emp46Loc46City { get; set; } // Emp.Loc.City
    }

    // vProductAndDescription
    public class VProductAndDescription
    {
        public int ProductId { get; set; } // ProductID
        public string Name { get; set; } // Name
        public string ProductModel { get; set; } // ProductModel
        public string CultureId { get; set; } // CultureID
        public string Description { get; set; } // Description
    }

    // vProductModelCatalogDescription
    public class VProductModelCatalogDescription
    {
        public int ProductModelId { get; set; } // ProductModelID
        public string Name { get; set; } // Name
        public string Summary { get; set; } // Summary
        public string Manufacturer { get; set; } // Manufacturer
        public string Copyright { get; set; } // Copyright
        public string ProductUrl { get; set; } // ProductURL
        public string WarrantyPeriod { get; set; } // WarrantyPeriod
        public string WarrantyDescription { get; set; } // WarrantyDescription
        public string NoOfYears { get; set; } // NoOfYears
        public string MaintenanceDescription { get; set; } // MaintenanceDescription
        public string Wheel { get; set; } // Wheel
        public string Saddle { get; set; } // Saddle
        public string Pedal { get; set; } // Pedal
        public string BikeFrame { get; set; } // BikeFrame
        public string Crankset { get; set; } // Crankset
        public string PictureAngle { get; set; } // PictureAngle
        public string PictureSize { get; set; } // PictureSize
        public string ProductPhotoId { get; set; } // ProductPhotoID
        public string Material { get; set; } // Material
        public string Color { get; set; } // Color
        public string ProductLine { get; set; } // ProductLine
        public string Style { get; set; } // Style
        public string RiderExperience { get; set; } // RiderExperience
        public Guid Rowguid { get; set; } // rowguid
        public DateTime ModifiedDate { get; set; } // ModifiedDate
    }

    // vProductModelInstructions
    public class VProductModelInstruction
    {
        public int ProductModelId { get; set; } // ProductModelID
        public string Name { get; set; } // Name
        public string Instructions { get; set; } // Instructions
        public int? LocationId { get; set; } // LocationID
        public decimal? SetupHours { get; set; } // SetupHours
        public decimal? MachineHours { get; set; } // MachineHours
        public decimal? LaborHours { get; set; } // LaborHours
        public int? LotSize { get; set; } // LotSize
        public string Step { get; set; } // Step
        public Guid Rowguid { get; set; } // rowguid
        public DateTime ModifiedDate { get; set; } // ModifiedDate
    }

    // vSalesPerson
    public class VSalesPerson
    {
        public int SalesPersonId { get; set; } // SalesPersonID
        public string Title { get; set; } // Title
        public string FirstName { get; set; } // FirstName
        public string MiddleName { get; set; } // MiddleName
        public string LastName { get; set; } // LastName
        public string Suffix { get; set; } // Suffix
        public string JobTitle { get; set; } // JobTitle
        public string Phone { get; set; } // Phone
        public string EmailAddress { get; set; } // EmailAddress
        public int EmailPromotion { get; set; } // EmailPromotion
        public string AddressLine1 { get; set; } // AddressLine1
        public string AddressLine2 { get; set; } // AddressLine2
        public string City { get; set; } // City
        public string StateProvinceName { get; set; } // StateProvinceName
        public string PostalCode { get; set; } // PostalCode
        public string CountryRegionName { get; set; } // CountryRegionName
        public string TerritoryName { get; set; } // TerritoryName
        public string TerritoryGroup { get; set; } // TerritoryGroup
        public decimal? SalesQuota { get; set; } // SalesQuota
        public decimal SalesYtd { get; set; } // SalesYTD
        public decimal SalesLastYear { get; set; } // SalesLastYear
    }

    // vSalesPersonSalesByFiscalYears
    public class VSalesPersonSalesByFiscalYear
    {
        public int? SalesPersonId { get; set; } // SalesPersonID
        public string FullName { get; set; } // FullName
        public string Title { get; set; } // Title
        public string SalesTerritory { get; set; } // SalesTerritory
        public decimal? C2002 { get; set; } // 2002
        public decimal? C2003 { get; set; } // 2003
        public decimal? C2004 { get; set; } // 2004
    }

    // vStateProvinceCountryRegion
    public class VStateProvinceCountryRegion
    {
        public int StateProvinceId { get; set; } // StateProvinceID
        public string StateProvinceCode { get; set; } // StateProvinceCode
        public bool IsOnlyStateProvinceFlag { get; set; } // IsOnlyStateProvinceFlag
        public string StateProvinceName { get; set; } // StateProvinceName
        public int TerritoryId { get; set; } // TerritoryID
        public string CountryRegionCode { get; set; } // CountryRegionCode
        public string CountryRegionName { get; set; } // CountryRegionName
    }

    // vStoreWithDemographics
    public class VStoreWithDemographic
    {
        public int CustomerId { get; set; } // CustomerID
        public string Name { get; set; } // Name
        public string ContactType { get; set; } // ContactType
        public string Title { get; set; } // Title
        public string FirstName { get; set; } // FirstName
        public string MiddleName { get; set; } // MiddleName
        public string LastName { get; set; } // LastName
        public string Suffix { get; set; } // Suffix
        public string Phone { get; set; } // Phone
        public string EmailAddress { get; set; } // EmailAddress
        public int EmailPromotion { get; set; } // EmailPromotion
        public string AddressType { get; set; } // AddressType
        public string AddressLine1 { get; set; } // AddressLine1
        public string AddressLine2 { get; set; } // AddressLine2
        public string City { get; set; } // City
        public string StateProvinceName { get; set; } // StateProvinceName
        public string PostalCode { get; set; } // PostalCode
        public string CountryRegionName { get; set; } // CountryRegionName
        public decimal? AnnualSales { get; set; } // AnnualSales
        public decimal? AnnualRevenue { get; set; } // AnnualRevenue
        public string BankName { get; set; } // BankName
        public string BusinessType { get; set; } // BusinessType
        public int? YearOpened { get; set; } // YearOpened
        public string Specialty { get; set; } // Specialty
        public int? SquareFeet { get; set; } // SquareFeet
        public string Brands { get; set; } // Brands
        public string Internet { get; set; } // Internet
        public int? NumberEmployees { get; set; } // NumberEmployees
    }

    // vVendor
    public class VVendor
    {
        public int VendorId { get; set; } // VendorID
        public string Name { get; set; } // Name
        public string ContactType { get; set; } // ContactType
        public string Title { get; set; } // Title
        public string FirstName { get; set; } // FirstName
        public string MiddleName { get; set; } // MiddleName
        public string LastName { get; set; } // LastName
        public string Suffix { get; set; } // Suffix
        public string Phone { get; set; } // Phone
        public string EmailAddress { get; set; } // EmailAddress
        public int EmailPromotion { get; set; } // EmailPromotion
        public string AddressLine1 { get; set; } // AddressLine1
        public string AddressLine2 { get; set; } // AddressLine2
        public string City { get; set; } // City
        public string StateProvinceName { get; set; } // StateProvinceName
        public string PostalCode { get; set; } // PostalCode
        public string CountryRegionName { get; set; } // CountryRegionName
    }

    // WorkOrder
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class WorkOrder
    {
        public int WorkOrderId { get; set; } // WorkOrderID (Primary key). Primary key for WorkOrder records.
        public int ProductId { get; set; } // ProductID. Product identification number. Foreign key to Product.ProductID.
        public int OrderQty { get; set; } // OrderQty. Product quantity to build.
        public int StockedQty { get; set; } // StockedQty. Quantity built and put in inventory.
        public short ScrappedQty { get; set; } // ScrappedQty. Quantity that failed inspection.
        public DateTime StartDate { get; set; } // StartDate. Work order start date.
        public DateTime? EndDate { get; set; } // EndDate. Work order end date.
        public DateTime DueDate { get; set; } // DueDate. Work order due date.
        public short? ScrapReasonId { get; set; } // ScrapReasonID. Reason for inspection failure.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<WorkOrderRouting> WorkOrderRoutings { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Product Product { get; set; } // FK_WorkOrder_Product_ProductID
        public virtual ScrapReason ScrapReason { get; set; } // FK_WorkOrder_ScrapReason_ScrapReasonID
        
        public WorkOrder()
        {
            ModifiedDate = System.DateTime.Now;
            WorkOrderRoutings = new List<WorkOrderRouting>();
        }
    }

    // WorkOrderRouting
    public class WorkOrderRouting
    {
        public int WorkOrderId { get; set; } // WorkOrderID (Primary key). Primary key. Foreign key to WorkOrder.WorkOrderID.
        public int ProductId { get; set; } // ProductID (Primary key). Primary key. Foreign key to Product.ProductID.
        public short OperationSequence { get; set; } // OperationSequence (Primary key). Primary key. Indicates the manufacturing process sequence.
        public short LocationId { get; set; } // LocationID. Manufacturing location where the part is processed. Foreign key to Location.LocationID.
        public DateTime ScheduledStartDate { get; set; } // ScheduledStartDate. Planned manufacturing start date.
        public DateTime ScheduledEndDate { get; set; } // ScheduledEndDate. Planned manufacturing end date.
        public DateTime? ActualStartDate { get; set; } // ActualStartDate. Actual start date.
        public DateTime? ActualEndDate { get; set; } // ActualEndDate. Actual end date.
        public decimal? ActualResourceHrs { get; set; } // ActualResourceHrs. Number of manufacturing hours used.
        public decimal PlannedCost { get; set; } // PlannedCost. Estimated manufacturing cost.
        public decimal? ActualCost { get; set; } // ActualCost. Actual manufacturing cost.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual Location Location { get; set; } // FK_WorkOrderRouting_Location_LocationID
        public virtual WorkOrder WorkOrder { get; set; } // FK_WorkOrderRouting_WorkOrder_WorkOrderID
        
        public WorkOrderRouting()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }


    // ************************************************************************
    // POCO Configuration

    // Address
    public class AddressConfiguration : EntityTypeConfiguration<Address>
    {
        public AddressConfiguration()
            : this("Person")
        {
        }
 
        public AddressConfiguration(string schema)
        {
            ToTable(schema + ".Address");
            HasKey(x => x.AddressId);

            Property(x => x.AddressId).HasColumnName("AddressID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.AddressLine1).HasColumnName("AddressLine1").IsRequired().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.AddressLine2).HasColumnName("AddressLine2").IsOptional().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.City).HasColumnName("City").IsRequired().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.StateProvinceId).HasColumnName("StateProvinceID").IsRequired().HasColumnType("int");
            Property(x => x.PostalCode).HasColumnName("PostalCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.StateProvince).WithMany(b => b.Addresses).HasForeignKey(c => c.StateProvinceId); // FK_Address_StateProvince_StateProvinceID
        }
    }

    // AddressType
    public class AddressTypeConfiguration : EntityTypeConfiguration<AddressType>
    {
        public AddressTypeConfiguration()
            : this("Person")
        {
        }
 
        public AddressTypeConfiguration(string schema)
        {
            ToTable(schema + ".AddressType");
            HasKey(x => x.AddressTypeId);

            Property(x => x.AddressTypeId).HasColumnName("AddressTypeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // AWBuildVersion
    public class AwBuildVersionConfiguration : EntityTypeConfiguration<AwBuildVersion>
    {
        public AwBuildVersionConfiguration()
            : this("dbo")
        {
        }
 
        public AwBuildVersionConfiguration(string schema)
        {
            ToTable(schema + ".AWBuildVersion");
            HasKey(x => x.SystemInformationId);

            Property(x => x.SystemInformationId).HasColumnName("SystemInformationID").IsRequired().HasColumnType("tinyint").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.DatabaseVersion).HasColumnName("Database Version").IsRequired().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.VersionDate).HasColumnName("VersionDate").IsRequired().HasColumnType("datetime");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // BillOfMaterials
    public class BillOfMaterialConfiguration : EntityTypeConfiguration<BillOfMaterial>
    {
        public BillOfMaterialConfiguration()
            : this("Production")
        {
        }
 
        public BillOfMaterialConfiguration(string schema)
        {
            ToTable(schema + ".BillOfMaterials");
            HasKey(x => x.BillOfMaterialsId);

            Property(x => x.BillOfMaterialsId).HasColumnName("BillOfMaterialsID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ProductAssemblyId).HasColumnName("ProductAssemblyID").IsOptional().HasColumnType("int");
            Property(x => x.ComponentId).HasColumnName("ComponentID").IsRequired().HasColumnType("int");
            Property(x => x.StartDate).HasColumnName("StartDate").IsRequired().HasColumnType("datetime");
            Property(x => x.EndDate).HasColumnName("EndDate").IsOptional().HasColumnType("datetime");
            Property(x => x.UnitMeasureCode).HasColumnName("UnitMeasureCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3);
            Property(x => x.BomLevel).HasColumnName("BOMLevel").IsRequired().HasColumnType("smallint");
            Property(x => x.PerAssemblyQty).HasColumnName("PerAssemblyQty").IsRequired().HasColumnType("decimal").HasPrecision(8,2);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.Product_ProductAssemblyId).WithMany(b => b.BillOfMaterials_ProductAssemblyId).HasForeignKey(c => c.ProductAssemblyId); // FK_BillOfMaterials_Product_ProductAssemblyID
            HasRequired(a => a.Product_ComponentId).WithMany(b => b.BillOfMaterials_ComponentId).HasForeignKey(c => c.ComponentId); // FK_BillOfMaterials_Product_ComponentID
            HasRequired(a => a.UnitMeasure).WithMany(b => b.BillOfMaterials).HasForeignKey(c => c.UnitMeasureCode); // FK_BillOfMaterials_UnitMeasure_UnitMeasureCode
        }
    }

    // Contact
    public class ContactConfiguration : EntityTypeConfiguration<Contact>
    {
        public ContactConfiguration()
            : this("Person")
        {
        }
 
        public ContactConfiguration(string schema)
        {
            ToTable(schema + ".Contact");
            HasKey(x => x.ContactId);

            Property(x => x.ContactId).HasColumnName("ContactID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.NameStyle).HasColumnName("NameStyle").IsRequired().HasColumnType("bit");
            Property(x => x.Title).HasColumnName("Title").IsOptional().HasColumnType("nvarchar").HasMaxLength(8);
            Property(x => x.FirstName).HasColumnName("FirstName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName("MiddleName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LastName).HasColumnName("LastName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Suffix).HasColumnName("Suffix").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.EmailAddress).HasColumnName("EmailAddress").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.EmailPromotion).HasColumnName("EmailPromotion").IsRequired().HasColumnType("int");
            Property(x => x.Phone).HasColumnName("Phone").IsOptional().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.PasswordHash).HasColumnName("PasswordHash").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(128);
            Property(x => x.PasswordSalt).HasColumnName("PasswordSalt").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.AdditionalContactInfo).HasColumnName("AdditionalContactInfo").IsOptional().HasColumnType("xml");
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // ContactCreditCard
    public class ContactCreditCardConfiguration : EntityTypeConfiguration<ContactCreditCard>
    {
        public ContactCreditCardConfiguration()
            : this("Sales")
        {
        }
 
        public ContactCreditCardConfiguration(string schema)
        {
            ToTable(schema + ".ContactCreditCard");
            HasKey(x => new { x.ContactId, x.CreditCardId });

            Property(x => x.ContactId).HasColumnName("ContactID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.CreditCardId).HasColumnName("CreditCardID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Contact).WithMany(b => b.ContactCreditCards).HasForeignKey(c => c.ContactId); // FK_ContactCreditCard_Contact_ContactID
            HasRequired(a => a.CreditCard).WithMany(b => b.ContactCreditCards).HasForeignKey(c => c.CreditCardId); // FK_ContactCreditCard_CreditCard_CreditCardID
        }
    }

    // ContactType
    public class ContactTypeConfiguration : EntityTypeConfiguration<ContactType>
    {
        public ContactTypeConfiguration()
            : this("Person")
        {
        }
 
        public ContactTypeConfiguration(string schema)
        {
            ToTable(schema + ".ContactType");
            HasKey(x => x.ContactTypeId);

            Property(x => x.ContactTypeId).HasColumnName("ContactTypeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // CountryRegion
    public class CountryRegionConfiguration : EntityTypeConfiguration<CountryRegion>
    {
        public CountryRegionConfiguration()
            : this("Person")
        {
        }
 
        public CountryRegionConfiguration(string schema)
        {
            ToTable(schema + ".CountryRegion");
            HasKey(x => x.CountryRegionCode);

            Property(x => x.CountryRegionCode).HasColumnName("CountryRegionCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(3).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // CountryRegionCurrency
    public class CountryRegionCurrencyConfiguration : EntityTypeConfiguration<CountryRegionCurrency>
    {
        public CountryRegionCurrencyConfiguration()
            : this("Sales")
        {
        }
 
        public CountryRegionCurrencyConfiguration(string schema)
        {
            ToTable(schema + ".CountryRegionCurrency");
            HasKey(x => new { x.CountryRegionCode, x.CurrencyCode });

            Property(x => x.CountryRegionCode).HasColumnName("CountryRegionCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(3).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.CurrencyCode).HasColumnName("CurrencyCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.CountryRegion).WithMany(b => b.CountryRegionCurrencies).HasForeignKey(c => c.CountryRegionCode); // FK_CountryRegionCurrency_CountryRegion_CountryRegionCode
            HasRequired(a => a.Currency).WithMany(b => b.CountryRegionCurrencies).HasForeignKey(c => c.CurrencyCode); // FK_CountryRegionCurrency_Currency_CurrencyCode
        }
    }

    // CreditCard
    public class CreditCardConfiguration : EntityTypeConfiguration<CreditCard>
    {
        public CreditCardConfiguration()
            : this("Sales")
        {
        }
 
        public CreditCardConfiguration(string schema)
        {
            ToTable(schema + ".CreditCard");
            HasKey(x => x.CreditCardId);

            Property(x => x.CreditCardId).HasColumnName("CreditCardID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.CardType).HasColumnName("CardType").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CardNumber).HasColumnName("CardNumber").IsRequired().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.ExpMonth).HasColumnName("ExpMonth").IsRequired().HasColumnType("tinyint");
            Property(x => x.ExpYear).HasColumnName("ExpYear").IsRequired().HasColumnType("smallint");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // Culture
    public class CultureConfiguration : EntityTypeConfiguration<Culture>
    {
        public CultureConfiguration()
            : this("Production")
        {
        }
 
        public CultureConfiguration(string schema)
        {
            ToTable(schema + ".Culture");
            HasKey(x => x.CultureId);

            Property(x => x.CultureId).HasColumnName("CultureID").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(6).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // Currency
    public class CurrencyConfiguration : EntityTypeConfiguration<Currency>
    {
        public CurrencyConfiguration()
            : this("Sales")
        {
        }
 
        public CurrencyConfiguration(string schema)
        {
            ToTable(schema + ".Currency");
            HasKey(x => x.CurrencyCode);

            Property(x => x.CurrencyCode).HasColumnName("CurrencyCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // CurrencyRate
    public class CurrencyRateConfiguration : EntityTypeConfiguration<CurrencyRate>
    {
        public CurrencyRateConfiguration()
            : this("Sales")
        {
        }
 
        public CurrencyRateConfiguration(string schema)
        {
            ToTable(schema + ".CurrencyRate");
            HasKey(x => x.CurrencyRateId);

            Property(x => x.CurrencyRateId).HasColumnName("CurrencyRateID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.CurrencyRateDate).HasColumnName("CurrencyRateDate").IsRequired().HasColumnType("datetime");
            Property(x => x.FromCurrencyCode).HasColumnName("FromCurrencyCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3);
            Property(x => x.ToCurrencyCode).HasColumnName("ToCurrencyCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3);
            Property(x => x.AverageRate).HasColumnName("AverageRate").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.EndOfDayRate).HasColumnName("EndOfDayRate").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Currency_FromCurrencyCode).WithMany(b => b.CurrencyRates_FromCurrencyCode).HasForeignKey(c => c.FromCurrencyCode); // FK_CurrencyRate_Currency_FromCurrencyCode
            HasRequired(a => a.Currency_ToCurrencyCode).WithMany(b => b.CurrencyRates_ToCurrencyCode).HasForeignKey(c => c.ToCurrencyCode); // FK_CurrencyRate_Currency_ToCurrencyCode
        }
    }

    // Customer
    public class CustomerConfiguration : EntityTypeConfiguration<Customer>
    {
        public CustomerConfiguration()
            : this("Sales")
        {
        }
 
        public CustomerConfiguration(string schema)
        {
            ToTable(schema + ".Customer");
            HasKey(x => x.CustomerId);

            Property(x => x.CustomerId).HasColumnName("CustomerID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.TerritoryId).HasColumnName("TerritoryID").IsOptional().HasColumnType("int");
            Property(x => x.AccountNumber).HasColumnName("AccountNumber").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed);
            Property(x => x.CustomerType).HasColumnName("CustomerType").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(1);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.SalesTerritory).WithMany(b => b.Customers).HasForeignKey(c => c.TerritoryId); // FK_Customer_SalesTerritory_TerritoryID
        }
    }

    // CustomerAddress
    public class CustomerAddressConfiguration : EntityTypeConfiguration<CustomerAddress>
    {
        public CustomerAddressConfiguration()
            : this("Sales")
        {
        }
 
        public CustomerAddressConfiguration(string schema)
        {
            ToTable(schema + ".CustomerAddress");
            HasKey(x => new { x.CustomerId, x.AddressId });

            Property(x => x.CustomerId).HasColumnName("CustomerID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.AddressId).HasColumnName("AddressID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.AddressTypeId).HasColumnName("AddressTypeID").IsRequired().HasColumnType("int");
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Address).WithMany(b => b.CustomerAddresses).HasForeignKey(c => c.AddressId); // FK_CustomerAddress_Address_AddressID
            HasRequired(a => a.AddressType).WithMany(b => b.CustomerAddresses).HasForeignKey(c => c.AddressTypeId); // FK_CustomerAddress_AddressType_AddressTypeID
            HasRequired(a => a.Customer).WithMany(b => b.CustomerAddresses).HasForeignKey(c => c.CustomerId); // FK_CustomerAddress_Customer_CustomerID
        }
    }

    // DatabaseLog
    public class DatabaseLogConfiguration : EntityTypeConfiguration<DatabaseLog>
    {
        public DatabaseLogConfiguration()
            : this("dbo")
        {
        }
 
        public DatabaseLogConfiguration(string schema)
        {
            ToTable(schema + ".DatabaseLog");
            HasKey(x => x.DatabaseLogId);

            Property(x => x.DatabaseLogId).HasColumnName("DatabaseLogID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.PostTime).HasColumnName("PostTime").IsRequired().HasColumnType("datetime");
            Property(x => x.DatabaseUser).HasColumnName("DatabaseUser").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.Event).HasColumnName("Event").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.Schema).HasColumnName("Schema").IsOptional().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.Object).HasColumnName("Object").IsOptional().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.Tsql).HasColumnName("TSQL").IsRequired().HasColumnType("nvarchar");
            Property(x => x.XmlEvent).HasColumnName("XmlEvent").IsRequired().HasColumnType("xml");
        }
    }

    // Department
    public class DepartmentConfiguration : EntityTypeConfiguration<Department>
    {
        public DepartmentConfiguration()
            : this("HumanResources")
        {
        }
 
        public DepartmentConfiguration(string schema)
        {
            ToTable(schema + ".Department");
            HasKey(x => x.DepartmentId);

            Property(x => x.DepartmentId).HasColumnName("DepartmentID").IsRequired().HasColumnType("smallint").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.GroupName).HasColumnName("GroupName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // Document
    public class DocumentConfiguration : EntityTypeConfiguration<Document>
    {
        public DocumentConfiguration()
            : this("Production")
        {
        }
 
        public DocumentConfiguration(string schema)
        {
            ToTable(schema + ".Document");
            HasKey(x => x.DocumentId);

            Property(x => x.DocumentId).HasColumnName("DocumentID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName("Title").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.FileName).HasColumnName("FileName").IsRequired().HasColumnType("nvarchar").HasMaxLength(400);
            Property(x => x.FileExtension).HasColumnName("FileExtension").IsRequired().HasColumnType("nvarchar").HasMaxLength(8);
            Property(x => x.Revision).HasColumnName("Revision").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(5);
            Property(x => x.ChangeNumber).HasColumnName("ChangeNumber").IsRequired().HasColumnType("int");
            Property(x => x.Status).HasColumnName("Status").IsRequired().HasColumnType("tinyint");
            Property(x => x.DocumentSummary).HasColumnName("DocumentSummary").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Document_).HasColumnName("Document").IsOptional().HasColumnType("varbinary");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // Employee
    public class EmployeeConfiguration : EntityTypeConfiguration<Employee>
    {
        public EmployeeConfiguration()
            : this("HumanResources")
        {
        }
 
        public EmployeeConfiguration(string schema)
        {
            ToTable(schema + ".Employee");
            HasKey(x => x.EmployeeId);

            Property(x => x.EmployeeId).HasColumnName("EmployeeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.NationalIdNumber).HasColumnName("NationalIDNumber").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.ContactId).HasColumnName("ContactID").IsRequired().HasColumnType("int");
            Property(x => x.LoginId).HasColumnName("LoginID").IsRequired().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.ManagerId).HasColumnName("ManagerID").IsOptional().HasColumnType("int");
            Property(x => x.Title).HasColumnName("Title").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.BirthDate).HasColumnName("BirthDate").IsRequired().HasColumnType("datetime");
            Property(x => x.MaritalStatus).HasColumnName("MaritalStatus").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(1);
            Property(x => x.Gender).HasColumnName("Gender").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(1);
            Property(x => x.HireDate).HasColumnName("HireDate").IsRequired().HasColumnType("datetime");
            Property(x => x.SalariedFlag).HasColumnName("SalariedFlag").IsRequired().HasColumnType("bit");
            Property(x => x.VacationHours).HasColumnName("VacationHours").IsRequired().HasColumnType("smallint");
            Property(x => x.SickLeaveHours).HasColumnName("SickLeaveHours").IsRequired().HasColumnType("smallint");
            Property(x => x.CurrentFlag).HasColumnName("CurrentFlag").IsRequired().HasColumnType("bit");
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.Employee_ManagerId).WithMany(b => b.Employees).HasForeignKey(c => c.ManagerId); // FK_Employee_Employee_ManagerID
            HasRequired(a => a.Contact).WithMany(b => b.Employees).HasForeignKey(c => c.ContactId); // FK_Employee_Contact_ContactID
        }
    }

    // EmployeeAddress
    public class EmployeeAddressConfiguration : EntityTypeConfiguration<EmployeeAddress>
    {
        public EmployeeAddressConfiguration()
            : this("HumanResources")
        {
        }
 
        public EmployeeAddressConfiguration(string schema)
        {
            ToTable(schema + ".EmployeeAddress");
            HasKey(x => new { x.EmployeeId, x.AddressId });

            Property(x => x.EmployeeId).HasColumnName("EmployeeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.AddressId).HasColumnName("AddressID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Address).WithMany(b => b.EmployeeAddresses).HasForeignKey(c => c.AddressId); // FK_EmployeeAddress_Address_AddressID
            HasRequired(a => a.Employee).WithMany(b => b.EmployeeAddresses).HasForeignKey(c => c.EmployeeId); // FK_EmployeeAddress_Employee_EmployeeID
        }
    }

    // EmployeeDepartmentHistory
    public class EmployeeDepartmentHistoryConfiguration : EntityTypeConfiguration<EmployeeDepartmentHistory>
    {
        public EmployeeDepartmentHistoryConfiguration()
            : this("HumanResources")
        {
        }
 
        public EmployeeDepartmentHistoryConfiguration(string schema)
        {
            ToTable(schema + ".EmployeeDepartmentHistory");
            HasKey(x => new { x.EmployeeId, x.StartDate, x.DepartmentId, x.ShiftId });

            Property(x => x.EmployeeId).HasColumnName("EmployeeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.DepartmentId).HasColumnName("DepartmentID").IsRequired().HasColumnType("smallint").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ShiftId).HasColumnName("ShiftID").IsRequired().HasColumnType("tinyint").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.StartDate).HasColumnName("StartDate").IsRequired().HasColumnType("datetime").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName("EndDate").IsOptional().HasColumnType("datetime");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Department).WithMany(b => b.EmployeeDepartmentHistories).HasForeignKey(c => c.DepartmentId); // FK_EmployeeDepartmentHistory_Department_DepartmentID
            HasRequired(a => a.Employee).WithMany(b => b.EmployeeDepartmentHistories).HasForeignKey(c => c.EmployeeId); // FK_EmployeeDepartmentHistory_Employee_EmployeeID
            HasRequired(a => a.Shift).WithMany(b => b.EmployeeDepartmentHistories).HasForeignKey(c => c.ShiftId); // FK_EmployeeDepartmentHistory_Shift_ShiftID
        }
    }

    // EmployeePayHistory
    public class EmployeePayHistoryConfiguration : EntityTypeConfiguration<EmployeePayHistory>
    {
        public EmployeePayHistoryConfiguration()
            : this("HumanResources")
        {
        }
 
        public EmployeePayHistoryConfiguration(string schema)
        {
            ToTable(schema + ".EmployeePayHistory");
            HasKey(x => new { x.EmployeeId, x.RateChangeDate });

            Property(x => x.EmployeeId).HasColumnName("EmployeeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.RateChangeDate).HasColumnName("RateChangeDate").IsRequired().HasColumnType("datetime").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Rate).HasColumnName("Rate").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.PayFrequency).HasColumnName("PayFrequency").IsRequired().HasColumnType("tinyint");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Employee).WithMany(b => b.EmployeePayHistories).HasForeignKey(c => c.EmployeeId); // FK_EmployeePayHistory_Employee_EmployeeID
        }
    }

    // ErrorLog
    public class ErrorLogConfiguration : EntityTypeConfiguration<ErrorLog>
    {
        public ErrorLogConfiguration()
            : this("dbo")
        {
        }
 
        public ErrorLogConfiguration(string schema)
        {
            ToTable(schema + ".ErrorLog");
            HasKey(x => x.ErrorLogId);

            Property(x => x.ErrorLogId).HasColumnName("ErrorLogID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ErrorTime).HasColumnName("ErrorTime").IsRequired().HasColumnType("datetime");
            Property(x => x.UserName).HasColumnName("UserName").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.ErrorNumber).HasColumnName("ErrorNumber").IsRequired().HasColumnType("int");
            Property(x => x.ErrorSeverity).HasColumnName("ErrorSeverity").IsOptional().HasColumnType("int");
            Property(x => x.ErrorState).HasColumnName("ErrorState").IsOptional().HasColumnType("int");
            Property(x => x.ErrorProcedure).HasColumnName("ErrorProcedure").IsOptional().HasColumnType("nvarchar").HasMaxLength(126);
            Property(x => x.ErrorLine).HasColumnName("ErrorLine").IsOptional().HasColumnType("int");
            Property(x => x.ErrorMessage).HasColumnName("ErrorMessage").IsRequired().HasColumnType("nvarchar").HasMaxLength(4000);
        }
    }

    // Illustration
    public class IllustrationConfiguration : EntityTypeConfiguration<Illustration>
    {
        public IllustrationConfiguration()
            : this("Production")
        {
        }
 
        public IllustrationConfiguration(string schema)
        {
            ToTable(schema + ".Illustration");
            HasKey(x => x.IllustrationId);

            Property(x => x.IllustrationId).HasColumnName("IllustrationID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Diagram).HasColumnName("Diagram").IsOptional().HasColumnType("xml");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // Individual
    public class IndividualConfiguration : EntityTypeConfiguration<Individual>
    {
        public IndividualConfiguration()
            : this("Sales")
        {
        }
 
        public IndividualConfiguration(string schema)
        {
            ToTable(schema + ".Individual");
            HasKey(x => x.CustomerId);

            Property(x => x.CustomerId).HasColumnName("CustomerID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ContactId).HasColumnName("ContactID").IsRequired().HasColumnType("int");
            Property(x => x.Demographics).HasColumnName("Demographics").IsOptional().HasColumnType("xml");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Contact).WithMany(b => b.Individuals).HasForeignKey(c => c.ContactId); // FK_Individual_Contact_ContactID
            HasRequired(a => a.Customer).WithOptional(b => b.Individual); // FK_Individual_Customer_CustomerID
        }
    }

    // JobCandidate
    public class JobCandidateConfiguration : EntityTypeConfiguration<JobCandidate>
    {
        public JobCandidateConfiguration()
            : this("HumanResources")
        {
        }
 
        public JobCandidateConfiguration(string schema)
        {
            ToTable(schema + ".JobCandidate");
            HasKey(x => x.JobCandidateId);

            Property(x => x.JobCandidateId).HasColumnName("JobCandidateID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.EmployeeId).HasColumnName("EmployeeID").IsOptional().HasColumnType("int");
            Property(x => x.Resume).HasColumnName("Resume").IsOptional().HasColumnType("xml");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.Employee).WithMany(b => b.JobCandidates).HasForeignKey(c => c.EmployeeId); // FK_JobCandidate_Employee_EmployeeID
        }
    }

    // Location
    public class LocationConfiguration : EntityTypeConfiguration<Location>
    {
        public LocationConfiguration()
            : this("Production")
        {
        }
 
        public LocationConfiguration(string schema)
        {
            ToTable(schema + ".Location");
            HasKey(x => x.LocationId);

            Property(x => x.LocationId).HasColumnName("LocationID").IsRequired().HasColumnType("smallint").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CostRate).HasColumnName("CostRate").IsRequired().HasColumnType("smallmoney").HasPrecision(10,4);
            Property(x => x.Availability).HasColumnName("Availability").IsRequired().HasColumnType("decimal").HasPrecision(8,2);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // Product
    public class ProductConfiguration : EntityTypeConfiguration<Product>
    {
        public ProductConfiguration()
            : this("Production")
        {
        }
 
        public ProductConfiguration(string schema)
        {
            ToTable(schema + ".Product");
            HasKey(x => x.ProductId);

            Property(x => x.ProductId).HasColumnName("ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ProductNumber).HasColumnName("ProductNumber").IsRequired().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.MakeFlag).HasColumnName("MakeFlag").IsRequired().HasColumnType("bit");
            Property(x => x.FinishedGoodsFlag).HasColumnName("FinishedGoodsFlag").IsRequired().HasColumnType("bit");
            Property(x => x.Color).HasColumnName("Color").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.SafetyStockLevel).HasColumnName("SafetyStockLevel").IsRequired().HasColumnType("smallint");
            Property(x => x.ReorderPoint).HasColumnName("ReorderPoint").IsRequired().HasColumnType("smallint");
            Property(x => x.StandardCost).HasColumnName("StandardCost").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ListPrice).HasColumnName("ListPrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Size).HasColumnName("Size").IsOptional().HasColumnType("nvarchar").HasMaxLength(5);
            Property(x => x.SizeUnitMeasureCode).HasColumnName("SizeUnitMeasureCode").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(3);
            Property(x => x.WeightUnitMeasureCode).HasColumnName("WeightUnitMeasureCode").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(3);
            Property(x => x.Weight).HasColumnName("Weight").IsOptional().HasColumnType("decimal").HasPrecision(8,2);
            Property(x => x.DaysToManufacture).HasColumnName("DaysToManufacture").IsRequired().HasColumnType("int");
            Property(x => x.ProductLine).HasColumnName("ProductLine").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(2);
            Property(x => x.Class).HasColumnName("Class").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(2);
            Property(x => x.Style).HasColumnName("Style").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(2);
            Property(x => x.ProductSubcategoryId).HasColumnName("ProductSubcategoryID").IsOptional().HasColumnType("int");
            Property(x => x.ProductModelId).HasColumnName("ProductModelID").IsOptional().HasColumnType("int");
            Property(x => x.SellStartDate).HasColumnName("SellStartDate").IsRequired().HasColumnType("datetime");
            Property(x => x.SellEndDate).HasColumnName("SellEndDate").IsOptional().HasColumnType("datetime");
            Property(x => x.DiscontinuedDate).HasColumnName("DiscontinuedDate").IsOptional().HasColumnType("datetime");
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.ProductModel).WithMany(b => b.Products).HasForeignKey(c => c.ProductModelId); // FK_Product_ProductModel_ProductModelID
            HasOptional(a => a.ProductSubcategory).WithMany(b => b.Products).HasForeignKey(c => c.ProductSubcategoryId); // FK_Product_ProductSubcategory_ProductSubcategoryID
            HasOptional(a => a.UnitMeasure_SizeUnitMeasureCode).WithMany(b => b.Products_SizeUnitMeasureCode).HasForeignKey(c => c.SizeUnitMeasureCode); // FK_Product_UnitMeasure_SizeUnitMeasureCode
            HasOptional(a => a.UnitMeasure_WeightUnitMeasureCode).WithMany(b => b.Products_WeightUnitMeasureCode).HasForeignKey(c => c.WeightUnitMeasureCode); // FK_Product_UnitMeasure_WeightUnitMeasureCode
        }
    }

    // ProductCategory
    public class ProductCategoryConfiguration : EntityTypeConfiguration<ProductCategory>
    {
        public ProductCategoryConfiguration()
            : this("Production")
        {
        }
 
        public ProductCategoryConfiguration(string schema)
        {
            ToTable(schema + ".ProductCategory");
            HasKey(x => x.ProductCategoryId);

            Property(x => x.ProductCategoryId).HasColumnName("ProductCategoryID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // ProductCostHistory
    public class ProductCostHistoryConfiguration : EntityTypeConfiguration<ProductCostHistory>
    {
        public ProductCostHistoryConfiguration()
            : this("Production")
        {
        }
 
        public ProductCostHistoryConfiguration(string schema)
        {
            ToTable(schema + ".ProductCostHistory");
            HasKey(x => new { x.ProductId, x.StartDate });

            Property(x => x.ProductId).HasColumnName("ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.StartDate).HasColumnName("StartDate").IsRequired().HasColumnType("datetime").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName("EndDate").IsOptional().HasColumnType("datetime");
            Property(x => x.StandardCost).HasColumnName("StandardCost").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Product).WithMany(b => b.ProductCostHistories).HasForeignKey(c => c.ProductId); // FK_ProductCostHistory_Product_ProductID
        }
    }

    // ProductDescription
    public class ProductDescriptionConfiguration : EntityTypeConfiguration<ProductDescription>
    {
        public ProductDescriptionConfiguration()
            : this("Production")
        {
        }
 
        public ProductDescriptionConfiguration(string schema)
        {
            ToTable(schema + ".ProductDescription");
            HasKey(x => x.ProductDescriptionId);

            Property(x => x.ProductDescriptionId).HasColumnName("ProductDescriptionID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName("Description").IsRequired().HasColumnType("nvarchar").HasMaxLength(400);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // ProductDocument
    public class ProductDocumentConfiguration : EntityTypeConfiguration<ProductDocument>
    {
        public ProductDocumentConfiguration()
            : this("Production")
        {
        }
 
        public ProductDocumentConfiguration(string schema)
        {
            ToTable(schema + ".ProductDocument");
            HasKey(x => new { x.ProductId, x.DocumentId });

            Property(x => x.ProductId).HasColumnName("ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.DocumentId).HasColumnName("DocumentID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Document).WithMany(b => b.ProductDocuments).HasForeignKey(c => c.DocumentId); // FK_ProductDocument_Document_DocumentID
            HasRequired(a => a.Product).WithMany(b => b.ProductDocuments).HasForeignKey(c => c.ProductId); // FK_ProductDocument_Product_ProductID
        }
    }

    // ProductInventory
    public class ProductInventoryConfiguration : EntityTypeConfiguration<ProductInventory>
    {
        public ProductInventoryConfiguration()
            : this("Production")
        {
        }
 
        public ProductInventoryConfiguration(string schema)
        {
            ToTable(schema + ".ProductInventory");
            HasKey(x => new { x.ProductId, x.LocationId });

            Property(x => x.ProductId).HasColumnName("ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.LocationId).HasColumnName("LocationID").IsRequired().HasColumnType("smallint").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Shelf).HasColumnName("Shelf").IsRequired().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.Bin).HasColumnName("Bin").IsRequired().HasColumnType("tinyint");
            Property(x => x.Quantity).HasColumnName("Quantity").IsRequired().HasColumnType("smallint");
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Location).WithMany(b => b.ProductInventories).HasForeignKey(c => c.LocationId); // FK_ProductInventory_Location_LocationID
            HasRequired(a => a.Product).WithMany(b => b.ProductInventories).HasForeignKey(c => c.ProductId); // FK_ProductInventory_Product_ProductID
        }
    }

    // ProductListPriceHistory
    public class ProductListPriceHistoryConfiguration : EntityTypeConfiguration<ProductListPriceHistory>
    {
        public ProductListPriceHistoryConfiguration()
            : this("Production")
        {
        }
 
        public ProductListPriceHistoryConfiguration(string schema)
        {
            ToTable(schema + ".ProductListPriceHistory");
            HasKey(x => new { x.ProductId, x.StartDate });

            Property(x => x.ProductId).HasColumnName("ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.StartDate).HasColumnName("StartDate").IsRequired().HasColumnType("datetime").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName("EndDate").IsOptional().HasColumnType("datetime");
            Property(x => x.ListPrice).HasColumnName("ListPrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Product).WithMany(b => b.ProductListPriceHistories).HasForeignKey(c => c.ProductId); // FK_ProductListPriceHistory_Product_ProductID
        }
    }

    // ProductModel
    public class ProductModelConfiguration : EntityTypeConfiguration<ProductModel>
    {
        public ProductModelConfiguration()
            : this("Production")
        {
        }
 
        public ProductModelConfiguration(string schema)
        {
            ToTable(schema + ".ProductModel");
            HasKey(x => x.ProductModelId);

            Property(x => x.ProductModelId).HasColumnName("ProductModelID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CatalogDescription).HasColumnName("CatalogDescription").IsOptional().HasColumnType("xml");
            Property(x => x.Instructions).HasColumnName("Instructions").IsOptional().HasColumnType("xml");
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // ProductModelIllustration
    public class ProductModelIllustrationConfiguration : EntityTypeConfiguration<ProductModelIllustration>
    {
        public ProductModelIllustrationConfiguration()
            : this("Production")
        {
        }
 
        public ProductModelIllustrationConfiguration(string schema)
        {
            ToTable(schema + ".ProductModelIllustration");
            HasKey(x => new { x.ProductModelId, x.IllustrationId });

            Property(x => x.ProductModelId).HasColumnName("ProductModelID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.IllustrationId).HasColumnName("IllustrationID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Illustration).WithMany(b => b.ProductModelIllustrations).HasForeignKey(c => c.IllustrationId); // FK_ProductModelIllustration_Illustration_IllustrationID
            HasRequired(a => a.ProductModel).WithMany(b => b.ProductModelIllustrations).HasForeignKey(c => c.ProductModelId); // FK_ProductModelIllustration_ProductModel_ProductModelID
        }
    }

    // ProductModelProductDescriptionCulture
    public class ProductModelProductDescriptionCultureConfiguration : EntityTypeConfiguration<ProductModelProductDescriptionCulture>
    {
        public ProductModelProductDescriptionCultureConfiguration()
            : this("Production")
        {
        }
 
        public ProductModelProductDescriptionCultureConfiguration(string schema)
        {
            ToTable(schema + ".ProductModelProductDescriptionCulture");
            HasKey(x => new { x.ProductModelId, x.ProductDescriptionId, x.CultureId });

            Property(x => x.ProductModelId).HasColumnName("ProductModelID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ProductDescriptionId).HasColumnName("ProductDescriptionID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.CultureId).HasColumnName("CultureID").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(6).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Culture).WithMany(b => b.ProductModelProductDescriptionCultures).HasForeignKey(c => c.CultureId); // FK_ProductModelProductDescriptionCulture_Culture_CultureID
            HasRequired(a => a.ProductDescription).WithMany(b => b.ProductModelProductDescriptionCultures).HasForeignKey(c => c.ProductDescriptionId); // FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID
            HasRequired(a => a.ProductModel).WithMany(b => b.ProductModelProductDescriptionCultures).HasForeignKey(c => c.ProductModelId); // FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID
        }
    }

    // ProductPhoto
    public class ProductPhotoConfiguration : EntityTypeConfiguration<ProductPhoto>
    {
        public ProductPhotoConfiguration()
            : this("Production")
        {
        }
 
        public ProductPhotoConfiguration(string schema)
        {
            ToTable(schema + ".ProductPhoto");
            HasKey(x => x.ProductPhotoId);

            Property(x => x.ProductPhotoId).HasColumnName("ProductPhotoID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ThumbNailPhoto).HasColumnName("ThumbNailPhoto").IsOptional().HasColumnType("varbinary");
            Property(x => x.ThumbnailPhotoFileName).HasColumnName("ThumbnailPhotoFileName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LargePhoto).HasColumnName("LargePhoto").IsOptional().HasColumnType("varbinary");
            Property(x => x.LargePhotoFileName).HasColumnName("LargePhotoFileName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // ProductProductPhoto
    public class ProductProductPhotoConfiguration : EntityTypeConfiguration<ProductProductPhoto>
    {
        public ProductProductPhotoConfiguration()
            : this("Production")
        {
        }
 
        public ProductProductPhotoConfiguration(string schema)
        {
            ToTable(schema + ".ProductProductPhoto");
            HasKey(x => new { x.ProductId, x.ProductPhotoId });

            Property(x => x.ProductId).HasColumnName("ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ProductPhotoId).HasColumnName("ProductPhotoID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Primary).HasColumnName("Primary").IsRequired().HasColumnType("bit");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Product).WithMany(b => b.ProductProductPhotoes).HasForeignKey(c => c.ProductId); // FK_ProductProductPhoto_Product_ProductID
            HasRequired(a => a.ProductPhoto).WithMany(b => b.ProductProductPhotoes).HasForeignKey(c => c.ProductPhotoId); // FK_ProductProductPhoto_ProductPhoto_ProductPhotoID
        }
    }

    // ProductReview
    public class ProductReviewConfiguration : EntityTypeConfiguration<ProductReview>
    {
        public ProductReviewConfiguration()
            : this("Production")
        {
        }
 
        public ProductReviewConfiguration(string schema)
        {
            ToTable(schema + ".ProductReview");
            HasKey(x => x.ProductReviewId);

            Property(x => x.ProductReviewId).HasColumnName("ProductReviewID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ProductId).HasColumnName("ProductID").IsRequired().HasColumnType("int");
            Property(x => x.ReviewerName).HasColumnName("ReviewerName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ReviewDate).HasColumnName("ReviewDate").IsRequired().HasColumnType("datetime");
            Property(x => x.EmailAddress).HasColumnName("EmailAddress").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Rating).HasColumnName("Rating").IsRequired().HasColumnType("int");
            Property(x => x.Comments).HasColumnName("Comments").IsOptional().HasColumnType("nvarchar").HasMaxLength(3850);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Product).WithMany(b => b.ProductReviews).HasForeignKey(c => c.ProductId); // FK_ProductReview_Product_ProductID
        }
    }

    // ProductSubcategory
    public class ProductSubcategoryConfiguration : EntityTypeConfiguration<ProductSubcategory>
    {
        public ProductSubcategoryConfiguration()
            : this("Production")
        {
        }
 
        public ProductSubcategoryConfiguration(string schema)
        {
            ToTable(schema + ".ProductSubcategory");
            HasKey(x => x.ProductSubcategoryId);

            Property(x => x.ProductSubcategoryId).HasColumnName("ProductSubcategoryID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ProductCategoryId).HasColumnName("ProductCategoryID").IsRequired().HasColumnType("int");
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.ProductCategory).WithMany(b => b.ProductSubcategories).HasForeignKey(c => c.ProductCategoryId); // FK_ProductSubcategory_ProductCategory_ProductCategoryID
        }
    }

    // ProductVendor
    public class ProductVendorConfiguration : EntityTypeConfiguration<ProductVendor>
    {
        public ProductVendorConfiguration()
            : this("Purchasing")
        {
        }
 
        public ProductVendorConfiguration(string schema)
        {
            ToTable(schema + ".ProductVendor");
            HasKey(x => new { x.ProductId, x.VendorId });

            Property(x => x.ProductId).HasColumnName("ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.VendorId).HasColumnName("VendorID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.AverageLeadTime).HasColumnName("AverageLeadTime").IsRequired().HasColumnType("int");
            Property(x => x.StandardPrice).HasColumnName("StandardPrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.LastReceiptCost).HasColumnName("LastReceiptCost").IsOptional().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.LastReceiptDate).HasColumnName("LastReceiptDate").IsOptional().HasColumnType("datetime");
            Property(x => x.MinOrderQty).HasColumnName("MinOrderQty").IsRequired().HasColumnType("int");
            Property(x => x.MaxOrderQty).HasColumnName("MaxOrderQty").IsRequired().HasColumnType("int");
            Property(x => x.OnOrderQty).HasColumnName("OnOrderQty").IsOptional().HasColumnType("int");
            Property(x => x.UnitMeasureCode).HasColumnName("UnitMeasureCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Product).WithMany(b => b.ProductVendors).HasForeignKey(c => c.ProductId); // FK_ProductVendor_Product_ProductID
            HasRequired(a => a.UnitMeasure).WithMany(b => b.ProductVendors).HasForeignKey(c => c.UnitMeasureCode); // FK_ProductVendor_UnitMeasure_UnitMeasureCode
            HasRequired(a => a.Vendor).WithMany(b => b.ProductVendors).HasForeignKey(c => c.VendorId); // FK_ProductVendor_Vendor_VendorID
        }
    }

    // PurchaseOrderDetail
    public class PurchaseOrderDetailConfiguration : EntityTypeConfiguration<PurchaseOrderDetail>
    {
        public PurchaseOrderDetailConfiguration()
            : this("Purchasing")
        {
        }
 
        public PurchaseOrderDetailConfiguration(string schema)
        {
            ToTable(schema + ".PurchaseOrderDetail");
            HasKey(x => new { x.PurchaseOrderId, x.PurchaseOrderDetailId });

            Property(x => x.PurchaseOrderId).HasColumnName("PurchaseOrderID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.PurchaseOrderDetailId).HasColumnName("PurchaseOrderDetailID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.DueDate).HasColumnName("DueDate").IsRequired().HasColumnType("datetime");
            Property(x => x.OrderQty).HasColumnName("OrderQty").IsRequired().HasColumnType("smallint");
            Property(x => x.ProductId).HasColumnName("ProductID").IsRequired().HasColumnType("int");
            Property(x => x.UnitPrice).HasColumnName("UnitPrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.LineTotal).HasColumnName("LineTotal").IsRequired().HasColumnType("money").HasPrecision(19,4).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed);
            Property(x => x.ReceivedQty).HasColumnName("ReceivedQty").IsRequired().HasColumnType("decimal").HasPrecision(8,2);
            Property(x => x.RejectedQty).HasColumnName("RejectedQty").IsRequired().HasColumnType("decimal").HasPrecision(8,2);
            Property(x => x.StockedQty).HasColumnName("StockedQty").IsRequired().HasColumnType("decimal").HasPrecision(9,2).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Product).WithMany(b => b.PurchaseOrderDetails).HasForeignKey(c => c.ProductId); // FK_PurchaseOrderDetail_Product_ProductID
            HasRequired(a => a.PurchaseOrderHeader).WithMany(b => b.PurchaseOrderDetails).HasForeignKey(c => c.PurchaseOrderId); // FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID
        }
    }

    // PurchaseOrderHeader
    public class PurchaseOrderHeaderConfiguration : EntityTypeConfiguration<PurchaseOrderHeader>
    {
        public PurchaseOrderHeaderConfiguration()
            : this("Purchasing")
        {
        }
 
        public PurchaseOrderHeaderConfiguration(string schema)
        {
            ToTable(schema + ".PurchaseOrderHeader");
            HasKey(x => x.PurchaseOrderId);

            Property(x => x.PurchaseOrderId).HasColumnName("PurchaseOrderID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.RevisionNumber).HasColumnName("RevisionNumber").IsRequired().HasColumnType("tinyint");
            Property(x => x.Status).HasColumnName("Status").IsRequired().HasColumnType("tinyint");
            Property(x => x.EmployeeId).HasColumnName("EmployeeID").IsRequired().HasColumnType("int");
            Property(x => x.VendorId).HasColumnName("VendorID").IsRequired().HasColumnType("int");
            Property(x => x.ShipMethodId).HasColumnName("ShipMethodID").IsRequired().HasColumnType("int");
            Property(x => x.OrderDate).HasColumnName("OrderDate").IsRequired().HasColumnType("datetime");
            Property(x => x.ShipDate).HasColumnName("ShipDate").IsOptional().HasColumnType("datetime");
            Property(x => x.SubTotal).HasColumnName("SubTotal").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.TaxAmt).HasColumnName("TaxAmt").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Freight).HasColumnName("Freight").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.TotalDue).HasColumnName("TotalDue").IsRequired().HasColumnType("money").HasPrecision(19,4).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Employee).WithMany(b => b.PurchaseOrderHeaders).HasForeignKey(c => c.EmployeeId); // FK_PurchaseOrderHeader_Employee_EmployeeID
            HasRequired(a => a.ShipMethod).WithMany(b => b.PurchaseOrderHeaders).HasForeignKey(c => c.ShipMethodId); // FK_PurchaseOrderHeader_ShipMethod_ShipMethodID
            HasRequired(a => a.Vendor).WithMany(b => b.PurchaseOrderHeaders).HasForeignKey(c => c.VendorId); // FK_PurchaseOrderHeader_Vendor_VendorID
        }
    }

    // SalesOrderDetail
    public class SalesOrderDetailConfiguration : EntityTypeConfiguration<SalesOrderDetail>
    {
        public SalesOrderDetailConfiguration()
            : this("Sales")
        {
        }
 
        public SalesOrderDetailConfiguration(string schema)
        {
            ToTable(schema + ".SalesOrderDetail");
            HasKey(x => new { x.SalesOrderId, x.SalesOrderDetailId });

            Property(x => x.SalesOrderId).HasColumnName("SalesOrderID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.SalesOrderDetailId).HasColumnName("SalesOrderDetailID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.CarrierTrackingNumber).HasColumnName("CarrierTrackingNumber").IsOptional().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.OrderQty).HasColumnName("OrderQty").IsRequired().HasColumnType("smallint");
            Property(x => x.ProductId).HasColumnName("ProductID").IsRequired().HasColumnType("int");
            Property(x => x.SpecialOfferId).HasColumnName("SpecialOfferID").IsRequired().HasColumnType("int");
            Property(x => x.UnitPrice).HasColumnName("UnitPrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.UnitPriceDiscount).HasColumnName("UnitPriceDiscount").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.LineTotal).HasColumnName("LineTotal").IsRequired().HasColumnType("numeric").HasPrecision(38,6).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.SalesOrderHeader).WithMany(b => b.SalesOrderDetails).HasForeignKey(c => c.SalesOrderId); // FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID
            HasRequired(a => a.SpecialOfferProduct).WithMany(b => b.SalesOrderDetails).HasForeignKey(c => new { c.SpecialOfferId, c.ProductId }); // FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID
        }
    }

    // SalesOrderHeader
    public class SalesOrderHeaderConfiguration : EntityTypeConfiguration<SalesOrderHeader>
    {
        public SalesOrderHeaderConfiguration()
            : this("Sales")
        {
        }
 
        public SalesOrderHeaderConfiguration(string schema)
        {
            ToTable(schema + ".SalesOrderHeader");
            HasKey(x => x.SalesOrderId);

            Property(x => x.SalesOrderId).HasColumnName("SalesOrderID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.RevisionNumber).HasColumnName("RevisionNumber").IsRequired().HasColumnType("tinyint");
            Property(x => x.OrderDate).HasColumnName("OrderDate").IsRequired().HasColumnType("datetime");
            Property(x => x.DueDate).HasColumnName("DueDate").IsRequired().HasColumnType("datetime");
            Property(x => x.ShipDate).HasColumnName("ShipDate").IsOptional().HasColumnType("datetime");
            Property(x => x.Status).HasColumnName("Status").IsRequired().HasColumnType("tinyint");
            Property(x => x.OnlineOrderFlag).HasColumnName("OnlineOrderFlag").IsRequired().HasColumnType("bit");
            Property(x => x.SalesOrderNumber).HasColumnName("SalesOrderNumber").IsRequired().HasColumnType("nvarchar").HasMaxLength(25).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed);
            Property(x => x.PurchaseOrderNumber).HasColumnName("PurchaseOrderNumber").IsOptional().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.AccountNumber).HasColumnName("AccountNumber").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.CustomerId).HasColumnName("CustomerID").IsRequired().HasColumnType("int");
            Property(x => x.ContactId).HasColumnName("ContactID").IsRequired().HasColumnType("int");
            Property(x => x.SalesPersonId).HasColumnName("SalesPersonID").IsOptional().HasColumnType("int");
            Property(x => x.TerritoryId).HasColumnName("TerritoryID").IsOptional().HasColumnType("int");
            Property(x => x.BillToAddressId).HasColumnName("BillToAddressID").IsRequired().HasColumnType("int");
            Property(x => x.ShipToAddressId).HasColumnName("ShipToAddressID").IsRequired().HasColumnType("int");
            Property(x => x.ShipMethodId).HasColumnName("ShipMethodID").IsRequired().HasColumnType("int");
            Property(x => x.CreditCardId).HasColumnName("CreditCardID").IsOptional().HasColumnType("int");
            Property(x => x.CreditCardApprovalCode).HasColumnName("CreditCardApprovalCode").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(15);
            Property(x => x.CurrencyRateId).HasColumnName("CurrencyRateID").IsOptional().HasColumnType("int");
            Property(x => x.SubTotal).HasColumnName("SubTotal").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.TaxAmt).HasColumnName("TaxAmt").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Freight).HasColumnName("Freight").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.TotalDue).HasColumnName("TotalDue").IsRequired().HasColumnType("money").HasPrecision(19,4).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed);
            Property(x => x.Comment).HasColumnName("Comment").IsOptional().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.CreditCard).WithMany(b => b.SalesOrderHeaders).HasForeignKey(c => c.CreditCardId); // FK_SalesOrderHeader_CreditCard_CreditCardID
            HasOptional(a => a.CurrencyRate).WithMany(b => b.SalesOrderHeaders).HasForeignKey(c => c.CurrencyRateId); // FK_SalesOrderHeader_CurrencyRate_CurrencyRateID
            HasOptional(a => a.SalesPerson).WithMany(b => b.SalesOrderHeaders).HasForeignKey(c => c.SalesPersonId); // FK_SalesOrderHeader_SalesPerson_SalesPersonID
            HasOptional(a => a.SalesTerritory).WithMany(b => b.SalesOrderHeaders).HasForeignKey(c => c.TerritoryId); // FK_SalesOrderHeader_SalesTerritory_TerritoryID
            HasRequired(a => a.Address_BillToAddressId).WithMany(b => b.SalesOrderHeaders_BillToAddressId).HasForeignKey(c => c.BillToAddressId); // FK_SalesOrderHeader_Address_BillToAddressID
            HasRequired(a => a.Address_ShipToAddressId).WithMany(b => b.SalesOrderHeaders_ShipToAddressId).HasForeignKey(c => c.ShipToAddressId); // FK_SalesOrderHeader_Address_ShipToAddressID
            HasRequired(a => a.Contact).WithMany(b => b.SalesOrderHeaders).HasForeignKey(c => c.ContactId); // FK_SalesOrderHeader_Contact_ContactID
            HasRequired(a => a.Customer).WithMany(b => b.SalesOrderHeaders).HasForeignKey(c => c.CustomerId); // FK_SalesOrderHeader_Customer_CustomerID
            HasRequired(a => a.ShipMethod).WithMany(b => b.SalesOrderHeaders).HasForeignKey(c => c.ShipMethodId); // FK_SalesOrderHeader_ShipMethod_ShipMethodID
        }
    }

    // SalesOrderHeaderSalesReason
    public class SalesOrderHeaderSalesReasonConfiguration : EntityTypeConfiguration<SalesOrderHeaderSalesReason>
    {
        public SalesOrderHeaderSalesReasonConfiguration()
            : this("Sales")
        {
        }
 
        public SalesOrderHeaderSalesReasonConfiguration(string schema)
        {
            ToTable(schema + ".SalesOrderHeaderSalesReason");
            HasKey(x => new { x.SalesOrderId, x.SalesReasonId });

            Property(x => x.SalesOrderId).HasColumnName("SalesOrderID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.SalesReasonId).HasColumnName("SalesReasonID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.SalesOrderHeader).WithMany(b => b.SalesOrderHeaderSalesReasons).HasForeignKey(c => c.SalesOrderId); // FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID
            HasRequired(a => a.SalesReason).WithMany(b => b.SalesOrderHeaderSalesReasons).HasForeignKey(c => c.SalesReasonId); // FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID
        }
    }

    // SalesPerson
    public class SalesPersonConfiguration : EntityTypeConfiguration<SalesPerson>
    {
        public SalesPersonConfiguration()
            : this("Sales")
        {
        }
 
        public SalesPersonConfiguration(string schema)
        {
            ToTable(schema + ".SalesPerson");
            HasKey(x => x.SalesPersonId);

            Property(x => x.SalesPersonId).HasColumnName("SalesPersonID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.TerritoryId).HasColumnName("TerritoryID").IsOptional().HasColumnType("int");
            Property(x => x.SalesQuota).HasColumnName("SalesQuota").IsOptional().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Bonus).HasColumnName("Bonus").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.CommissionPct).HasColumnName("CommissionPct").IsRequired().HasColumnType("smallmoney").HasPrecision(10,4);
            Property(x => x.SalesYtd).HasColumnName("SalesYTD").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.SalesLastYear).HasColumnName("SalesLastYear").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.SalesTerritory).WithMany(b => b.SalesPersons).HasForeignKey(c => c.TerritoryId); // FK_SalesPerson_SalesTerritory_TerritoryID
            HasRequired(a => a.Employee).WithOptional(b => b.SalesPerson); // FK_SalesPerson_Employee_SalesPersonID
        }
    }

    // SalesPersonQuotaHistory
    public class SalesPersonQuotaHistoryConfiguration : EntityTypeConfiguration<SalesPersonQuotaHistory>
    {
        public SalesPersonQuotaHistoryConfiguration()
            : this("Sales")
        {
        }
 
        public SalesPersonQuotaHistoryConfiguration(string schema)
        {
            ToTable(schema + ".SalesPersonQuotaHistory");
            HasKey(x => new { x.SalesPersonId, x.QuotaDate });

            Property(x => x.SalesPersonId).HasColumnName("SalesPersonID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.QuotaDate).HasColumnName("QuotaDate").IsRequired().HasColumnType("datetime").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.SalesQuota).HasColumnName("SalesQuota").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.SalesPerson).WithMany(b => b.SalesPersonQuotaHistories).HasForeignKey(c => c.SalesPersonId); // FK_SalesPersonQuotaHistory_SalesPerson_SalesPersonID
        }
    }

    // SalesReason
    public class SalesReasonConfiguration : EntityTypeConfiguration<SalesReason>
    {
        public SalesReasonConfiguration()
            : this("Sales")
        {
        }
 
        public SalesReasonConfiguration(string schema)
        {
            ToTable(schema + ".SalesReason");
            HasKey(x => x.SalesReasonId);

            Property(x => x.SalesReasonId).HasColumnName("SalesReasonID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ReasonType).HasColumnName("ReasonType").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // SalesTaxRate
    public class SalesTaxRateConfiguration : EntityTypeConfiguration<SalesTaxRate>
    {
        public SalesTaxRateConfiguration()
            : this("Sales")
        {
        }
 
        public SalesTaxRateConfiguration(string schema)
        {
            ToTable(schema + ".SalesTaxRate");
            HasKey(x => x.SalesTaxRateId);

            Property(x => x.SalesTaxRateId).HasColumnName("SalesTaxRateID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.StateProvinceId).HasColumnName("StateProvinceID").IsRequired().HasColumnType("int");
            Property(x => x.TaxType).HasColumnName("TaxType").IsRequired().HasColumnType("tinyint");
            Property(x => x.TaxRate).HasColumnName("TaxRate").IsRequired().HasColumnType("smallmoney").HasPrecision(10,4);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.StateProvince).WithMany(b => b.SalesTaxRates).HasForeignKey(c => c.StateProvinceId); // FK_SalesTaxRate_StateProvince_StateProvinceID
        }
    }

    // SalesTerritory
    public class SalesTerritoryConfiguration : EntityTypeConfiguration<SalesTerritory>
    {
        public SalesTerritoryConfiguration()
            : this("Sales")
        {
        }
 
        public SalesTerritoryConfiguration(string schema)
        {
            ToTable(schema + ".SalesTerritory");
            HasKey(x => x.TerritoryId);

            Property(x => x.TerritoryId).HasColumnName("TerritoryID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CountryRegionCode).HasColumnName("CountryRegionCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(3);
            Property(x => x.Group).HasColumnName("Group").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.SalesYtd).HasColumnName("SalesYTD").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.SalesLastYear).HasColumnName("SalesLastYear").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.CostYtd).HasColumnName("CostYTD").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.CostLastYear).HasColumnName("CostLastYear").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // SalesTerritoryHistory
    public class SalesTerritoryHistoryConfiguration : EntityTypeConfiguration<SalesTerritoryHistory>
    {
        public SalesTerritoryHistoryConfiguration()
            : this("Sales")
        {
        }
 
        public SalesTerritoryHistoryConfiguration(string schema)
        {
            ToTable(schema + ".SalesTerritoryHistory");
            HasKey(x => new { x.SalesPersonId, x.StartDate, x.TerritoryId });

            Property(x => x.SalesPersonId).HasColumnName("SalesPersonID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.TerritoryId).HasColumnName("TerritoryID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.StartDate).HasColumnName("StartDate").IsRequired().HasColumnType("datetime").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName("EndDate").IsOptional().HasColumnType("datetime");
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.SalesPerson).WithMany(b => b.SalesTerritoryHistories).HasForeignKey(c => c.SalesPersonId); // FK_SalesTerritoryHistory_SalesPerson_SalesPersonID
            HasRequired(a => a.SalesTerritory).WithMany(b => b.SalesTerritoryHistories).HasForeignKey(c => c.TerritoryId); // FK_SalesTerritoryHistory_SalesTerritory_TerritoryID
        }
    }

    // ScrapReason
    public class ScrapReasonConfiguration : EntityTypeConfiguration<ScrapReason>
    {
        public ScrapReasonConfiguration()
            : this("Production")
        {
        }
 
        public ScrapReasonConfiguration(string schema)
        {
            ToTable(schema + ".ScrapReason");
            HasKey(x => x.ScrapReasonId);

            Property(x => x.ScrapReasonId).HasColumnName("ScrapReasonID").IsRequired().HasColumnType("smallint").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // Shift
    public class ShiftConfiguration : EntityTypeConfiguration<Shift>
    {
        public ShiftConfiguration()
            : this("HumanResources")
        {
        }
 
        public ShiftConfiguration(string schema)
        {
            ToTable(schema + ".Shift");
            HasKey(x => x.ShiftId);

            Property(x => x.ShiftId).HasColumnName("ShiftID").IsRequired().HasColumnType("tinyint").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.StartTime).HasColumnName("StartTime").IsRequired().HasColumnType("datetime");
            Property(x => x.EndTime).HasColumnName("EndTime").IsRequired().HasColumnType("datetime");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // ShipMethod
    public class ShipMethodConfiguration : EntityTypeConfiguration<ShipMethod>
    {
        public ShipMethodConfiguration()
            : this("Purchasing")
        {
        }
 
        public ShipMethodConfiguration(string schema)
        {
            ToTable(schema + ".ShipMethod");
            HasKey(x => x.ShipMethodId);

            Property(x => x.ShipMethodId).HasColumnName("ShipMethodID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ShipBase).HasColumnName("ShipBase").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ShipRate).HasColumnName("ShipRate").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // ShoppingCartItem
    public class ShoppingCartItemConfiguration : EntityTypeConfiguration<ShoppingCartItem>
    {
        public ShoppingCartItemConfiguration()
            : this("Sales")
        {
        }
 
        public ShoppingCartItemConfiguration(string schema)
        {
            ToTable(schema + ".ShoppingCartItem");
            HasKey(x => x.ShoppingCartItemId);

            Property(x => x.ShoppingCartItemId).HasColumnName("ShoppingCartItemID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ShoppingCartId).HasColumnName("ShoppingCartID").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Quantity).HasColumnName("Quantity").IsRequired().HasColumnType("int");
            Property(x => x.ProductId).HasColumnName("ProductID").IsRequired().HasColumnType("int");
            Property(x => x.DateCreated).HasColumnName("DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Product).WithMany(b => b.ShoppingCartItems).HasForeignKey(c => c.ProductId); // FK_ShoppingCartItem_Product_ProductID
        }
    }

    // SpecialOffer
    public class SpecialOfferConfiguration : EntityTypeConfiguration<SpecialOffer>
    {
        public SpecialOfferConfiguration()
            : this("Sales")
        {
        }
 
        public SpecialOfferConfiguration(string schema)
        {
            ToTable(schema + ".SpecialOffer");
            HasKey(x => x.SpecialOfferId);

            Property(x => x.SpecialOfferId).HasColumnName("SpecialOfferID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName("Description").IsRequired().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.DiscountPct).HasColumnName("DiscountPct").IsRequired().HasColumnType("smallmoney").HasPrecision(10,4);
            Property(x => x.Type).HasColumnName("Type").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Category).HasColumnName("Category").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.StartDate).HasColumnName("StartDate").IsRequired().HasColumnType("datetime");
            Property(x => x.EndDate).HasColumnName("EndDate").IsRequired().HasColumnType("datetime");
            Property(x => x.MinQty).HasColumnName("MinQty").IsRequired().HasColumnType("int");
            Property(x => x.MaxQty).HasColumnName("MaxQty").IsOptional().HasColumnType("int");
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // SpecialOfferProduct
    public class SpecialOfferProductConfiguration : EntityTypeConfiguration<SpecialOfferProduct>
    {
        public SpecialOfferProductConfiguration()
            : this("Sales")
        {
        }
 
        public SpecialOfferProductConfiguration(string schema)
        {
            ToTable(schema + ".SpecialOfferProduct");
            HasKey(x => new { x.SpecialOfferId, x.ProductId });

            Property(x => x.SpecialOfferId).HasColumnName("SpecialOfferID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ProductId).HasColumnName("ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Product).WithMany(b => b.SpecialOfferProducts).HasForeignKey(c => c.ProductId); // FK_SpecialOfferProduct_Product_ProductID
            HasRequired(a => a.SpecialOffer).WithMany(b => b.SpecialOfferProducts).HasForeignKey(c => c.SpecialOfferId); // FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID
        }
    }

    // StateProvince
    public class StateProvinceConfiguration : EntityTypeConfiguration<StateProvince>
    {
        public StateProvinceConfiguration()
            : this("Person")
        {
        }
 
        public StateProvinceConfiguration(string schema)
        {
            ToTable(schema + ".StateProvince");
            HasKey(x => x.StateProvinceId);

            Property(x => x.StateProvinceId).HasColumnName("StateProvinceID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.StateProvinceCode).HasColumnName("StateProvinceCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3);
            Property(x => x.CountryRegionCode).HasColumnName("CountryRegionCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(3);
            Property(x => x.IsOnlyStateProvinceFlag).HasColumnName("IsOnlyStateProvinceFlag").IsRequired().HasColumnType("bit");
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.TerritoryId).HasColumnName("TerritoryID").IsRequired().HasColumnType("int");
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.CountryRegion).WithMany(b => b.StateProvinces).HasForeignKey(c => c.CountryRegionCode); // FK_StateProvince_CountryRegion_CountryRegionCode
            HasRequired(a => a.SalesTerritory).WithMany(b => b.StateProvinces).HasForeignKey(c => c.TerritoryId); // FK_StateProvince_SalesTerritory_TerritoryID
        }
    }

    // Store
    public class StoreConfiguration : EntityTypeConfiguration<Store>
    {
        public StoreConfiguration()
            : this("Sales")
        {
        }
 
        public StoreConfiguration(string schema)
        {
            ToTable(schema + ".Store");
            HasKey(x => x.CustomerId);

            Property(x => x.CustomerId).HasColumnName("CustomerID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.SalesPersonId).HasColumnName("SalesPersonID").IsOptional().HasColumnType("int");
            Property(x => x.Demographics).HasColumnName("Demographics").IsOptional().HasColumnType("xml");
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.SalesPerson).WithMany(b => b.Stores).HasForeignKey(c => c.SalesPersonId); // FK_Store_SalesPerson_SalesPersonID
            HasRequired(a => a.Customer).WithOptional(b => b.Store); // FK_Store_Customer_CustomerID
        }
    }

    // StoreContact
    public class StoreContactConfiguration : EntityTypeConfiguration<StoreContact>
    {
        public StoreContactConfiguration()
            : this("Sales")
        {
        }
 
        public StoreContactConfiguration(string schema)
        {
            ToTable(schema + ".StoreContact");
            HasKey(x => new { x.CustomerId, x.ContactId });

            Property(x => x.CustomerId).HasColumnName("CustomerID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ContactId).HasColumnName("ContactID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ContactTypeId).HasColumnName("ContactTypeID").IsRequired().HasColumnType("int");
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Contact).WithMany(b => b.StoreContacts).HasForeignKey(c => c.ContactId); // FK_StoreContact_Contact_ContactID
            HasRequired(a => a.ContactType).WithMany(b => b.StoreContacts).HasForeignKey(c => c.ContactTypeId); // FK_StoreContact_ContactType_ContactTypeID
            HasRequired(a => a.Store).WithMany(b => b.StoreContacts).HasForeignKey(c => c.CustomerId); // FK_StoreContact_Store_CustomerID
        }
    }

    // TransactionHistory
    public class TransactionHistoryConfiguration : EntityTypeConfiguration<TransactionHistory>
    {
        public TransactionHistoryConfiguration()
            : this("Production")
        {
        }
 
        public TransactionHistoryConfiguration(string schema)
        {
            ToTable(schema + ".TransactionHistory");
            HasKey(x => x.TransactionId);

            Property(x => x.TransactionId).HasColumnName("TransactionID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ProductId).HasColumnName("ProductID").IsRequired().HasColumnType("int");
            Property(x => x.ReferenceOrderId).HasColumnName("ReferenceOrderID").IsRequired().HasColumnType("int");
            Property(x => x.ReferenceOrderLineId).HasColumnName("ReferenceOrderLineID").IsRequired().HasColumnType("int");
            Property(x => x.TransactionDate).HasColumnName("TransactionDate").IsRequired().HasColumnType("datetime");
            Property(x => x.TransactionType).HasColumnName("TransactionType").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(1);
            Property(x => x.Quantity).HasColumnName("Quantity").IsRequired().HasColumnType("int");
            Property(x => x.ActualCost).HasColumnName("ActualCost").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Product).WithMany(b => b.TransactionHistories).HasForeignKey(c => c.ProductId); // FK_TransactionHistory_Product_ProductID
        }
    }

    // TransactionHistoryArchive
    public class TransactionHistoryArchiveConfiguration : EntityTypeConfiguration<TransactionHistoryArchive>
    {
        public TransactionHistoryArchiveConfiguration()
            : this("Production")
        {
        }
 
        public TransactionHistoryArchiveConfiguration(string schema)
        {
            ToTable(schema + ".TransactionHistoryArchive");
            HasKey(x => x.TransactionId);

            Property(x => x.TransactionId).HasColumnName("TransactionID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ProductId).HasColumnName("ProductID").IsRequired().HasColumnType("int");
            Property(x => x.ReferenceOrderId).HasColumnName("ReferenceOrderID").IsRequired().HasColumnType("int");
            Property(x => x.ReferenceOrderLineId).HasColumnName("ReferenceOrderLineID").IsRequired().HasColumnType("int");
            Property(x => x.TransactionDate).HasColumnName("TransactionDate").IsRequired().HasColumnType("datetime");
            Property(x => x.TransactionType).HasColumnName("TransactionType").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(1);
            Property(x => x.Quantity).HasColumnName("Quantity").IsRequired().HasColumnType("int");
            Property(x => x.ActualCost).HasColumnName("ActualCost").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // UnitMeasure
    public class UnitMeasureConfiguration : EntityTypeConfiguration<UnitMeasure>
    {
        public UnitMeasureConfiguration()
            : this("Production")
        {
        }
 
        public UnitMeasureConfiguration(string schema)
        {
            ToTable(schema + ".UnitMeasure");
            HasKey(x => x.UnitMeasureCode);

            Property(x => x.UnitMeasureCode).HasColumnName("UnitMeasureCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // vAdditionalContactInfo
    public class VAdditionalContactInfoConfiguration : EntityTypeConfiguration<VAdditionalContactInfo>
    {
        public VAdditionalContactInfoConfiguration()
            : this("Person")
        {
        }
 
        public VAdditionalContactInfoConfiguration(string schema)
        {
            ToTable(schema + ".vAdditionalContactInfo");
            HasKey(x => new { x.ContactId, x.FirstName, x.LastName, x.Rowguid, x.ModifiedDate });

            Property(x => x.ContactId).HasColumnName("ContactID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.FirstName).HasColumnName("FirstName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName("MiddleName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LastName).HasColumnName("LastName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.TelephoneNumber).HasColumnName("TelephoneNumber").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.TelephoneSpecialInstructions).HasColumnName("TelephoneSpecialInstructions").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Street).HasColumnName("Street").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.City).HasColumnName("City").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.StateProvince).HasColumnName("StateProvince").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.PostalCode).HasColumnName("PostalCode").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CountryRegion).HasColumnName("CountryRegion").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.HomeAddressSpecialInstructions).HasColumnName("HomeAddressSpecialInstructions").IsOptional().HasColumnType("nvarchar");
            Property(x => x.EMailAddress).HasColumnName("EMailAddress").IsOptional().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.EMailSpecialInstructions).HasColumnName("EMailSpecialInstructions").IsOptional().HasColumnType("nvarchar");
            Property(x => x.EMailTelephoneNumber).HasColumnName("EMailTelephoneNumber").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // vEmployee
    public class VEmployeeConfiguration : EntityTypeConfiguration<VEmployee>
    {
        public VEmployeeConfiguration()
            : this("HumanResources")
        {
        }
 
        public VEmployeeConfiguration(string schema)
        {
            ToTable(schema + ".vEmployee");
            HasKey(x => new { x.EmployeeId, x.FirstName, x.LastName, x.JobTitle, x.EmailPromotion, x.AddressLine1, x.City, x.StateProvinceName, x.PostalCode, x.CountryRegionName });

            Property(x => x.EmployeeId).HasColumnName("EmployeeID").IsRequired().HasColumnType("int");
            Property(x => x.Title).HasColumnName("Title").IsOptional().HasColumnType("nvarchar").HasMaxLength(8);
            Property(x => x.FirstName).HasColumnName("FirstName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName("MiddleName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LastName).HasColumnName("LastName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Suffix).HasColumnName("Suffix").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.JobTitle).HasColumnName("JobTitle").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Phone).HasColumnName("Phone").IsOptional().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.EmailAddress).HasColumnName("EmailAddress").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.EmailPromotion).HasColumnName("EmailPromotion").IsRequired().HasColumnType("int");
            Property(x => x.AddressLine1).HasColumnName("AddressLine1").IsRequired().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.AddressLine2).HasColumnName("AddressLine2").IsOptional().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.City).HasColumnName("City").IsRequired().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.StateProvinceName).HasColumnName("StateProvinceName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.PostalCode).HasColumnName("PostalCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.CountryRegionName).HasColumnName("CountryRegionName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.AdditionalContactInfo).HasColumnName("AdditionalContactInfo").IsOptional().HasColumnType("xml");
        }
    }

    // vEmployeeDepartment
    public class VEmployeeDepartmentConfiguration : EntityTypeConfiguration<VEmployeeDepartment>
    {
        public VEmployeeDepartmentConfiguration()
            : this("HumanResources")
        {
        }
 
        public VEmployeeDepartmentConfiguration(string schema)
        {
            ToTable(schema + ".vEmployeeDepartment");
            HasKey(x => new { x.EmployeeId, x.FirstName, x.LastName, x.JobTitle, x.Department, x.GroupName, x.StartDate });

            Property(x => x.EmployeeId).HasColumnName("EmployeeID").IsRequired().HasColumnType("int");
            Property(x => x.Title).HasColumnName("Title").IsOptional().HasColumnType("nvarchar").HasMaxLength(8);
            Property(x => x.FirstName).HasColumnName("FirstName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName("MiddleName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LastName).HasColumnName("LastName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Suffix).HasColumnName("Suffix").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.JobTitle).HasColumnName("JobTitle").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Department).HasColumnName("Department").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.GroupName).HasColumnName("GroupName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.StartDate).HasColumnName("StartDate").IsRequired().HasColumnType("datetime");
        }
    }

    // vEmployeeDepartmentHistory
    public class VEmployeeDepartmentHistoryConfiguration : EntityTypeConfiguration<VEmployeeDepartmentHistory>
    {
        public VEmployeeDepartmentHistoryConfiguration()
            : this("HumanResources")
        {
        }
 
        public VEmployeeDepartmentHistoryConfiguration(string schema)
        {
            ToTable(schema + ".vEmployeeDepartmentHistory");
            HasKey(x => new { x.EmployeeId, x.FirstName, x.LastName, x.Shift, x.Department, x.GroupName, x.StartDate });

            Property(x => x.EmployeeId).HasColumnName("EmployeeID").IsRequired().HasColumnType("int");
            Property(x => x.Title).HasColumnName("Title").IsOptional().HasColumnType("nvarchar").HasMaxLength(8);
            Property(x => x.FirstName).HasColumnName("FirstName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName("MiddleName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LastName).HasColumnName("LastName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Suffix).HasColumnName("Suffix").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.Shift).HasColumnName("Shift").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Department).HasColumnName("Department").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.GroupName).HasColumnName("GroupName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.StartDate).HasColumnName("StartDate").IsRequired().HasColumnType("datetime");
            Property(x => x.EndDate).HasColumnName("EndDate").IsOptional().HasColumnType("datetime");
        }
    }

    // Vendor
    public class VendorConfiguration : EntityTypeConfiguration<Vendor>
    {
        public VendorConfiguration()
            : this("Purchasing")
        {
        }
 
        public VendorConfiguration(string schema)
        {
            ToTable(schema + ".Vendor");
            HasKey(x => x.VendorId);

            Property(x => x.VendorId).HasColumnName("VendorID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.AccountNumber).HasColumnName("AccountNumber").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CreditRating).HasColumnName("CreditRating").IsRequired().HasColumnType("tinyint");
            Property(x => x.PreferredVendorStatus).HasColumnName("PreferredVendorStatus").IsRequired().HasColumnType("bit");
            Property(x => x.ActiveFlag).HasColumnName("ActiveFlag").IsRequired().HasColumnType("bit");
            Property(x => x.PurchasingWebServiceUrl).HasColumnName("PurchasingWebServiceURL").IsOptional().HasColumnType("nvarchar").HasMaxLength(1024);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // VendorAddress
    public class VendorAddressConfiguration : EntityTypeConfiguration<VendorAddress>
    {
        public VendorAddressConfiguration()
            : this("Purchasing")
        {
        }
 
        public VendorAddressConfiguration(string schema)
        {
            ToTable(schema + ".VendorAddress");
            HasKey(x => new { x.VendorId, x.AddressId });

            Property(x => x.VendorId).HasColumnName("VendorID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.AddressId).HasColumnName("AddressID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.AddressTypeId).HasColumnName("AddressTypeID").IsRequired().HasColumnType("int");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Address).WithMany(b => b.VendorAddresses).HasForeignKey(c => c.AddressId); // FK_VendorAddress_Address_AddressID
            HasRequired(a => a.AddressType).WithMany(b => b.VendorAddresses).HasForeignKey(c => c.AddressTypeId); // FK_VendorAddress_AddressType_AddressTypeID
            HasRequired(a => a.Vendor).WithMany(b => b.VendorAddresses).HasForeignKey(c => c.VendorId); // FK_VendorAddress_Vendor_VendorID
        }
    }

    // VendorContact
    public class VendorContactConfiguration : EntityTypeConfiguration<VendorContact>
    {
        public VendorContactConfiguration()
            : this("Purchasing")
        {
        }
 
        public VendorContactConfiguration(string schema)
        {
            ToTable(schema + ".VendorContact");
            HasKey(x => new { x.VendorId, x.ContactId });

            Property(x => x.VendorId).HasColumnName("VendorID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ContactId).HasColumnName("ContactID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ContactTypeId).HasColumnName("ContactTypeID").IsRequired().HasColumnType("int");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Contact).WithMany(b => b.VendorContacts).HasForeignKey(c => c.ContactId); // FK_VendorContact_Contact_ContactID
            HasRequired(a => a.ContactType).WithMany(b => b.VendorContacts).HasForeignKey(c => c.ContactTypeId); // FK_VendorContact_ContactType_ContactTypeID
            HasRequired(a => a.Vendor).WithMany(b => b.VendorContacts).HasForeignKey(c => c.VendorId); // FK_VendorContact_Vendor_VendorID
        }
    }

    // vIndividualCustomer
    public class VIndividualCustomerConfiguration : EntityTypeConfiguration<VIndividualCustomer>
    {
        public VIndividualCustomerConfiguration()
            : this("Sales")
        {
        }
 
        public VIndividualCustomerConfiguration(string schema)
        {
            ToTable(schema + ".vIndividualCustomer");
            HasKey(x => new { x.CustomerId, x.FirstName, x.LastName, x.EmailPromotion, x.AddressType, x.AddressLine1, x.City, x.StateProvinceName, x.PostalCode, x.CountryRegionName });

            Property(x => x.CustomerId).HasColumnName("CustomerID").IsRequired().HasColumnType("int");
            Property(x => x.Title).HasColumnName("Title").IsOptional().HasColumnType("nvarchar").HasMaxLength(8);
            Property(x => x.FirstName).HasColumnName("FirstName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName("MiddleName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LastName).HasColumnName("LastName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Suffix).HasColumnName("Suffix").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.Phone).HasColumnName("Phone").IsOptional().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.EmailAddress).HasColumnName("EmailAddress").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.EmailPromotion).HasColumnName("EmailPromotion").IsRequired().HasColumnType("int");
            Property(x => x.AddressType).HasColumnName("AddressType").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.AddressLine1).HasColumnName("AddressLine1").IsRequired().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.AddressLine2).HasColumnName("AddressLine2").IsOptional().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.City).HasColumnName("City").IsRequired().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.StateProvinceName).HasColumnName("StateProvinceName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.PostalCode).HasColumnName("PostalCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.CountryRegionName).HasColumnName("CountryRegionName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Demographics).HasColumnName("Demographics").IsOptional().HasColumnType("xml");
        }
    }

    // vIndividualDemographics
    public class VIndividualDemographicConfiguration : EntityTypeConfiguration<VIndividualDemographic>
    {
        public VIndividualDemographicConfiguration()
            : this("Sales")
        {
        }
 
        public VIndividualDemographicConfiguration(string schema)
        {
            ToTable(schema + ".vIndividualDemographics");
            HasKey(x => x.CustomerId);

            Property(x => x.CustomerId).HasColumnName("CustomerID").IsRequired().HasColumnType("int");
            Property(x => x.TotalPurchaseYtd).HasColumnName("TotalPurchaseYTD").IsOptional().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.DateFirstPurchase).HasColumnName("DateFirstPurchase").IsOptional().HasColumnType("datetime");
            Property(x => x.BirthDate).HasColumnName("BirthDate").IsOptional().HasColumnType("datetime");
            Property(x => x.MaritalStatus).HasColumnName("MaritalStatus").IsOptional().HasColumnType("nvarchar").HasMaxLength(1);
            Property(x => x.YearlyIncome).HasColumnName("YearlyIncome").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.Gender).HasColumnName("Gender").IsOptional().HasColumnType("nvarchar").HasMaxLength(1);
            Property(x => x.TotalChildren).HasColumnName("TotalChildren").IsOptional().HasColumnType("int");
            Property(x => x.NumberChildrenAtHome).HasColumnName("NumberChildrenAtHome").IsOptional().HasColumnType("int");
            Property(x => x.Education).HasColumnName("Education").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.Occupation).HasColumnName("Occupation").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.HomeOwnerFlag).HasColumnName("HomeOwnerFlag").IsOptional().HasColumnType("bit");
            Property(x => x.NumberCarsOwned).HasColumnName("NumberCarsOwned").IsOptional().HasColumnType("int");
        }
    }

    // vJobCandidate
    public class VJobCandidateConfiguration : EntityTypeConfiguration<VJobCandidate>
    {
        public VJobCandidateConfiguration()
            : this("HumanResources")
        {
        }
 
        public VJobCandidateConfiguration(string schema)
        {
            ToTable(schema + ".vJobCandidate");
            HasKey(x => new { x.JobCandidateId, x.ModifiedDate });

            Property(x => x.JobCandidateId).HasColumnName("JobCandidateID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.EmployeeId).HasColumnName("EmployeeID").IsOptional().HasColumnType("int");
            Property(x => x.Name46Prefix).HasColumnName("Name.Prefix").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.Name46First).HasColumnName("Name.First").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.Name46Middle).HasColumnName("Name.Middle").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.Name46Last).HasColumnName("Name.Last").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.Name46Suffix).HasColumnName("Name.Suffix").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.Skills).HasColumnName("Skills").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Addr46Type).HasColumnName("Addr.Type").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.Addr46Loc46CountryRegion).HasColumnName("Addr.Loc.CountryRegion").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.Addr46Loc46State).HasColumnName("Addr.Loc.State").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.Addr46Loc46City).HasColumnName("Addr.Loc.City").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.Addr46PostalCode).HasColumnName("Addr.PostalCode").IsOptional().HasColumnType("nvarchar").HasMaxLength(20);
            Property(x => x.EMail).HasColumnName("EMail").IsOptional().HasColumnType("nvarchar");
            Property(x => x.WebSite).HasColumnName("WebSite").IsOptional().HasColumnType("nvarchar");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // vJobCandidateEducation
    public class VJobCandidateEducationConfiguration : EntityTypeConfiguration<VJobCandidateEducation>
    {
        public VJobCandidateEducationConfiguration()
            : this("HumanResources")
        {
        }
 
        public VJobCandidateEducationConfiguration(string schema)
        {
            ToTable(schema + ".vJobCandidateEducation");
            HasKey(x => x.JobCandidateId);

            Property(x => x.JobCandidateId).HasColumnName("JobCandidateID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Edu46Level).HasColumnName("Edu.Level").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Edu46StartDate).HasColumnName("Edu.StartDate").IsOptional().HasColumnType("datetime");
            Property(x => x.Edu46EndDate).HasColumnName("Edu.EndDate").IsOptional().HasColumnType("datetime");
            Property(x => x.Edu46Degree).HasColumnName("Edu.Degree").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Edu46Major).HasColumnName("Edu.Major").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Edu46Minor).HasColumnName("Edu.Minor").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Edu46Gpa).HasColumnName("Edu.GPA").IsOptional().HasColumnType("nvarchar").HasMaxLength(5);
            Property(x => x.Edu46GpaScale).HasColumnName("Edu.GPAScale").IsOptional().HasColumnType("nvarchar").HasMaxLength(5);
            Property(x => x.Edu46School).HasColumnName("Edu.School").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.Edu46Loc46CountryRegion).HasColumnName("Edu.Loc.CountryRegion").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.Edu46Loc46State).HasColumnName("Edu.Loc.State").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.Edu46Loc46City).HasColumnName("Edu.Loc.City").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
        }
    }

    // vJobCandidateEmployment
    public class VJobCandidateEmploymentConfiguration : EntityTypeConfiguration<VJobCandidateEmployment>
    {
        public VJobCandidateEmploymentConfiguration()
            : this("HumanResources")
        {
        }
 
        public VJobCandidateEmploymentConfiguration(string schema)
        {
            ToTable(schema + ".vJobCandidateEmployment");
            HasKey(x => x.JobCandidateId);

            Property(x => x.JobCandidateId).HasColumnName("JobCandidateID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Emp46StartDate).HasColumnName("Emp.StartDate").IsOptional().HasColumnType("datetime");
            Property(x => x.Emp46EndDate).HasColumnName("Emp.EndDate").IsOptional().HasColumnType("datetime");
            Property(x => x.Emp46OrgName).HasColumnName("Emp.OrgName").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.Emp46JobTitle).HasColumnName("Emp.JobTitle").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.Emp46Responsibility).HasColumnName("Emp.Responsibility").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Emp46FunctionCategory).HasColumnName("Emp.FunctionCategory").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Emp46IndustryCategory).HasColumnName("Emp.IndustryCategory").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Emp46Loc46CountryRegion).HasColumnName("Emp.Loc.CountryRegion").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Emp46Loc46State).HasColumnName("Emp.Loc.State").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Emp46Loc46City).HasColumnName("Emp.Loc.City").IsOptional().HasColumnType("nvarchar");
        }
    }

    // vProductAndDescription
    public class VProductAndDescriptionConfiguration : EntityTypeConfiguration<VProductAndDescription>
    {
        public VProductAndDescriptionConfiguration()
            : this("Production")
        {
        }
 
        public VProductAndDescriptionConfiguration(string schema)
        {
            ToTable(schema + ".vProductAndDescription");
            HasKey(x => new { x.ProductId, x.Name, x.ProductModel, x.CultureId, x.Description });

            Property(x => x.ProductId).HasColumnName("ProductID").IsRequired().HasColumnType("int");
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ProductModel).HasColumnName("ProductModel").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CultureId).HasColumnName("CultureID").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(6);
            Property(x => x.Description).HasColumnName("Description").IsRequired().HasColumnType("nvarchar").HasMaxLength(400);
        }
    }

    // vProductModelCatalogDescription
    public class VProductModelCatalogDescriptionConfiguration : EntityTypeConfiguration<VProductModelCatalogDescription>
    {
        public VProductModelCatalogDescriptionConfiguration()
            : this("Production")
        {
        }
 
        public VProductModelCatalogDescriptionConfiguration(string schema)
        {
            ToTable(schema + ".vProductModelCatalogDescription");
            HasKey(x => new { x.ProductModelId, x.Name, x.Rowguid, x.ModifiedDate });

            Property(x => x.ProductModelId).HasColumnName("ProductModelID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Summary).HasColumnName("Summary").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Manufacturer).HasColumnName("Manufacturer").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Copyright).HasColumnName("Copyright").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.ProductUrl).HasColumnName("ProductURL").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.WarrantyPeriod).HasColumnName("WarrantyPeriod").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.WarrantyDescription).HasColumnName("WarrantyDescription").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.NoOfYears).HasColumnName("NoOfYears").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.MaintenanceDescription).HasColumnName("MaintenanceDescription").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.Wheel).HasColumnName("Wheel").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.Saddle).HasColumnName("Saddle").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.Pedal).HasColumnName("Pedal").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.BikeFrame).HasColumnName("BikeFrame").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Crankset).HasColumnName("Crankset").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.PictureAngle).HasColumnName("PictureAngle").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.PictureSize).HasColumnName("PictureSize").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.ProductPhotoId).HasColumnName("ProductPhotoID").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.Material).HasColumnName("Material").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.Color).HasColumnName("Color").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.ProductLine).HasColumnName("ProductLine").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.Style).HasColumnName("Style").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.RiderExperience).HasColumnName("RiderExperience").IsOptional().HasColumnType("nvarchar").HasMaxLength(1024);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // vProductModelInstructions
    public class VProductModelInstructionConfiguration : EntityTypeConfiguration<VProductModelInstruction>
    {
        public VProductModelInstructionConfiguration()
            : this("Production")
        {
        }
 
        public VProductModelInstructionConfiguration(string schema)
        {
            ToTable(schema + ".vProductModelInstructions");
            HasKey(x => new { x.ProductModelId, x.Name, x.Rowguid, x.ModifiedDate });

            Property(x => x.ProductModelId).HasColumnName("ProductModelID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Instructions).HasColumnName("Instructions").IsOptional().HasColumnType("nvarchar");
            Property(x => x.LocationId).HasColumnName("LocationID").IsOptional().HasColumnType("int");
            Property(x => x.SetupHours).HasColumnName("SetupHours").IsOptional().HasColumnType("decimal").HasPrecision(9,4);
            Property(x => x.MachineHours).HasColumnName("MachineHours").IsOptional().HasColumnType("decimal").HasPrecision(9,4);
            Property(x => x.LaborHours).HasColumnName("LaborHours").IsOptional().HasColumnType("decimal").HasPrecision(9,4);
            Property(x => x.LotSize).HasColumnName("LotSize").IsOptional().HasColumnType("int");
            Property(x => x.Step).HasColumnName("Step").IsOptional().HasColumnType("nvarchar").HasMaxLength(1024);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // vSalesPerson
    public class VSalesPersonConfiguration : EntityTypeConfiguration<VSalesPerson>
    {
        public VSalesPersonConfiguration()
            : this("Sales")
        {
        }
 
        public VSalesPersonConfiguration(string schema)
        {
            ToTable(schema + ".vSalesPerson");
            HasKey(x => new { x.SalesPersonId, x.FirstName, x.LastName, x.JobTitle, x.EmailPromotion, x.AddressLine1, x.City, x.StateProvinceName, x.PostalCode, x.CountryRegionName, x.SalesYtd, x.SalesLastYear });

            Property(x => x.SalesPersonId).HasColumnName("SalesPersonID").IsRequired().HasColumnType("int");
            Property(x => x.Title).HasColumnName("Title").IsOptional().HasColumnType("nvarchar").HasMaxLength(8);
            Property(x => x.FirstName).HasColumnName("FirstName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName("MiddleName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LastName).HasColumnName("LastName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Suffix).HasColumnName("Suffix").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.JobTitle).HasColumnName("JobTitle").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Phone).HasColumnName("Phone").IsOptional().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.EmailAddress).HasColumnName("EmailAddress").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.EmailPromotion).HasColumnName("EmailPromotion").IsRequired().HasColumnType("int");
            Property(x => x.AddressLine1).HasColumnName("AddressLine1").IsRequired().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.AddressLine2).HasColumnName("AddressLine2").IsOptional().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.City).HasColumnName("City").IsRequired().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.StateProvinceName).HasColumnName("StateProvinceName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.PostalCode).HasColumnName("PostalCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.CountryRegionName).HasColumnName("CountryRegionName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.TerritoryName).HasColumnName("TerritoryName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.TerritoryGroup).HasColumnName("TerritoryGroup").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.SalesQuota).HasColumnName("SalesQuota").IsOptional().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.SalesYtd).HasColumnName("SalesYTD").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.SalesLastYear).HasColumnName("SalesLastYear").IsRequired().HasColumnType("money").HasPrecision(19,4);
        }
    }

    // vSalesPersonSalesByFiscalYears
    public class VSalesPersonSalesByFiscalYearConfiguration : EntityTypeConfiguration<VSalesPersonSalesByFiscalYear>
    {
        public VSalesPersonSalesByFiscalYearConfiguration()
            : this("Sales")
        {
        }
 
        public VSalesPersonSalesByFiscalYearConfiguration(string schema)
        {
            ToTable(schema + ".vSalesPersonSalesByFiscalYears");
            HasKey(x => new { x.Title, x.SalesTerritory });

            Property(x => x.SalesPersonId).HasColumnName("SalesPersonID").IsOptional().HasColumnType("int");
            Property(x => x.FullName).HasColumnName("FullName").IsOptional().HasColumnType("nvarchar").HasMaxLength(152);
            Property(x => x.Title).HasColumnName("Title").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.SalesTerritory).HasColumnName("SalesTerritory").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.C2002).HasColumnName("2002").IsOptional().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.C2003).HasColumnName("2003").IsOptional().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.C2004).HasColumnName("2004").IsOptional().HasColumnType("money").HasPrecision(19,4);
        }
    }

    // vStateProvinceCountryRegion
    public class VStateProvinceCountryRegionConfiguration : EntityTypeConfiguration<VStateProvinceCountryRegion>
    {
        public VStateProvinceCountryRegionConfiguration()
            : this("Person")
        {
        }
 
        public VStateProvinceCountryRegionConfiguration(string schema)
        {
            ToTable(schema + ".vStateProvinceCountryRegion");
            HasKey(x => new { x.StateProvinceId, x.StateProvinceCode, x.IsOnlyStateProvinceFlag, x.StateProvinceName, x.TerritoryId, x.CountryRegionCode, x.CountryRegionName });

            Property(x => x.StateProvinceId).HasColumnName("StateProvinceID").IsRequired().HasColumnType("int");
            Property(x => x.StateProvinceCode).HasColumnName("StateProvinceCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3);
            Property(x => x.IsOnlyStateProvinceFlag).HasColumnName("IsOnlyStateProvinceFlag").IsRequired().HasColumnType("bit");
            Property(x => x.StateProvinceName).HasColumnName("StateProvinceName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.TerritoryId).HasColumnName("TerritoryID").IsRequired().HasColumnType("int");
            Property(x => x.CountryRegionCode).HasColumnName("CountryRegionCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(3);
            Property(x => x.CountryRegionName).HasColumnName("CountryRegionName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
        }
    }

    // vStoreWithDemographics
    public class VStoreWithDemographicConfiguration : EntityTypeConfiguration<VStoreWithDemographic>
    {
        public VStoreWithDemographicConfiguration()
            : this("Sales")
        {
        }
 
        public VStoreWithDemographicConfiguration(string schema)
        {
            ToTable(schema + ".vStoreWithDemographics");
            HasKey(x => new { x.CustomerId, x.Name, x.ContactType, x.FirstName, x.LastName, x.EmailPromotion, x.AddressType, x.AddressLine1, x.City, x.StateProvinceName, x.PostalCode, x.CountryRegionName });

            Property(x => x.CustomerId).HasColumnName("CustomerID").IsRequired().HasColumnType("int");
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ContactType).HasColumnName("ContactType").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Title).HasColumnName("Title").IsOptional().HasColumnType("nvarchar").HasMaxLength(8);
            Property(x => x.FirstName).HasColumnName("FirstName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName("MiddleName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LastName).HasColumnName("LastName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Suffix).HasColumnName("Suffix").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.Phone).HasColumnName("Phone").IsOptional().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.EmailAddress).HasColumnName("EmailAddress").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.EmailPromotion).HasColumnName("EmailPromotion").IsRequired().HasColumnType("int");
            Property(x => x.AddressType).HasColumnName("AddressType").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.AddressLine1).HasColumnName("AddressLine1").IsRequired().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.AddressLine2).HasColumnName("AddressLine2").IsOptional().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.City).HasColumnName("City").IsRequired().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.StateProvinceName).HasColumnName("StateProvinceName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.PostalCode).HasColumnName("PostalCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.CountryRegionName).HasColumnName("CountryRegionName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.AnnualSales).HasColumnName("AnnualSales").IsOptional().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.AnnualRevenue).HasColumnName("AnnualRevenue").IsOptional().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.BankName).HasColumnName("BankName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.BusinessType).HasColumnName("BusinessType").IsOptional().HasColumnType("nvarchar").HasMaxLength(5);
            Property(x => x.YearOpened).HasColumnName("YearOpened").IsOptional().HasColumnType("int");
            Property(x => x.Specialty).HasColumnName("Specialty").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.SquareFeet).HasColumnName("SquareFeet").IsOptional().HasColumnType("int");
            Property(x => x.Brands).HasColumnName("Brands").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.Internet).HasColumnName("Internet").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.NumberEmployees).HasColumnName("NumberEmployees").IsOptional().HasColumnType("int");
        }
    }

    // vVendor
    public class VVendorConfiguration : EntityTypeConfiguration<VVendor>
    {
        public VVendorConfiguration()
            : this("Purchasing")
        {
        }
 
        public VVendorConfiguration(string schema)
        {
            ToTable(schema + ".vVendor");
            HasKey(x => new { x.VendorId, x.Name, x.ContactType, x.FirstName, x.LastName, x.EmailPromotion, x.AddressLine1, x.City, x.StateProvinceName, x.PostalCode, x.CountryRegionName });

            Property(x => x.VendorId).HasColumnName("VendorID").IsRequired().HasColumnType("int");
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ContactType).HasColumnName("ContactType").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Title).HasColumnName("Title").IsOptional().HasColumnType("nvarchar").HasMaxLength(8);
            Property(x => x.FirstName).HasColumnName("FirstName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName("MiddleName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LastName).HasColumnName("LastName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Suffix).HasColumnName("Suffix").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.Phone).HasColumnName("Phone").IsOptional().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.EmailAddress).HasColumnName("EmailAddress").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.EmailPromotion).HasColumnName("EmailPromotion").IsRequired().HasColumnType("int");
            Property(x => x.AddressLine1).HasColumnName("AddressLine1").IsRequired().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.AddressLine2).HasColumnName("AddressLine2").IsOptional().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.City).HasColumnName("City").IsRequired().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.StateProvinceName).HasColumnName("StateProvinceName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.PostalCode).HasColumnName("PostalCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.CountryRegionName).HasColumnName("CountryRegionName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
        }
    }

    // WorkOrder
    public class WorkOrderConfiguration : EntityTypeConfiguration<WorkOrder>
    {
        public WorkOrderConfiguration()
            : this("Production")
        {
        }
 
        public WorkOrderConfiguration(string schema)
        {
            ToTable(schema + ".WorkOrder");
            HasKey(x => x.WorkOrderId);

            Property(x => x.WorkOrderId).HasColumnName("WorkOrderID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ProductId).HasColumnName("ProductID").IsRequired().HasColumnType("int");
            Property(x => x.OrderQty).HasColumnName("OrderQty").IsRequired().HasColumnType("int");
            Property(x => x.StockedQty).HasColumnName("StockedQty").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed);
            Property(x => x.ScrappedQty).HasColumnName("ScrappedQty").IsRequired().HasColumnType("smallint");
            Property(x => x.StartDate).HasColumnName("StartDate").IsRequired().HasColumnType("datetime");
            Property(x => x.EndDate).HasColumnName("EndDate").IsOptional().HasColumnType("datetime");
            Property(x => x.DueDate).HasColumnName("DueDate").IsRequired().HasColumnType("datetime");
            Property(x => x.ScrapReasonId).HasColumnName("ScrapReasonID").IsOptional().HasColumnType("smallint");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.ScrapReason).WithMany(b => b.WorkOrders).HasForeignKey(c => c.ScrapReasonId); // FK_WorkOrder_ScrapReason_ScrapReasonID
            HasRequired(a => a.Product).WithMany(b => b.WorkOrders).HasForeignKey(c => c.ProductId); // FK_WorkOrder_Product_ProductID
        }
    }

    // WorkOrderRouting
    public class WorkOrderRoutingConfiguration : EntityTypeConfiguration<WorkOrderRouting>
    {
        public WorkOrderRoutingConfiguration()
            : this("Production")
        {
        }
 
        public WorkOrderRoutingConfiguration(string schema)
        {
            ToTable(schema + ".WorkOrderRouting");
            HasKey(x => new { x.WorkOrderId, x.ProductId, x.OperationSequence });

            Property(x => x.WorkOrderId).HasColumnName("WorkOrderID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ProductId).HasColumnName("ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.OperationSequence).HasColumnName("OperationSequence").IsRequired().HasColumnType("smallint").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.LocationId).HasColumnName("LocationID").IsRequired().HasColumnType("smallint");
            Property(x => x.ScheduledStartDate).HasColumnName("ScheduledStartDate").IsRequired().HasColumnType("datetime");
            Property(x => x.ScheduledEndDate).HasColumnName("ScheduledEndDate").IsRequired().HasColumnType("datetime");
            Property(x => x.ActualStartDate).HasColumnName("ActualStartDate").IsOptional().HasColumnType("datetime");
            Property(x => x.ActualEndDate).HasColumnName("ActualEndDate").IsOptional().HasColumnType("datetime");
            Property(x => x.ActualResourceHrs).HasColumnName("ActualResourceHrs").IsOptional().HasColumnType("decimal").HasPrecision(9,4);
            Property(x => x.PlannedCost).HasColumnName("PlannedCost").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ActualCost).HasColumnName("ActualCost").IsOptional().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Location).WithMany(b => b.WorkOrderRoutings).HasForeignKey(c => c.LocationId); // FK_WorkOrderRouting_Location_LocationID
            HasRequired(a => a.WorkOrder).WithMany(b => b.WorkOrderRoutings).HasForeignKey(c => c.WorkOrderId); // FK_WorkOrderRouting_WorkOrder_WorkOrderID
        }
    }


    // ************************************************************************
    // Stored procedure return models

    public class UspGetBillOfMaterialsReturnModel
    {
        public Int32? ProductAssemblyID { get; set; }
        public Int32? ComponentID { get; set; }
        public String ComponentDesc { get; set; }
        public Decimal? TotalQuantity { get; set; }
        public Decimal? StandardCost { get; set; }
        public Decimal? ListPrice { get; set; }
        public Int16? BOMLevel { get; set; }
        public Int32? RecursionLevel { get; set; }
    }

    public class UspGetEmployeeManagersReturnModel
    {
        public Int32? RecursionLevel { get; set; }
        public Int32? EmployeeID { get; set; }
        public String FirstName { get; set; }
        public String LastName { get; set; }
        public Int32? ManagerID { get; set; }
        public String ManagerFirstName { get; set; }
        public String ManagerLastName { get; set; }
    }

    public class UspGetManagerEmployeesReturnModel
    {
        public Int32? RecursionLevel { get; set; }
        public Int32? ManagerID { get; set; }
        public String ManagerFirstName { get; set; }
        public String ManagerLastName { get; set; }
        public Int32? EmployeeID { get; set; }
        public String FirstName { get; set; }
        public String LastName { get; set; }
    }

    public class UspGetWhereUsedProductIdReturnModel
    {
        public Int32? ProductAssemblyID { get; set; }
        public Int32? ComponentID { get; set; }
        public String ComponentDesc { get; set; }
        public Decimal? TotalQuantity { get; set; }
        public Decimal? StandardCost { get; set; }
        public Decimal? ListPrice { get; set; }
        public Int16? BOMLevel { get; set; }
        public Int32? RecursionLevel { get; set; }
    }

}
// </auto-generated>

