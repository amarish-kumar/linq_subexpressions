

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
// 
// Do not make changes directly to this file - edit the template instead.
// 
// The following connection settings were used to generate this file:
//     Configuration file:     "Linq.Subexpressions\App.config"
//     Connection String Name: "AdventureWorks"
//     Connection String:      "Data Source=BSBZGV1\MSSQLSERVER2012;Initial Catalog=AdventureWorksLT2012;Integrated Security=True;"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Developer Edition (64-bit)
// Database Engine Edition: Enterprise

// <auto-generated>
// ReSharper disable RedundantUsingDirective
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable RedundantNameQualifier
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Data.Entity.Infrastructure;
using System.Linq.Expressions;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data;
using System.Data.Entity.Core.Objects;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Data.Entity.ModelConfiguration;
using System.Threading;
using DatabaseGeneratedOption = System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption;

namespace Linq.Subexpressions
{
    // ************************************************************************
    // Unit of work
    public interface IMyDbContext : IDisposable
    {
        DbSet<Address> Addresses { get; set; } // Address
        DbSet<BuildVersion> BuildVersions { get; set; } // BuildVersion
        DbSet<Customer> Customers { get; set; } // Customer
        DbSet<CustomerAddress> CustomerAddresses { get; set; } // CustomerAddress
        DbSet<ErrorLog> ErrorLogs { get; set; } // ErrorLog
        DbSet<Product> Products { get; set; } // Product
        DbSet<ProductCategory> ProductCategories { get; set; } // ProductCategory
        DbSet<ProductDescription> ProductDescriptions { get; set; } // ProductDescription
        DbSet<ProductModel> ProductModels { get; set; } // ProductModel
        DbSet<ProductModelProductDescription> ProductModelProductDescriptions { get; set; } // ProductModelProductDescription
        DbSet<SalesOrderDetail> SalesOrderDetails { get; set; } // SalesOrderDetail
        DbSet<SalesOrderHeader> SalesOrderHeaders { get; set; } // SalesOrderHeader
        DbSet<VGetAllCategory> VGetAllCategories { get; set; } // vGetAllCategories
        DbSet<VProductAndDescription> VProductAndDescriptions { get; set; } // vProductAndDescription
        DbSet<VProductModelCatalogDescription> VProductModelCatalogDescriptions { get; set; } // vProductModelCatalogDescription

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(CancellationToken cancellationToken);
        
        // Stored Procedures
        int UspLogError(out int? errorLogId);
        int UspPrintError();
    }

    // ************************************************************************
    // Database context
    public class MyDbContext : DbContext, IMyDbContext
    {
        public DbSet<Address> Addresses { get; set; } // Address
        public DbSet<BuildVersion> BuildVersions { get; set; } // BuildVersion
        public DbSet<Customer> Customers { get; set; } // Customer
        public DbSet<CustomerAddress> CustomerAddresses { get; set; } // CustomerAddress
        public DbSet<ErrorLog> ErrorLogs { get; set; } // ErrorLog
        public DbSet<Product> Products { get; set; } // Product
        public DbSet<ProductCategory> ProductCategories { get; set; } // ProductCategory
        public DbSet<ProductDescription> ProductDescriptions { get; set; } // ProductDescription
        public DbSet<ProductModel> ProductModels { get; set; } // ProductModel
        public DbSet<ProductModelProductDescription> ProductModelProductDescriptions { get; set; } // ProductModelProductDescription
        public DbSet<SalesOrderDetail> SalesOrderDetails { get; set; } // SalesOrderDetail
        public DbSet<SalesOrderHeader> SalesOrderHeaders { get; set; } // SalesOrderHeader
        public DbSet<VGetAllCategory> VGetAllCategories { get; set; } // vGetAllCategories
        public DbSet<VProductAndDescription> VProductAndDescriptions { get; set; } // vProductAndDescription
        public DbSet<VProductModelCatalogDescription> VProductModelCatalogDescriptions { get; set; } // vProductModelCatalogDescription
        
        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        public MyDbContext()
            : base("Name=AdventureWorks")
        {
        }

        public MyDbContext(string connectionString) : base(connectionString)
        {
        }

        public MyDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model) : base(connectionString, model)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AddressConfiguration());
            modelBuilder.Configurations.Add(new BuildVersionConfiguration());
            modelBuilder.Configurations.Add(new CustomerConfiguration());
            modelBuilder.Configurations.Add(new CustomerAddressConfiguration());
            modelBuilder.Configurations.Add(new ErrorLogConfiguration());
            modelBuilder.Configurations.Add(new ProductConfiguration());
            modelBuilder.Configurations.Add(new ProductCategoryConfiguration());
            modelBuilder.Configurations.Add(new ProductDescriptionConfiguration());
            modelBuilder.Configurations.Add(new ProductModelConfiguration());
            modelBuilder.Configurations.Add(new ProductModelProductDescriptionConfiguration());
            modelBuilder.Configurations.Add(new SalesOrderDetailConfiguration());
            modelBuilder.Configurations.Add(new SalesOrderHeaderConfiguration());
            modelBuilder.Configurations.Add(new VGetAllCategoryConfiguration());
            modelBuilder.Configurations.Add(new VProductAndDescriptionConfiguration());
            modelBuilder.Configurations.Add(new VProductModelCatalogDescriptionConfiguration());
        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AddressConfiguration(schema));
            modelBuilder.Configurations.Add(new BuildVersionConfiguration(schema));
            modelBuilder.Configurations.Add(new CustomerConfiguration(schema));
            modelBuilder.Configurations.Add(new CustomerAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new ErrorLogConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductDescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductModelConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductModelProductDescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesOrderDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesOrderHeaderConfiguration(schema));
            modelBuilder.Configurations.Add(new VGetAllCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new VProductAndDescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new VProductModelCatalogDescriptionConfiguration(schema));
            return modelBuilder;
        }
        
        // Stored Procedures
        public int UspLogError(out int? errorLogId)
        {
            var errorLogIdParam = new SqlParameter { ParameterName = "@ErrorLogID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspLogError] @ErrorLogID OUTPUT", errorLogIdParam, procResultParam);
            if (IsSqlParameterNull(errorLogIdParam))
                errorLogId = null;
            else
                errorLogId = (int) errorLogIdParam.Value;
 
            return (int) procResultParam.Value;
        }

        public int UspPrintError()
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspPrintError] ", procResultParam);
 
            return (int) procResultParam.Value;
        }

    }

    // ************************************************************************
    // Fake Database context
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class FakeMyDbContext : IMyDbContext
    {
        public DbSet<Address> Addresses { get; set; }
        public DbSet<BuildVersion> BuildVersions { get; set; }
        public DbSet<Customer> Customers { get; set; }
        public DbSet<CustomerAddress> CustomerAddresses { get; set; }
        public DbSet<ErrorLog> ErrorLogs { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<ProductCategory> ProductCategories { get; set; }
        public DbSet<ProductDescription> ProductDescriptions { get; set; }
        public DbSet<ProductModel> ProductModels { get; set; }
        public DbSet<ProductModelProductDescription> ProductModelProductDescriptions { get; set; }
        public DbSet<SalesOrderDetail> SalesOrderDetails { get; set; }
        public DbSet<SalesOrderHeader> SalesOrderHeaders { get; set; }
        public DbSet<VGetAllCategory> VGetAllCategories { get; set; }
        public DbSet<VProductAndDescription> VProductAndDescriptions { get; set; }
        public DbSet<VProductModelCatalogDescription> VProductModelCatalogDescriptions { get; set; }

        public FakeMyDbContext()
        {
            Addresses = new FakeDbSet<Address>();
            BuildVersions = new FakeDbSet<BuildVersion>();
            Customers = new FakeDbSet<Customer>();
            CustomerAddresses = new FakeDbSet<CustomerAddress>();
            ErrorLogs = new FakeDbSet<ErrorLog>();
            Products = new FakeDbSet<Product>();
            ProductCategories = new FakeDbSet<ProductCategory>();
            ProductDescriptions = new FakeDbSet<ProductDescription>();
            ProductModels = new FakeDbSet<ProductModel>();
            ProductModelProductDescriptions = new FakeDbSet<ProductModelProductDescription>();
            SalesOrderDetails = new FakeDbSet<SalesOrderDetail>();
            SalesOrderHeaders = new FakeDbSet<SalesOrderHeader>();
            VGetAllCategories = new FakeDbSet<VGetAllCategory>();
            VProductAndDescriptions = new FakeDbSet<VProductAndDescription>();
            VProductModelCatalogDescriptions = new FakeDbSet<VProductModelCatalogDescription>();
        }
        
        public int SaveChangesCount { get; private set; } 
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }
        
        public void Dispose()
        {
            Dispose(true);
        }
        
        // Stored Procedures
        public int UspLogError(out int? errorLogId)
        {
            errorLogId = default(int);
 
            return 0;
        }

        public int UspPrintError()
        {
 
            return 0;
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable, IEnumerable<TEntity>, IDbAsyncEnumerable<TEntity> 
        where TEntity : class 
    { 
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;
 
        public FakeDbSet() 
        { 
            _data = new ObservableCollection<TEntity>(); 
            _query = _data.AsQueryable(); 
        }

        public override IEnumerable<TEntity> AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }
        
        public override TEntity Add(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Remove(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Remove(item); 
            return item; 
        } 
 
        public override TEntity Attach(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Create() 
        { 
            return Activator.CreateInstance<TEntity>(); 
        } 
 
        public override TDerivedEntity Create<TDerivedEntity>() 
        { 
            return Activator.CreateInstance<TDerivedEntity>(); 
        } 
 
        public override ObservableCollection<TEntity> Local 
        { 
            get { return _data; } 
        } 
 
        Type IQueryable.ElementType 
        { 
            get { return _query.ElementType; } 
        } 
 
        Expression IQueryable.Expression 
        { 
            get { return _query.Expression; } 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); } 
        } 
 
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        IDbAsyncEnumerator<TEntity> IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator()); 
        }
    } 
 
    public class FakeDbAsyncQueryProvider<TEntity> : IDbAsyncQueryProvider 
    { 
        private readonly IQueryProvider _inner; 
 
        public FakeDbAsyncQueryProvider(IQueryProvider inner) 
        { 
            _inner = inner; 
        } 
 
        public IQueryable CreateQuery(Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TEntity>(expression); 
        } 
 
        public IQueryable<TElement> CreateQuery<TElement>(Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TElement>(expression); 
        } 
 
        public object Execute(Expression expression) 
        { 
            return _inner.Execute(expression); 
        } 
 
        public TResult Execute<TResult>(Expression expression) 
        { 
            return _inner.Execute<TResult>(expression); 
        } 
 
        public System.Threading.Tasks.Task<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute(expression)); 
        } 
 
        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression)); 
        } 
    } 
 
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IDbAsyncEnumerable<T>, IQueryable<T> 
    { 
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable) 
            : base(enumerable) 
        { } 
 
        public FakeDbAsyncEnumerable(Expression expression) 
            : base(expression) 
        { } 
 
        public IDbAsyncEnumerator<T> GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator()); 
        } 
 
        IDbAsyncEnumerator IDbAsyncEnumerable.GetAsyncEnumerator() 
        { 
            return GetAsyncEnumerator(); 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<T>(this); } 
        } 
    } 
 
    public class FakeDbAsyncEnumerator<T> : IDbAsyncEnumerator<T> 
    { 
        private readonly IEnumerator<T> _inner; 
 
        public FakeDbAsyncEnumerator(IEnumerator<T> inner) 
        { 
            _inner = inner; 
        } 
 
        public void Dispose() 
        { 
            _inner.Dispose(); 
        } 
 
        public System.Threading.Tasks.Task<bool> MoveNextAsync(CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext()); 
        } 
 
        public T Current 
        { 
            get { return _inner.Current; } 
        } 
 
        object IDbAsyncEnumerator.Current 
        { 
            get { return Current; } 
        } 
    }

    // ************************************************************************
    // POCO classes

    // Address
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class Address
    {
        public int AddressId { get; set; } // AddressID (Primary key). Primary key for Address records.
        public string AddressLine1 { get; set; } // AddressLine1. First street address line.
        public string AddressLine2 { get; set; } // AddressLine2. Second street address line.
        public string City { get; set; } // City. Name of the city.
        public string StateProvince { get; set; } // StateProvince. Name of state or province.
        public string CountryRegion { get; set; } // CountryRegion
        public string PostalCode { get; set; } // PostalCode. Postal code for the street address.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<CustomerAddress> CustomerAddresses { get; set; } // Many to many mapping
        public virtual ICollection<SalesOrderHeader> SalesOrderHeaders_BillToAddressId { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_Address_BillTo_AddressID
        public virtual ICollection<SalesOrderHeader> SalesOrderHeaders_ShipToAddressId { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_Address_ShipTo_AddressID
        
        public Address()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            CustomerAddresses = new List<CustomerAddress>();
            SalesOrderHeaders_BillToAddressId = new List<SalesOrderHeader>();
            SalesOrderHeaders_ShipToAddressId = new List<SalesOrderHeader>();
        }
    }

    // BuildVersion
    public class BuildVersion
    {
        public byte SystemInformationId { get; set; } // SystemInformationID. Primary key for BuildVersion records.
        public string DatabaseVersion { get; set; } // Database Version. Version number of the database in 9.yy.mm.dd.00 format.
        public DateTime VersionDate { get; set; } // VersionDate. Date and time the record was last updated.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.
        
        public BuildVersion()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // Customer
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class Customer
    {
        public int CustomerId { get; set; } // CustomerID (Primary key). Primary key for Customer records.
        public bool NameStyle { get; set; } // NameStyle. 0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order.
        public string Title { get; set; } // Title. A courtesy title. For example, Mr. or Ms.
        public string FirstName { get; set; } // FirstName. First name of the person.
        public string MiddleName { get; set; } // MiddleName. Middle name or middle initial of the person.
        public string LastName { get; set; } // LastName. Last name of the person.
        public string Suffix { get; set; } // Suffix. Surname suffix. For example, Sr. or Jr.
        public string CompanyName { get; set; } // CompanyName. The customer's organization.
        public string SalesPerson { get; set; } // SalesPerson. The customer's sales person, an employee of AdventureWorks Cycles.
        public string EmailAddress { get; set; } // EmailAddress. E-mail address for the person.
        public string Phone { get; set; } // Phone. Phone number associated with the person.
        public string PasswordHash { get; set; } // PasswordHash. Password for the e-mail account.
        public string PasswordSalt { get; set; } // PasswordSalt. Random value concatenated with the password string before the password is hashed.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<CustomerAddress> CustomerAddresses { get; set; } // Many to many mapping
        public virtual ICollection<SalesOrderHeader> SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_Customer_CustomerID
        
        public Customer()
        {
            NameStyle = false;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            CustomerAddresses = new List<CustomerAddress>();
            SalesOrderHeaders = new List<SalesOrderHeader>();
        }
    }

    // CustomerAddress
    public class CustomerAddress
    {
        public int CustomerId { get; set; } // CustomerID (Primary key). Primary key. Foreign key to Customer.CustomerID.
        public int AddressId { get; set; } // AddressID (Primary key). Primary key. Foreign key to Address.AddressID.
        public string AddressType { get; set; } // AddressType. The kind of Address. One of: Archive, Billing, Home, Main Office, Primary, Shipping
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual Address Address { get; set; } // FK_CustomerAddress_Address_AddressID
        public virtual Customer Customer { get; set; } // FK_CustomerAddress_Customer_CustomerID
        
        public CustomerAddress()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ErrorLog
    public class ErrorLog
    {
        public int ErrorLogId { get; set; } // ErrorLogID (Primary key). Primary key for ErrorLog records.
        public DateTime ErrorTime { get; set; } // ErrorTime. The date and time at which the error occurred.
        public string UserName { get; set; } // UserName. The user who executed the batch in which the error occurred.
        public int ErrorNumber { get; set; } // ErrorNumber. The error number of the error that occurred.
        public int? ErrorSeverity { get; set; } // ErrorSeverity. The severity of the error that occurred.
        public int? ErrorState { get; set; } // ErrorState. The state number of the error that occurred.
        public string ErrorProcedure { get; set; } // ErrorProcedure. The name of the stored procedure or trigger where the error occurred.
        public int? ErrorLine { get; set; } // ErrorLine. The line number at which the error occurred.
        public string ErrorMessage { get; set; } // ErrorMessage. The message text of the error that occurred.
        
        public ErrorLog()
        {
            ErrorTime = System.DateTime.Now;
        }
    }

    // Product
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class Product
    {
        public int ProductId { get; set; } // ProductID (Primary key). Primary key for Product records.
        public string Name { get; set; } // Name. Name of the product.
        public string ProductNumber { get; set; } // ProductNumber. Unique product identification number.
        public string Color { get; set; } // Color. Product color.
        public decimal StandardCost { get; set; } // StandardCost. Standard cost of the product.
        public decimal ListPrice { get; set; } // ListPrice. Selling price.
        public string Size { get; set; } // Size. Product size.
        public decimal? Weight { get; set; } // Weight. Product weight.
        public int? ProductCategoryId { get; set; } // ProductCategoryID. Product is a member of this product category. Foreign key to ProductCategory.ProductCategoryID.
        public int? ProductModelId { get; set; } // ProductModelID. Product is a member of this product model. Foreign key to ProductModel.ProductModelID.
        public DateTime SellStartDate { get; set; } // SellStartDate. Date the product was available for sale.
        public DateTime? SellEndDate { get; set; } // SellEndDate. Date the product was no longer available for sale.
        public DateTime? DiscontinuedDate { get; set; } // DiscontinuedDate. Date the product was discontinued.
        public byte[] ThumbNailPhoto { get; set; } // ThumbNailPhoto. Small image of the product.
        public string ThumbnailPhotoFileName { get; set; } // ThumbnailPhotoFileName. Small image file name.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<SalesOrderDetail> SalesOrderDetails { get; set; } // SalesOrderDetail.FK_SalesOrderDetail_Product_ProductID

        // Foreign keys
        public virtual ProductCategory ProductCategory { get; set; } // FK_Product_ProductCategory_ProductCategoryID
        public virtual ProductModel ProductModel { get; set; } // FK_Product_ProductModel_ProductModelID
        
        public Product()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            SalesOrderDetails = new List<SalesOrderDetail>();
        }
    }

    // ProductCategory
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class ProductCategory
    {
        public int ProductCategoryId { get; set; } // ProductCategoryID (Primary key). Primary key for ProductCategory records.
        public int? ParentProductCategoryId { get; set; } // ParentProductCategoryID. Product category identification number of immediate ancestor category. Foreign key to ProductCategory.ProductCategoryID.
        public string Name { get; set; } // Name. Category description.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<Product> Products { get; set; } // Product.FK_Product_ProductCategory_ProductCategoryID
        public virtual ICollection<ProductCategory> ProductCategories { get; set; } // ProductCategory.FK_ProductCategory_ProductCategory_ParentProductCategoryID_ProductCategoryID

        // Foreign keys
        public virtual ProductCategory ProductCategory_ParentProductCategoryId { get; set; } // FK_ProductCategory_ProductCategory_ParentProductCategoryID_ProductCategoryID
        
        public ProductCategory()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Products = new List<Product>();
            ProductCategories = new List<ProductCategory>();
        }
    }

    // ProductDescription
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class ProductDescription
    {
        public int ProductDescriptionId { get; set; } // ProductDescriptionID (Primary key). Primary key for ProductDescription records.
        public string Description { get; set; } // Description. Description of the product.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<ProductModelProductDescription> ProductModelProductDescriptions { get; set; } // Many to many mapping
        
        public ProductDescription()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            ProductModelProductDescriptions = new List<ProductModelProductDescription>();
        }
    }

    // ProductModel
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class ProductModel
    {
        public int ProductModelId { get; set; } // ProductModelID (Primary key)
        public string Name { get; set; } // Name
        public string CatalogDescription { get; set; } // CatalogDescription
        public Guid Rowguid { get; set; } // rowguid
        public DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual ICollection<Product> Products { get; set; } // Product.FK_Product_ProductModel_ProductModelID
        public virtual ICollection<ProductModelProductDescription> ProductModelProductDescriptions { get; set; } // Many to many mapping
        
        public ProductModel()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Products = new List<Product>();
            ProductModelProductDescriptions = new List<ProductModelProductDescription>();
        }
    }

    // ProductModelProductDescription
    public class ProductModelProductDescription
    {
        public int ProductModelId { get; set; } // ProductModelID (Primary key). Primary key. Foreign key to ProductModel.ProductModelID.
        public int ProductDescriptionId { get; set; } // ProductDescriptionID (Primary key). Primary key. Foreign key to ProductDescription.ProductDescriptionID.
        public string Culture { get; set; } // Culture (Primary key). The culture for which the description is written
        public Guid Rowguid { get; set; } // rowguid
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual ProductDescription ProductDescription { get; set; } // FK_ProductModelProductDescription_ProductDescription_ProductDescriptionID
        public virtual ProductModel ProductModel { get; set; } // FK_ProductModelProductDescription_ProductModel_ProductModelID
        
        public ProductModelProductDescription()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // SalesOrderDetail
    public class SalesOrderDetail
    {
        public int SalesOrderId { get; set; } // SalesOrderID (Primary key). Primary key. Foreign key to SalesOrderHeader.SalesOrderID.
        public int SalesOrderDetailId { get; set; } // SalesOrderDetailID (Primary key). Primary key. One incremental unique number per product sold.
        public short OrderQty { get; set; } // OrderQty. Quantity ordered per product.
        public int ProductId { get; set; } // ProductID. Product sold to customer. Foreign key to Product.ProductID.
        public decimal UnitPrice { get; set; } // UnitPrice. Selling price of a single product.
        public decimal UnitPriceDiscount { get; set; } // UnitPriceDiscount. Discount amount.
        public decimal LineTotal { get; set; } // LineTotal. Per product subtotal. Computed as UnitPrice * (1 - UnitPriceDiscount) * OrderQty.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Foreign keys
        public virtual Product Product { get; set; } // FK_SalesOrderDetail_Product_ProductID
        public virtual SalesOrderHeader SalesOrderHeader { get; set; } // FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID
        
        public SalesOrderDetail()
        {
            UnitPriceDiscount = 0.0m;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // SalesOrderHeader
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.0.0")]
    public class SalesOrderHeader
    {
        public int SalesOrderId { get; set; } // SalesOrderID (Primary key). Primary key.
        public byte RevisionNumber { get; set; } // RevisionNumber. Incremental number to track changes to the sales order over time.
        public DateTime OrderDate { get; set; } // OrderDate. Dates the sales order was created.
        public DateTime DueDate { get; set; } // DueDate. Date the order is due to the customer.
        public DateTime? ShipDate { get; set; } // ShipDate. Date the order was shipped to the customer.
        public byte Status { get; set; } // Status. Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled
        public bool OnlineOrderFlag { get; set; } // OnlineOrderFlag. 0 = Order placed by sales person. 1 = Order placed online by customer.
        public string SalesOrderNumber { get; set; } // SalesOrderNumber. Unique sales order identification number.
        public string PurchaseOrderNumber { get; set; } // PurchaseOrderNumber. Customer purchase order number reference.
        public string AccountNumber { get; set; } // AccountNumber. Financial accounting number reference.
        public int CustomerId { get; set; } // CustomerID. Customer identification number. Foreign key to Customer.CustomerID.
        public int? ShipToAddressId { get; set; } // ShipToAddressID. The ID of the location to send goods.  Foreign key to the Address table.
        public int? BillToAddressId { get; set; } // BillToAddressID. The ID of the location to send invoices.  Foreign key to the Address table.
        public string ShipMethod { get; set; } // ShipMethod. Shipping method. Foreign key to ShipMethod.ShipMethodID.
        public string CreditCardApprovalCode { get; set; } // CreditCardApprovalCode. Approval code provided by the credit card company.
        public decimal SubTotal { get; set; } // SubTotal. Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.
        public decimal TaxAmt { get; set; } // TaxAmt. Tax amount.
        public decimal Freight { get; set; } // Freight. Shipping cost.
        public decimal TotalDue { get; set; } // TotalDue. Total due from customer. Computed as Subtotal + TaxAmt + Freight.
        public string Comment { get; set; } // Comment. Sales representative comments.
        public Guid Rowguid { get; set; } // rowguid. ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        public DateTime ModifiedDate { get; set; } // ModifiedDate. Date and time the record was last updated.

        // Reverse navigation
        public virtual ICollection<SalesOrderDetail> SalesOrderDetails { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Address Address_BillToAddressId { get; set; } // FK_SalesOrderHeader_Address_BillTo_AddressID
        public virtual Address Address_ShipToAddressId { get; set; } // FK_SalesOrderHeader_Address_ShipTo_AddressID
        public virtual Customer Customer { get; set; } // FK_SalesOrderHeader_Customer_CustomerID
        
        public SalesOrderHeader()
        {
            RevisionNumber = 0;
            OrderDate = System.DateTime.Now;
            Status = 1;
            OnlineOrderFlag = true;
            SubTotal = 0.00m;
            TaxAmt = 0.00m;
            Freight = 0.00m;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            SalesOrderDetails = new List<SalesOrderDetail>();
        }
    }

    // vGetAllCategories
    public class VGetAllCategory
    {
        public string ParentProductCategoryName { get; set; } // ParentProductCategoryName
        public string ProductCategoryName { get; set; } // ProductCategoryName
        public int? ProductCategoryId { get; set; } // ProductCategoryID
    }

    // vProductAndDescription
    public class VProductAndDescription
    {
        public int ProductId { get; set; } // ProductID
        public string Name { get; set; } // Name
        public string ProductModel { get; set; } // ProductModel
        public string Culture { get; set; } // Culture
        public string Description { get; set; } // Description
    }

    // vProductModelCatalogDescription
    public class VProductModelCatalogDescription
    {
        public int ProductModelId { get; set; } // ProductModelID
        public string Name { get; set; } // Name
        public string Summary { get; set; } // Summary
        public string Manufacturer { get; set; } // Manufacturer
        public string Copyright { get; set; } // Copyright
        public string ProductUrl { get; set; } // ProductURL
        public string WarrantyPeriod { get; set; } // WarrantyPeriod
        public string WarrantyDescription { get; set; } // WarrantyDescription
        public string NoOfYears { get; set; } // NoOfYears
        public string MaintenanceDescription { get; set; } // MaintenanceDescription
        public string Wheel { get; set; } // Wheel
        public string Saddle { get; set; } // Saddle
        public string Pedal { get; set; } // Pedal
        public string BikeFrame { get; set; } // BikeFrame
        public string Crankset { get; set; } // Crankset
        public string PictureAngle { get; set; } // PictureAngle
        public string PictureSize { get; set; } // PictureSize
        public string ProductPhotoId { get; set; } // ProductPhotoID
        public string Material { get; set; } // Material
        public string Color { get; set; } // Color
        public string ProductLine { get; set; } // ProductLine
        public string Style { get; set; } // Style
        public string RiderExperience { get; set; } // RiderExperience
        public Guid Rowguid { get; set; } // rowguid
        public DateTime ModifiedDate { get; set; } // ModifiedDate
    }


    // ************************************************************************
    // POCO Configuration

    // Address
    public class AddressConfiguration : EntityTypeConfiguration<Address>
    {
        public AddressConfiguration()
            : this("SalesLT")
        {
        }
 
        public AddressConfiguration(string schema)
        {
            ToTable(schema + ".Address");
            HasKey(x => x.AddressId);

            Property(x => x.AddressId).HasColumnName("AddressID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.AddressLine1).HasColumnName("AddressLine1").IsRequired().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.AddressLine2).HasColumnName("AddressLine2").IsOptional().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.City).HasColumnName("City").IsRequired().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.StateProvince).HasColumnName("StateProvince").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CountryRegion).HasColumnName("CountryRegion").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.PostalCode).HasColumnName("PostalCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // BuildVersion
    public class BuildVersionConfiguration : EntityTypeConfiguration<BuildVersion>
    {
        public BuildVersionConfiguration()
            : this("dbo")
        {
        }
 
        public BuildVersionConfiguration(string schema)
        {
            ToTable(schema + ".BuildVersion");
            HasKey(x => new { x.SystemInformationId, x.DatabaseVersion, x.VersionDate, x.ModifiedDate });

            Property(x => x.SystemInformationId).HasColumnName("SystemInformationID").IsRequired().HasColumnType("tinyint").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.DatabaseVersion).HasColumnName("Database Version").IsRequired().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.VersionDate).HasColumnName("VersionDate").IsRequired().HasColumnType("datetime");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // Customer
    public class CustomerConfiguration : EntityTypeConfiguration<Customer>
    {
        public CustomerConfiguration()
            : this("SalesLT")
        {
        }
 
        public CustomerConfiguration(string schema)
        {
            ToTable(schema + ".Customer");
            HasKey(x => x.CustomerId);

            Property(x => x.CustomerId).HasColumnName("CustomerID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.NameStyle).HasColumnName("NameStyle").IsRequired().HasColumnType("bit");
            Property(x => x.Title).HasColumnName("Title").IsOptional().HasColumnType("nvarchar").HasMaxLength(8);
            Property(x => x.FirstName).HasColumnName("FirstName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName("MiddleName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LastName).HasColumnName("LastName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Suffix).HasColumnName("Suffix").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.CompanyName).HasColumnName("CompanyName").IsOptional().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.SalesPerson).HasColumnName("SalesPerson").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.EmailAddress).HasColumnName("EmailAddress").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Phone).HasColumnName("Phone").IsOptional().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.PasswordHash).HasColumnName("PasswordHash").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(128);
            Property(x => x.PasswordSalt).HasColumnName("PasswordSalt").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // CustomerAddress
    public class CustomerAddressConfiguration : EntityTypeConfiguration<CustomerAddress>
    {
        public CustomerAddressConfiguration()
            : this("SalesLT")
        {
        }
 
        public CustomerAddressConfiguration(string schema)
        {
            ToTable(schema + ".CustomerAddress");
            HasKey(x => new { x.CustomerId, x.AddressId });

            Property(x => x.CustomerId).HasColumnName("CustomerID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.AddressId).HasColumnName("AddressID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.AddressType).HasColumnName("AddressType").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Address).WithMany(b => b.CustomerAddresses).HasForeignKey(c => c.AddressId); // FK_CustomerAddress_Address_AddressID
            HasRequired(a => a.Customer).WithMany(b => b.CustomerAddresses).HasForeignKey(c => c.CustomerId); // FK_CustomerAddress_Customer_CustomerID
        }
    }

    // ErrorLog
    public class ErrorLogConfiguration : EntityTypeConfiguration<ErrorLog>
    {
        public ErrorLogConfiguration()
            : this("dbo")
        {
        }
 
        public ErrorLogConfiguration(string schema)
        {
            ToTable(schema + ".ErrorLog");
            HasKey(x => x.ErrorLogId);

            Property(x => x.ErrorLogId).HasColumnName("ErrorLogID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ErrorTime).HasColumnName("ErrorTime").IsRequired().HasColumnType("datetime");
            Property(x => x.UserName).HasColumnName("UserName").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.ErrorNumber).HasColumnName("ErrorNumber").IsRequired().HasColumnType("int");
            Property(x => x.ErrorSeverity).HasColumnName("ErrorSeverity").IsOptional().HasColumnType("int");
            Property(x => x.ErrorState).HasColumnName("ErrorState").IsOptional().HasColumnType("int");
            Property(x => x.ErrorProcedure).HasColumnName("ErrorProcedure").IsOptional().HasColumnType("nvarchar").HasMaxLength(126);
            Property(x => x.ErrorLine).HasColumnName("ErrorLine").IsOptional().HasColumnType("int");
            Property(x => x.ErrorMessage).HasColumnName("ErrorMessage").IsRequired().HasColumnType("nvarchar").HasMaxLength(4000);
        }
    }

    // Product
    public class ProductConfiguration : EntityTypeConfiguration<Product>
    {
        public ProductConfiguration()
            : this("SalesLT")
        {
        }
 
        public ProductConfiguration(string schema)
        {
            ToTable(schema + ".Product");
            HasKey(x => x.ProductId);

            Property(x => x.ProductId).HasColumnName("ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ProductNumber).HasColumnName("ProductNumber").IsRequired().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.Color).HasColumnName("Color").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.StandardCost).HasColumnName("StandardCost").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ListPrice).HasColumnName("ListPrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Size).HasColumnName("Size").IsOptional().HasColumnType("nvarchar").HasMaxLength(5);
            Property(x => x.Weight).HasColumnName("Weight").IsOptional().HasColumnType("decimal").HasPrecision(8,2);
            Property(x => x.ProductCategoryId).HasColumnName("ProductCategoryID").IsOptional().HasColumnType("int");
            Property(x => x.ProductModelId).HasColumnName("ProductModelID").IsOptional().HasColumnType("int");
            Property(x => x.SellStartDate).HasColumnName("SellStartDate").IsRequired().HasColumnType("datetime");
            Property(x => x.SellEndDate).HasColumnName("SellEndDate").IsOptional().HasColumnType("datetime");
            Property(x => x.DiscontinuedDate).HasColumnName("DiscontinuedDate").IsOptional().HasColumnType("datetime");
            Property(x => x.ThumbNailPhoto).HasColumnName("ThumbNailPhoto").IsOptional().HasColumnType("varbinary");
            Property(x => x.ThumbnailPhotoFileName).HasColumnName("ThumbnailPhotoFileName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.ProductCategory).WithMany(b => b.Products).HasForeignKey(c => c.ProductCategoryId); // FK_Product_ProductCategory_ProductCategoryID
            HasOptional(a => a.ProductModel).WithMany(b => b.Products).HasForeignKey(c => c.ProductModelId); // FK_Product_ProductModel_ProductModelID
        }
    }

    // ProductCategory
    public class ProductCategoryConfiguration : EntityTypeConfiguration<ProductCategory>
    {
        public ProductCategoryConfiguration()
            : this("SalesLT")
        {
        }
 
        public ProductCategoryConfiguration(string schema)
        {
            ToTable(schema + ".ProductCategory");
            HasKey(x => x.ProductCategoryId);

            Property(x => x.ProductCategoryId).HasColumnName("ProductCategoryID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ParentProductCategoryId).HasColumnName("ParentProductCategoryID").IsOptional().HasColumnType("int");
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.ProductCategory_ParentProductCategoryId).WithMany(b => b.ProductCategories).HasForeignKey(c => c.ParentProductCategoryId); // FK_ProductCategory_ProductCategory_ParentProductCategoryID_ProductCategoryID
        }
    }

    // ProductDescription
    public class ProductDescriptionConfiguration : EntityTypeConfiguration<ProductDescription>
    {
        public ProductDescriptionConfiguration()
            : this("SalesLT")
        {
        }
 
        public ProductDescriptionConfiguration(string schema)
        {
            ToTable(schema + ".ProductDescription");
            HasKey(x => x.ProductDescriptionId);

            Property(x => x.ProductDescriptionId).HasColumnName("ProductDescriptionID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName("Description").IsRequired().HasColumnType("nvarchar").HasMaxLength(400);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // ProductModel
    public class ProductModelConfiguration : EntityTypeConfiguration<ProductModel>
    {
        public ProductModelConfiguration()
            : this("SalesLT")
        {
        }
 
        public ProductModelConfiguration(string schema)
        {
            ToTable(schema + ".ProductModel");
            HasKey(x => x.ProductModelId);

            Property(x => x.ProductModelId).HasColumnName("ProductModelID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CatalogDescription).HasColumnName("CatalogDescription").IsOptional().HasColumnType("xml");
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // ProductModelProductDescription
    public class ProductModelProductDescriptionConfiguration : EntityTypeConfiguration<ProductModelProductDescription>
    {
        public ProductModelProductDescriptionConfiguration()
            : this("SalesLT")
        {
        }
 
        public ProductModelProductDescriptionConfiguration(string schema)
        {
            ToTable(schema + ".ProductModelProductDescription");
            HasKey(x => new { x.ProductModelId, x.ProductDescriptionId, x.Culture });

            Property(x => x.ProductModelId).HasColumnName("ProductModelID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ProductDescriptionId).HasColumnName("ProductDescriptionID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Culture).HasColumnName("Culture").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(6).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.ProductDescription).WithMany(b => b.ProductModelProductDescriptions).HasForeignKey(c => c.ProductDescriptionId); // FK_ProductModelProductDescription_ProductDescription_ProductDescriptionID
            HasRequired(a => a.ProductModel).WithMany(b => b.ProductModelProductDescriptions).HasForeignKey(c => c.ProductModelId); // FK_ProductModelProductDescription_ProductModel_ProductModelID
        }
    }

    // SalesOrderDetail
    public class SalesOrderDetailConfiguration : EntityTypeConfiguration<SalesOrderDetail>
    {
        public SalesOrderDetailConfiguration()
            : this("SalesLT")
        {
        }
 
        public SalesOrderDetailConfiguration(string schema)
        {
            ToTable(schema + ".SalesOrderDetail");
            HasKey(x => new { x.SalesOrderId, x.SalesOrderDetailId });

            Property(x => x.SalesOrderId).HasColumnName("SalesOrderID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.SalesOrderDetailId).HasColumnName("SalesOrderDetailID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.OrderQty).HasColumnName("OrderQty").IsRequired().HasColumnType("smallint");
            Property(x => x.ProductId).HasColumnName("ProductID").IsRequired().HasColumnType("int");
            Property(x => x.UnitPrice).HasColumnName("UnitPrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.UnitPriceDiscount).HasColumnName("UnitPriceDiscount").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.LineTotal).HasColumnName("LineTotal").IsRequired().HasColumnType("numeric").HasPrecision(38,6).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Product).WithMany(b => b.SalesOrderDetails).HasForeignKey(c => c.ProductId); // FK_SalesOrderDetail_Product_ProductID
            HasRequired(a => a.SalesOrderHeader).WithMany(b => b.SalesOrderDetails).HasForeignKey(c => c.SalesOrderId); // FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID
        }
    }

    // SalesOrderHeader
    public class SalesOrderHeaderConfiguration : EntityTypeConfiguration<SalesOrderHeader>
    {
        public SalesOrderHeaderConfiguration()
            : this("SalesLT")
        {
        }
 
        public SalesOrderHeaderConfiguration(string schema)
        {
            ToTable(schema + ".SalesOrderHeader");
            HasKey(x => x.SalesOrderId);

            Property(x => x.SalesOrderId).HasColumnName("SalesOrderID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.RevisionNumber).HasColumnName("RevisionNumber").IsRequired().HasColumnType("tinyint");
            Property(x => x.OrderDate).HasColumnName("OrderDate").IsRequired().HasColumnType("datetime");
            Property(x => x.DueDate).HasColumnName("DueDate").IsRequired().HasColumnType("datetime");
            Property(x => x.ShipDate).HasColumnName("ShipDate").IsOptional().HasColumnType("datetime");
            Property(x => x.Status).HasColumnName("Status").IsRequired().HasColumnType("tinyint");
            Property(x => x.OnlineOrderFlag).HasColumnName("OnlineOrderFlag").IsRequired().HasColumnType("bit");
            Property(x => x.SalesOrderNumber).HasColumnName("SalesOrderNumber").IsRequired().HasColumnType("nvarchar").HasMaxLength(25).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed);
            Property(x => x.PurchaseOrderNumber).HasColumnName("PurchaseOrderNumber").IsOptional().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.AccountNumber).HasColumnName("AccountNumber").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.CustomerId).HasColumnName("CustomerID").IsRequired().HasColumnType("int");
            Property(x => x.ShipToAddressId).HasColumnName("ShipToAddressID").IsOptional().HasColumnType("int");
            Property(x => x.BillToAddressId).HasColumnName("BillToAddressID").IsOptional().HasColumnType("int");
            Property(x => x.ShipMethod).HasColumnName("ShipMethod").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CreditCardApprovalCode).HasColumnName("CreditCardApprovalCode").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(15);
            Property(x => x.SubTotal).HasColumnName("SubTotal").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.TaxAmt).HasColumnName("TaxAmt").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Freight).HasColumnName("Freight").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.TotalDue).HasColumnName("TotalDue").IsRequired().HasColumnType("money").HasPrecision(19,4).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed);
            Property(x => x.Comment).HasColumnName("Comment").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.Address_BillToAddressId).WithMany(b => b.SalesOrderHeaders_BillToAddressId).HasForeignKey(c => c.BillToAddressId); // FK_SalesOrderHeader_Address_BillTo_AddressID
            HasOptional(a => a.Address_ShipToAddressId).WithMany(b => b.SalesOrderHeaders_ShipToAddressId).HasForeignKey(c => c.ShipToAddressId); // FK_SalesOrderHeader_Address_ShipTo_AddressID
            HasRequired(a => a.Customer).WithMany(b => b.SalesOrderHeaders).HasForeignKey(c => c.CustomerId); // FK_SalesOrderHeader_Customer_CustomerID
        }
    }

    // vGetAllCategories
    public class VGetAllCategoryConfiguration : EntityTypeConfiguration<VGetAllCategory>
    {
        public VGetAllCategoryConfiguration()
            : this("SalesLT")
        {
        }
 
        public VGetAllCategoryConfiguration(string schema)
        {
            ToTable(schema + ".vGetAllCategories");
            HasKey(x => x.ParentProductCategoryName);

            Property(x => x.ParentProductCategoryName).HasColumnName("ParentProductCategoryName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ProductCategoryName).HasColumnName("ProductCategoryName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ProductCategoryId).HasColumnName("ProductCategoryID").IsOptional().HasColumnType("int");
        }
    }

    // vProductAndDescription
    public class VProductAndDescriptionConfiguration : EntityTypeConfiguration<VProductAndDescription>
    {
        public VProductAndDescriptionConfiguration()
            : this("SalesLT")
        {
        }
 
        public VProductAndDescriptionConfiguration(string schema)
        {
            ToTable(schema + ".vProductAndDescription");
            HasKey(x => new { x.ProductId, x.Name, x.ProductModel, x.Culture, x.Description });

            Property(x => x.ProductId).HasColumnName("ProductID").IsRequired().HasColumnType("int");
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ProductModel).HasColumnName("ProductModel").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Culture).HasColumnName("Culture").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(6);
            Property(x => x.Description).HasColumnName("Description").IsRequired().HasColumnType("nvarchar").HasMaxLength(400);
        }
    }

    // vProductModelCatalogDescription
    public class VProductModelCatalogDescriptionConfiguration : EntityTypeConfiguration<VProductModelCatalogDescription>
    {
        public VProductModelCatalogDescriptionConfiguration()
            : this("SalesLT")
        {
        }
 
        public VProductModelCatalogDescriptionConfiguration(string schema)
        {
            ToTable(schema + ".vProductModelCatalogDescription");
            HasKey(x => new { x.ProductModelId, x.Name, x.Rowguid, x.ModifiedDate });

            Property(x => x.ProductModelId).HasColumnName("ProductModelID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Summary).HasColumnName("Summary").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Manufacturer).HasColumnName("Manufacturer").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Copyright).HasColumnName("Copyright").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.ProductUrl).HasColumnName("ProductURL").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.WarrantyPeriod).HasColumnName("WarrantyPeriod").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.WarrantyDescription).HasColumnName("WarrantyDescription").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.NoOfYears).HasColumnName("NoOfYears").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.MaintenanceDescription).HasColumnName("MaintenanceDescription").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.Wheel).HasColumnName("Wheel").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.Saddle).HasColumnName("Saddle").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.Pedal).HasColumnName("Pedal").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.BikeFrame).HasColumnName("BikeFrame").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Crankset).HasColumnName("Crankset").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.PictureAngle).HasColumnName("PictureAngle").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.PictureSize).HasColumnName("PictureSize").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.ProductPhotoId).HasColumnName("ProductPhotoID").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.Material).HasColumnName("Material").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.Color).HasColumnName("Color").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.ProductLine).HasColumnName("ProductLine").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.Style).HasColumnName("Style").IsOptional().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.RiderExperience).HasColumnName("RiderExperience").IsOptional().HasColumnType("nvarchar").HasMaxLength(1024);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }


    // ************************************************************************
    // Stored procedure return models

}
// </auto-generated>

